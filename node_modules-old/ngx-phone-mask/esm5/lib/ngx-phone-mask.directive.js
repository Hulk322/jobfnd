/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';
import { mask, clean } from './utils';
var TextMaskConfig = /** @class */ (function () {
    function TextMaskConfig() {
    }
    return TextMaskConfig;
}());
export { TextMaskConfig };
if (false) {
    /** @type {?} */
    TextMaskConfig.prototype.mask;
    /** @type {?} */
    TextMaskConfig.prototype.guide;
    /** @type {?} */
    TextMaskConfig.prototype.placeholderChar;
    /** @type {?} */
    TextMaskConfig.prototype.pipe;
    /** @type {?} */
    TextMaskConfig.prototype.keepCharPositions;
    /** @type {?} */
    TextMaskConfig.prototype.showMask;
}
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 * @return {?}
 */
function _isAndroid() {
    /** @type {?} */
    var userAgent = getDOM() ? getDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
var NgxPhoneMaskDirective = /** @class */ (function () {
    function NgxPhoneMaskDirective(_renderer, _elementRef, _compositionMode) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.clean = true;
        this.maxNumberLength = 13;
        /**
         * Whether the user is creating a composition string (IME events).
         */
        this._composing = false;
        this.onChange = function (_) {
        };
        this.onTouched = function () {
        };
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    /**
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._setupMask(true);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(this.inputElement.value);
        }
    };
    /**
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._setupMask();
        // set the initial value for cases where the mask is disabled
        /** @type {?} */
        var normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
        if (this.textMaskInputElement !== undefined) {
            this.textMaskInputElement.update(value);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype._handleInput = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this._setupMask();
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
                // get the updated value
                value = this.inputElement.value;
                if (this.clean) {
                    this.onChange(clean(value));
                }
                else {
                    this.onChange(value);
                }
            }
        }
    };
    /**
     * @param {?=} create
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype._setupMask = /**
     * @param {?=} create
     * @return {?}
     */
    function (create) {
        if (create === void 0) { create = false; }
        this.textMaskConfig = {
            mask: mask(this.maxNumberLength),
            guide: false,
            placeholderChar: '_',
            pipe: undefined,
            keepCharPositions: false,
        };
        if (!this.inputElement) {
            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                // `textMask` directive is used directly on an input element
                this.inputElement = this._elementRef.nativeElement;
            }
            else {
                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
            }
        }
        if (this.inputElement && create) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
        }
    };
    /**
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype._compositionStart = /**
     * @return {?}
     */
    function () {
        this._composing = true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxPhoneMaskDirective.prototype._compositionEnd = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    };
    NgxPhoneMaskDirective.decorators = [
        { type: Directive, args: [{
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    selector: '[ngxPhoneMask]',
                    exportAs: 'ngxPhoneMask',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return NgxPhoneMaskDirective; }),
                            multi: true
                        }]
                },] }
    ];
    /** @nocollapse */
    NgxPhoneMaskDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
    ]; };
    NgxPhoneMaskDirective.propDecorators = {
        clean: [{ type: Input }],
        maxNumberLength: [{ type: Input }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return NgxPhoneMaskDirective;
}());
export { NgxPhoneMaskDirective };
if (false) {
    /** @type {?} */
    NgxPhoneMaskDirective.prototype.clean;
    /** @type {?} */
    NgxPhoneMaskDirective.prototype.maxNumberLength;
    /** @type {?} */
    NgxPhoneMaskDirective.prototype.textMaskConfig;
    /**
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype.textMaskInputElement;
    /**
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype.inputElement;
    /**
     * Whether the user is creating a composition string (IME events).
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype._composing;
    /** @type {?} */
    NgxPhoneMaskDirective.prototype.onChange;
    /** @type {?} */
    NgxPhoneMaskDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxPhoneMaskDirective.prototype._compositionMode;
}
//# sourceMappingURL=data:application/json;base64,