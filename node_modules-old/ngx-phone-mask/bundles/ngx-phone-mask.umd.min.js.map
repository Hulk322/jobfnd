{"version":3,"sources":["ng://ngx-phone-mask/lib/utils.ts","ng://ngx-phone-mask/lib/ngx-phone-mask.directive.ts","ng://ngx-phone-mask/lib/ngx-phone-mask.pipe.ts","ng://ngx-phone-mask/lib/ngx-phone-mask.module.ts"],"names":["clean","number","toString","replace","mask","maxLength","rawValue","length","TextMaskConfig","NgxPhoneMaskDirective","_renderer","_elementRef","_compositionMode","this","maxNumberLength","_composing","onChange","_","onTouched","_isAndroid","userAgent","getDOM","getUserAgent","test","toLowerCase","prototype","ngOnInit","_setupMask","textMaskInputElement","undefined","update","inputElement","value","ngOnChanges","changes","onBlur","writeValue","normalizedValue","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","_handleInput","create","textMaskConfig","guide","placeholderChar","pipe","keepCharPositions","tagName","toUpperCase","getElementsByTagName","createTextMaskInputElement","Object","assign","_compositionStart","_compositionEnd","Directive","args","host","(input)","(blur)","(compositionstart)","(compositionend)","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","ElementRef","Optional","type","Inject","COMPOSITION_BUFFER_MODE","Input","HostListener","NgxPhoneMaskPipe","transform","conformToMask","conformedValue","Pipe","name","NgxPhoneMaskModule","NgModule","imports","TextMaskModule","declarations","exports"],"mappings":"kkBAAA,IAAaA,EAAQ,SAACC,GACrB,OAAOA,EACLC,WACAC,QAAQ,cAAe,KAGbC,EAAO,SAACC,GAA2B,YAA3B,IAAAA,IAAAA,EAAA,IAA2B,SAACC,GAChD,OAAIN,EAAMM,GAAUC,QAAU,IAAoB,KAAdF,EAC5B,CAAC,IAAK,QAAS,IAAK,IAAK,QAAS,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,IAAK,KAAM,MAGvG,CAAC,IAAK,QAAS,IAAK,IAAK,QAAS,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,QCXpHG,EAeA,SAAAA,MAkBA,IAAAC,EAAA,WAgCC,SAAAA,EACSC,EACAC,EAC6CC,GAF7CC,KAAAH,UAAAA,EACAG,KAAAF,YAAAA,EAC6CE,KAAAD,iBAAAA,EAnB7CC,KAAAb,OAAQ,EACRa,KAAAC,gBAA0B,GAQ3BD,KAAAE,YAAa,EAErBF,KAAAG,SAAW,SAACC,KAEZJ,KAAAK,UAAY,aAQkB,MAAzBL,KAAKD,mBACRC,KAAKD,kBA3CR,SAASO,QACFC,EAAYC,EAAAA,UAAWA,EAAAA,UAASC,eAAiB,GACvD,MAAO,gBAAgBC,KAAKH,EAAUI,eAyCXL,IAoG5B,OAhGCV,EAAAgB,UAAAC,SAAA,WACCb,KAAKc,YAAW,GACZd,KAAKe,uBAAyBC,WACjChB,KAAKe,qBAAqBE,OAAOjB,KAAKkB,aAAaC,QAIrDvB,EAAAgB,UAAAQ,YAAA,SAAYC,GACXrB,KAAKc,YAAW,GACZd,KAAKe,uBAAyBC,WACjChB,KAAKe,qBAAqBE,OAAOjB,KAAKkB,aAAaC,QAKrDvB,EAAAgB,UAAAU,OADA,WAECtB,KAAKK,aAGNT,EAAAgB,UAAAW,WAAA,SAAWJ,GACVnB,KAAKc,iBAGCU,EAA2B,MAATL,EAAgB,GAAKA,EAC7CnB,KAAKH,UAAU4B,YAAYzB,KAAKkB,aAAc,QAASM,GAEnDxB,KAAKe,uBAAyBC,WACjChB,KAAKe,qBAAqBE,OAAOE,IAInCvB,EAAAgB,UAAAc,iBAAA,SAAiBC,GAChB3B,KAAKG,SAAWwB,GAGjB/B,EAAAgB,UAAAgB,kBAAA,SAAkBD,GACjB3B,KAAKK,UAAYsB,GAGlB/B,EAAAgB,UAAAiB,iBAAA,SAAiBC,GAChB9B,KAAKH,UAAU4B,YAAYzB,KAAKF,YAAYiC,cAAe,WAAYD,IAGxElC,EAAAgB,UAAAoB,aAAA,SAAab,KACPnB,KAAKD,kBAAqBC,KAAKD,mBAAqBC,KAAKE,cAC7DF,KAAKc,aAEDd,KAAKe,uBAAyBC,YACjChB,KAAKe,qBAAqBE,OAAOE,GAGjCA,EAAQnB,KAAKkB,aAAaC,MAEtBnB,KAAKb,MACRa,KAAKG,SAAShB,EAAMgC,IAEpBnB,KAAKG,SAASgB,MAMlBvB,EAAAgB,UAAAE,WAAA,SAAWmB,QAAA,IAAAA,IAAAA,GAAA,GACVjC,KAAKkC,eAAiB,CACrB3C,KAAMA,EAAKS,KAAKC,iBAChBkC,OAAO,EACPC,gBAAiB,IACjBC,KAAMrB,UACNsB,mBAAmB,GAEftC,KAAKkB,eACoD,UAAzDlB,KAAKF,YAAYiC,cAAcQ,QAAQC,cAE1CxC,KAAKkB,aAAelB,KAAKF,YAAYiC,cAGrC/B,KAAKkB,aAAelB,KAAKF,YAAYiC,cAAcU,qBAAqB,SAAS,IAI/EzC,KAAKkB,cAAgBe,IACxBjC,KAAKe,qBAAuB2B,EAAAA,2BAC3BC,OAAOC,OAAO,CAAE1B,aAAclB,KAAKkB,cAAgBlB,KAAKkC,mBAM3DtC,EAAAgB,UAAAiC,kBAAA,WACC7C,KAAKE,YAAa,GAGnBN,EAAAgB,UAAAkC,gBAAA,SAAgB3B,GACfnB,KAAKE,YAAa,EAClBF,KAAKD,kBAAoBC,KAAKgC,aAAab,wBAxI5C4B,EAAAA,UAASC,KAAA,CAAC,CACVC,KAAM,CACLC,UAAW,oCACXC,SAAU,cACVC,qBAAsB,sBACtBC,mBAAoB,wCAErBC,SAAU,iBACVC,SAAU,eACVC,UAAW,CAAC,CACXC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAhE,IAC9BiE,OAAO,iDAtCRC,EAAAA,iBALAC,EAAAA,4CAkEEC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMlB,KAAA,CAACmB,EAAAA,6DAnBpBC,EAAAA,+BACAA,EAAAA,sBAuCAC,EAAAA,aAAYrB,KAAA,CAAC,WAkFfpD,EA1IA,GCjCA0E,EAAA,WAIA,SAAAA,KAgBA,OAXCA,EAAA1D,UAAA2D,UAAA,SAAUpD,GACT,OAAKA,EAIEqD,EAAAA,cACNrD,EACA5B,IACA,CAAE4C,OAAO,IACRsC,eAPM,wBAPTC,EAAAA,KAAI1B,KAAA,CAAC,CACL2B,KAAM,mBAePL,EApBA,GCAAM,EAAA,WAKA,SAAAA,KAYA,2BAZCC,EAAAA,SAAQ7B,KAAA,CAAC,CACT8B,QAAS,CAACC,EAAAA,gBACVC,aAAc,CACbpF,EACA0E,GAEDW,QAAS,CACRrF,EACA0E,OAIFM,EAjBA","sourcesContent":["export const clean = (number) => {\n\treturn number\n\t\t.toString()\n\t\t.replace(/[^\\d\\^\\+]/gm, '');\n};\n\nexport const mask = (maxLength: number = 13) => (rawValue) => {\n\tif (clean(rawValue).length <= 12 || maxLength === 12) {\n\t\treturn ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/];\n\t}\n\n\treturn ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n\n};\n","import {\n\tDirective,\n\tElementRef,\n\tforwardRef, HostListener,\n\tInject, Input,\n\tOnChanges, OnInit,\n\tOptional,\n\tRenderer2,\n\tSimpleChanges\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';\nimport { mask, clean } from './utils';\n\nexport class TextMaskConfig {\n\tmask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false;\n\tguide?: boolean;\n\tplaceholderChar?: string;\n\tpipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object;\n\tkeepCharPositions?: boolean;\n\tshowMask?: boolean;\n}\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n\tconst userAgent = getDOM() ? getDOM().getUserAgent() : '';\n\treturn /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\n@Directive({\n\thost: {\n\t\t'(input)': '_handleInput($event.target.value)',\n\t\t'(blur)': 'onTouched()',\n\t\t'(compositionstart)': '_compositionStart()',\n\t\t'(compositionend)': '_compositionEnd($event.target.value)'\n\t},\n\tselector: '[ngxPhoneMask]',\n\texportAs: 'ngxPhoneMask',\n\tproviders: [{\n\t\tprovide: NG_VALUE_ACCESSOR,\n\t\tuseExisting: forwardRef(() => NgxPhoneMaskDirective),\n\t\tmulti: true\n\t}]\n})\nexport class NgxPhoneMaskDirective implements ControlValueAccessor, OnChanges, OnInit {\n\t@Input() clean = true;\n\t@Input() maxNumberLength: number = 13;\n\n\ttextMaskConfig: TextMaskConfig;\n\n\tprivate textMaskInputElement: any;\n\tprivate inputElement: HTMLInputElement;\n\n\t/** Whether the user is creating a composition string (IME events). */\n\tprivate _composing = false;\n\n\tonChange = (_: any) => {\n\t};\n\tonTouched = () => {\n\t};\n\n\tconstructor(\n\t\tprivate _renderer: Renderer2,\n\t\tprivate _elementRef: ElementRef,\n\t\t@Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean\n\t) {\n\t\tif (this._compositionMode == null) {\n\t\t\tthis._compositionMode = !_isAndroid();\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis._setupMask(true);\n\t\tif (this.textMaskInputElement !== undefined) {\n\t\t\tthis.textMaskInputElement.update(this.inputElement.value);\n\t\t}\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis._setupMask(true);\n\t\tif (this.textMaskInputElement !== undefined) {\n\t\t\tthis.textMaskInputElement.update(this.inputElement.value);\n\t\t}\n\t}\n\n\t@HostListener('blur')\n\tonBlur() {\n\t\tthis.onTouched();\n\t}\n\n\twriteValue(value: any) {\n\t\tthis._setupMask();\n\n\t\t// set the initial value for cases where the mask is disabled\n\t\tconst normalizedValue = value == null ? '' : value;\n\t\tthis._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n\n\t\tif (this.textMaskInputElement !== undefined) {\n\t\t\tthis.textMaskInputElement.update(value);\n\t\t}\n\t}\n\n\tregisterOnChange(fn: (_: any) => void): void {\n\t\tthis.onChange = fn;\n\t}\n\n\tregisterOnTouched(fn: () => void): void {\n\t\tthis.onTouched = fn;\n\t}\n\n\tsetDisabledState(isDisabled: boolean): void {\n\t\tthis._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t}\n\n\t_handleInput(value) {\n\t\tif (!this._compositionMode || (this._compositionMode && !this._composing)) {\n\t\t\tthis._setupMask();\n\n\t\t\tif (this.textMaskInputElement !== undefined) {\n\t\t\t\tthis.textMaskInputElement.update(value);\n\n\t\t\t\t// get the updated value\n\t\t\t\tvalue = this.inputElement.value;\n\n\t\t\t\tif (this.clean) {\n\t\t\t\t\tthis.onChange(clean(value));\n\t\t\t\t} else {\n\t\t\t\t\tthis.onChange(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_setupMask(create = false) {\n\t\tthis.textMaskConfig = {\n\t\t\tmask: mask(this.maxNumberLength),\n\t\t\tguide: false,\n\t\t\tplaceholderChar: '_',\n\t\t\tpipe: undefined,\n\t\t\tkeepCharPositions: false,\n\t\t};\n\t\tif (!this.inputElement) {\n\t\t\tif (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n\t\t\t\t// `textMask` directive is used directly on an input element\n\t\t\t\tthis.inputElement = this._elementRef.nativeElement;\n\t\t\t} else {\n\t\t\t\t// `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n\t\t\t\tthis.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n\t\t\t}\n\t\t}\n\n\t\tif (this.inputElement && create) {\n\t\t\tthis.textMaskInputElement = createTextMaskInputElement(\n\t\t\t\tObject.assign({ inputElement: this.inputElement }, this.textMaskConfig)\n\t\t\t);\n\t\t}\n\n\t}\n\n\t_compositionStart(): void {\n\t\tthis._composing = true;\n\t}\n\n\t_compositionEnd(value: any): void {\n\t\tthis._composing = false;\n\t\tthis._compositionMode && this._handleInput(value);\n\t}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { conformToMask } from 'angular2-text-mask';\nimport { mask } from './utils';\n\n@Pipe({\n\tname: 'ngxPhoneMask'\n})\n\nexport class NgxPhoneMaskPipe implements PipeTransform {\n\ttransform(value: string): string {\n\t\tif (!value) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn conformToMask(\n\t\t\tvalue,\n\t\t\tmask(),\n\t\t\t{ guide: false }\n\t\t).conformedValue;\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { NgxPhoneMaskDirective } from './ngx-phone-mask.directive';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { NgxPhoneMaskPipe } from './ngx-phone-mask.pipe';\n\n@NgModule({\n\timports: [TextMaskModule],\n\tdeclarations: [\n\t\tNgxPhoneMaskDirective,\n\t\tNgxPhoneMaskPipe\n\t],\n\texports: [\n\t\tNgxPhoneMaskDirective,\n\t\tNgxPhoneMaskPipe\n\t]\n})\nexport class NgxPhoneMaskModule {\n}\n"]}