(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/platform-browser'), require('text-mask-core/dist/textMaskCore'), require('@angular/core'), require('angular2-text-mask')) :
    typeof define === 'function' && define.amd ? define('ngx-phone-mask', ['exports', '@angular/forms', '@angular/platform-browser', 'text-mask-core/dist/textMaskCore', '@angular/core', 'angular2-text-mask'], factory) :
    (factory((global['ngx-phone-mask'] = {}),global.ng.forms,global.ng.platformBrowser,global.textMaskCore,global.ng.core,global.angular2TextMask));
}(this, (function (exports,forms,platformBrowser,textMaskCore,core,angular2TextMask) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var clean = function (number) {
        return number
            .toString()
            .replace(/[^\d\^\+]/gm, '');
    };
    /** @type {?} */
    var mask = function (maxLength) {
        if (maxLength === void 0) {
            maxLength = 13;
        }
        return function (rawValue) {
            if (clean(rawValue).length <= 12 || maxLength === 12) {
                return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/];
            }
            return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, '-', /\d/, /\d/];
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextMaskConfig = /** @class */ (function () {
        function TextMaskConfig() {
        }
        return TextMaskConfig;
    }());
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     * @return {?}
     */
    function _isAndroid() {
        /** @type {?} */
        var userAgent = platformBrowser.ɵgetDOM() ? platformBrowser.ɵgetDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    var NgxPhoneMaskDirective = /** @class */ (function () {
        function NgxPhoneMaskDirective(_renderer, _elementRef, _compositionMode) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.clean = true;
            this.maxNumberLength = 13;
            /**
             * Whether the user is creating a composition string (IME events).
             */
            this._composing = false;
            this.onChange = function (_) {
            };
            this.onTouched = function () {
            };
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        /**
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._setupMask(true);
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(this.inputElement.value);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this._setupMask(true);
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(this.inputElement.value);
                }
            };
        /**
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                this.onTouched();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._setupMask();
                // set the initial value for cases where the mask is disabled
                /** @type {?} */
                var normalizedValue = value == null ? '' : value;
                this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(value);
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype._handleInput = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                    this._setupMask();
                    if (this.textMaskInputElement !== undefined) {
                        this.textMaskInputElement.update(value);
                        // get the updated value
                        value = this.inputElement.value;
                        if (this.clean) {
                            this.onChange(clean(value));
                        }
                        else {
                            this.onChange(value);
                        }
                    }
                }
            };
        /**
         * @param {?=} create
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype._setupMask = /**
         * @param {?=} create
         * @return {?}
         */
            function (create) {
                if (create === void 0) {
                    create = false;
                }
                this.textMaskConfig = {
                    mask: mask(this.maxNumberLength),
                    guide: false,
                    placeholderChar: '_',
                    pipe: undefined,
                    keepCharPositions: false,
                };
                if (!this.inputElement) {
                    if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                        // `textMask` directive is used directly on an input element
                        this.inputElement = this._elementRef.nativeElement;
                    }
                    else {
                        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
                    }
                }
                if (this.inputElement && create) {
                    this.textMaskInputElement = textMaskCore.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
                }
            };
        /**
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype._compositionStart = /**
         * @return {?}
         */
            function () {
                this._composing = true;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxPhoneMaskDirective.prototype._compositionEnd = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._composing = false;
                this._compositionMode && this._handleInput(value);
            };
        NgxPhoneMaskDirective.decorators = [
            { type: core.Directive, args: [{
                        host: {
                            '(input)': '_handleInput($event.target.value)',
                            '(blur)': 'onTouched()',
                            '(compositionstart)': '_compositionStart()',
                            '(compositionend)': '_compositionEnd($event.target.value)'
                        },
                        selector: '[ngxPhoneMask]',
                        exportAs: 'ngxPhoneMask',
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return NgxPhoneMaskDirective; }),
                                multi: true
                            }]
                    },] }
        ];
        /** @nocollapse */
        NgxPhoneMaskDirective.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: Boolean, decorators: [{ type: core.Optional }, { type: core.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] }
            ];
        };
        NgxPhoneMaskDirective.propDecorators = {
            clean: [{ type: core.Input }],
            maxNumberLength: [{ type: core.Input }],
            onBlur: [{ type: core.HostListener, args: ['blur',] }]
        };
        return NgxPhoneMaskDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPhoneMaskPipe = /** @class */ (function () {
        function NgxPhoneMaskPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NgxPhoneMaskPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!value) {
                    return '';
                }
                return angular2TextMask.conformToMask(value, mask(), { guide: false }).conformedValue;
            };
        NgxPhoneMaskPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'ngxPhoneMask'
                    },] }
        ];
        return NgxPhoneMaskPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPhoneMaskModule = /** @class */ (function () {
        function NgxPhoneMaskModule() {
        }
        NgxPhoneMaskModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [angular2TextMask.TextMaskModule],
                        declarations: [
                            NgxPhoneMaskDirective,
                            NgxPhoneMaskPipe
                        ],
                        exports: [
                            NgxPhoneMaskDirective,
                            NgxPhoneMaskPipe
                        ]
                    },] }
        ];
        return NgxPhoneMaskModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TextMaskConfig = TextMaskConfig;
    exports.NgxPhoneMaskDirective = NgxPhoneMaskDirective;
    exports.NgxPhoneMaskModule = NgxPhoneMaskModule;
    exports.ɵa = NgxPhoneMaskPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-phone-mask.umd.js.map