{"ast":null,"code":"import _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { ɵgetDOM } from '@angular/platform-browser';\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';\nimport { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, Renderer2, Pipe, NgModule } from '@angular/core';\nimport { conformToMask, TextMaskModule } from 'angular2-text-mask';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar clean = function clean(number) {\n  return number.toString().replace(/[^\\d\\^\\+]/gm, '');\n};\n/** @type {?} */\n\n\nvar mask = function mask() {\n  var maxLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 13;\n  return function (rawValue) {\n    if (clean(rawValue).length <= 12 || maxLength === 12) {\n      return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/];\n    }\n\n    return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TextMaskConfig = /*#__PURE__*/_createClass(function TextMaskConfig() {\n  _classCallCheck(this, TextMaskConfig);\n});\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\n\n\nfunction _isAndroid() {\n  /** @type {?} */\n  var userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\nvar NgxPhoneMaskDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} _renderer\n   * @param {?} _elementRef\n   * @param {?} _compositionMode\n   */\n  function NgxPhoneMaskDirective(_renderer, _elementRef, _compositionMode) {\n    _classCallCheck(this, NgxPhoneMaskDirective);\n\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._compositionMode = _compositionMode;\n    this.clean = true;\n    this.maxNumberLength = 13;\n    /**\n     * Whether the user is creating a composition string (IME events).\n     */\n\n    this._composing = false;\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgxPhoneMaskDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._setupMask(true);\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(this.inputElement.value);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._setupMask(true);\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(this.inputElement.value);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.onTouched();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this._setupMask(); // set the initial value for cases where the mask is disabled\n\n      /** @type {?} */\n\n\n      var normalizedValue = value == null ? '' : value;\n\n      this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value);\n      }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(value) {\n      if (!this._compositionMode || this._compositionMode && !this._composing) {\n        this._setupMask();\n\n        if (this.textMaskInputElement !== undefined) {\n          this.textMaskInputElement.update(value); // get the updated value\n\n          value = this.inputElement.value;\n\n          if (this.clean) {\n            this.onChange(clean(value));\n          } else {\n            this.onChange(value);\n          }\n        }\n      }\n    }\n    /**\n     * @param {?=} create\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setupMask\",\n    value: function _setupMask() {\n      var create = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.textMaskConfig = {\n        mask: mask(this.maxNumberLength),\n        guide: false,\n        placeholderChar: '_',\n        pipe: undefined,\n        keepCharPositions: false\n      };\n\n      if (!this.inputElement) {\n        if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n          // `textMask` directive is used directly on an input element\n          this.inputElement = this._elementRef.nativeElement;\n        } else {\n          // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n          this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n        }\n      }\n\n      if (this.inputElement && create) {\n        this.textMaskInputElement = createTextMaskInputElement(Object.assign({\n          inputElement: this.inputElement\n        }, this.textMaskConfig));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_compositionStart\",\n    value: function _compositionStart() {\n      this._composing = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_compositionEnd\",\n    value: function _compositionEnd(value) {\n      this._composing = false;\n      this._compositionMode && this._handleInput(value);\n    }\n  }]);\n\n  return NgxPhoneMaskDirective;\n}();\n\nNgxPhoneMaskDirective.ɵfac = function NgxPhoneMaskDirective_Factory(t) {\n  return new (t || NgxPhoneMaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));\n};\n\nNgxPhoneMaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NgxPhoneMaskDirective,\n  selectors: [[\"\", \"ngxPhoneMask\", \"\"]],\n  hostBindings: function NgxPhoneMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function NgxPhoneMaskDirective_input_HostBindingHandler($event) {\n        return ctx._handleInput($event.target.value);\n      })(\"blur\", function NgxPhoneMaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"compositionstart\", function NgxPhoneMaskDirective_compositionstart_HostBindingHandler() {\n        return ctx._compositionStart();\n      })(\"compositionend\", function NgxPhoneMaskDirective_compositionend_HostBindingHandler($event) {\n        return ctx._compositionEnd($event.target.value);\n      });\n    }\n  },\n  inputs: {\n    clean: \"clean\",\n    maxNumberLength: \"maxNumberLength\"\n  },\n  exportAs: [\"ngxPhoneMask\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NgxPhoneMaskDirective;\n    }),\n    multi: true\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nNgxPhoneMaskDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [COMPOSITION_BUFFER_MODE]\n    }]\n  }];\n};\n\nNgxPhoneMaskDirective.propDecorators = {\n  clean: [{\n    type: Input\n  }],\n  maxNumberLength: [{\n    type: Input\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskDirective, [{\n    type: Directive,\n    args: [{\n      host: {\n        '(input)': '_handleInput($event.target.value)',\n        '(blur)': 'onTouched()',\n        '(compositionstart)': '_compositionStart()',\n        '(compositionend)': '_compositionEnd($event.target.value)'\n      },\n      selector: '[ngxPhoneMask]',\n      exportAs: 'ngxPhoneMask',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NgxPhoneMaskDirective;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [COMPOSITION_BUFFER_MODE]\n      }]\n    }];\n  }, {\n    clean: [{\n      type: Input\n    }],\n    maxNumberLength: [{\n      type: Input\n    }],\n\n    /**\n     * @return {?}\n     */\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxPhoneMaskPipe = /*#__PURE__*/function () {\n  function NgxPhoneMaskPipe() {\n    _classCallCheck(this, NgxPhoneMaskPipe);\n  }\n\n  _createClass(NgxPhoneMaskPipe, [{\n    key: \"transform\",\n    value:\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function transform(value) {\n      if (!value) {\n        return '';\n      }\n\n      return conformToMask(value, mask(), {\n        guide: false\n      }).conformedValue;\n    }\n  }]);\n\n  return NgxPhoneMaskPipe;\n}();\n\nNgxPhoneMaskPipe.ɵfac = function NgxPhoneMaskPipe_Factory(t) {\n  return new (t || NgxPhoneMaskPipe)();\n};\n\nNgxPhoneMaskPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"ngxPhoneMask\",\n  type: NgxPhoneMaskPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'ngxPhoneMask'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxPhoneMaskModule = /*#__PURE__*/_createClass(function NgxPhoneMaskModule() {\n  _classCallCheck(this, NgxPhoneMaskModule);\n});\n\nNgxPhoneMaskModule.ɵfac = function NgxPhoneMaskModule_Factory(t) {\n  return new (t || NgxPhoneMaskModule)();\n};\n\nNgxPhoneMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxPhoneMaskModule\n});\nNgxPhoneMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[TextMaskModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPhoneMaskModule, {\n    declarations: function declarations() {\n      return [NgxPhoneMaskDirective, NgxPhoneMaskPipe];\n    },\n    imports: function imports() {\n      return [TextMaskModule];\n    },\n    exports: function exports() {\n      return [NgxPhoneMaskDirective, NgxPhoneMaskPipe];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [TextMaskModule],\n      declarations: [NgxPhoneMaskDirective, NgxPhoneMaskPipe],\n      exports: [NgxPhoneMaskDirective, NgxPhoneMaskPipe]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { TextMaskConfig, NgxPhoneMaskDirective, NgxPhoneMaskModule, NgxPhoneMaskPipe as ɵa }; //# sourceMappingURL=ngx-phone-mask.js.map","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ngx-phone-mask/__ivy_ngcc__/fesm2015/ngx-phone-mask.js"],"names":["NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","ɵgetDOM","createTextMaskInputElement","Directive","ElementRef","forwardRef","HostListener","Inject","Input","Optional","Renderer2","Pipe","NgModule","conformToMask","TextMaskModule","ɵngcc0","clean","number","toString","replace","mask","maxLength","rawValue","length","TextMaskConfig","_isAndroid","userAgent","getUserAgent","test","toLowerCase","NgxPhoneMaskDirective","_renderer","_elementRef","_compositionMode","maxNumberLength","_composing","onChange","_","onTouched","_setupMask","textMaskInputElement","undefined","update","inputElement","value","changes","normalizedValue","setProperty","fn","isDisabled","nativeElement","create","textMaskConfig","guide","placeholderChar","pipe","keepCharPositions","tagName","toUpperCase","getElementsByTagName","Object","assign","_handleInput","ɵfac","NgxPhoneMaskDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","NgxPhoneMaskDirective_HostBindings","rf","ctx","ɵɵlistener","NgxPhoneMaskDirective_input_HostBindingHandler","$event","target","NgxPhoneMaskDirective_blur_HostBindingHandler","onBlur","NgxPhoneMaskDirective_compositionstart_HostBindingHandler","_compositionStart","NgxPhoneMaskDirective_compositionend_HostBindingHandler","_compositionEnd","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵNgOnChangesFeature","ctorParameters","Boolean","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","host","selector","providers","NgxPhoneMaskPipe","conformedValue","NgxPhoneMaskPipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","NgxPhoneMaskModule","NgxPhoneMaskModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵa"],"mappings":"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","sourcesContent":["import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { ɵgetDOM } from '@angular/platform-browser';\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';\nimport { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, Renderer2, Pipe, NgModule } from '@angular/core';\nimport { conformToMask, TextMaskModule } from 'angular2-text-mask';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst clean = (number) => {\n    return number\n        .toString()\n        .replace(/[^\\d\\^\\+]/gm, '');\n};\n/** @type {?} */\nconst mask = (maxLength = 13) => (rawValue) => {\n    if (clean(rawValue).length <= 12 || maxLength === 12) {\n        return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/];\n    }\n    return ['+', /[1-9]/, ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextMaskConfig {\n}\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    /** @type {?} */\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\nclass NgxPhoneMaskDirective {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.clean = true;\n        this.maxNumberLength = 13;\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        this.onChange = (_) => {\n        };\n        this.onTouched = () => {\n        };\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupMask(true);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.value);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._setupMask(true);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.value);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this.onTouched();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._setupMask();\n        // set the initial value for cases where the mask is disabled\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(value);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this._setupMask();\n            if (this.textMaskInputElement !== undefined) {\n                this.textMaskInputElement.update(value);\n                // get the updated value\n                value = this.inputElement.value;\n                if (this.clean) {\n                    this.onChange(clean(value));\n                }\n                else {\n                    this.onChange(value);\n                }\n            }\n        }\n    }\n    /**\n     * @param {?=} create\n     * @return {?}\n     */\n    _setupMask(create = false) {\n        this.textMaskConfig = {\n            mask: mask(this.maxNumberLength),\n            guide: false,\n            placeholderChar: '_',\n            pipe: undefined,\n            keepCharPositions: false,\n        };\n        if (!this.inputElement) {\n            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n                // `textMask` directive is used directly on an input element\n                this.inputElement = this._elementRef.nativeElement;\n            }\n            else {\n                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n            }\n        }\n        if (this.inputElement && create) {\n            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this._handleInput(value);\n    }\n}\nNgxPhoneMaskDirective.ɵfac = function NgxPhoneMaskDirective_Factory(t) { return new (t || NgxPhoneMaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8)); };\nNgxPhoneMaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxPhoneMaskDirective, selectors: [[\"\", \"ngxPhoneMask\", \"\"]], hostBindings: function NgxPhoneMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function NgxPhoneMaskDirective_input_HostBindingHandler($event) { return ctx._handleInput($event.target.value); })(\"blur\", function NgxPhoneMaskDirective_blur_HostBindingHandler() { return ctx.onBlur(); })(\"compositionstart\", function NgxPhoneMaskDirective_compositionstart_HostBindingHandler() { return ctx._compositionStart(); })(\"compositionend\", function NgxPhoneMaskDirective_compositionend_HostBindingHandler($event) { return ctx._compositionEnd($event.target.value); });\n    } }, inputs: { clean: \"clean\", maxNumberLength: \"maxNumberLength\" }, exportAs: [\"ngxPhoneMask\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => NgxPhoneMaskDirective),\n                multi: true\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nNgxPhoneMaskDirective.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\nNgxPhoneMaskDirective.propDecorators = {\n    clean: [{ type: Input }],\n    maxNumberLength: [{ type: Input }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskDirective, [{\n        type: Directive,\n        args: [{\n                host: {\n                    '(input)': '_handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '_compositionStart()',\n                    '(compositionend)': '_compositionEnd($event.target.value)'\n                },\n                selector: '[ngxPhoneMask]',\n                exportAs: 'ngxPhoneMask',\n                providers: [{\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => NgxPhoneMaskDirective),\n                        multi: true\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [COMPOSITION_BUFFER_MODE]\n            }] }]; }, { clean: [{\n            type: Input\n        }], maxNumberLength: [{\n            type: Input\n        }], \n    /**\n     * @return {?}\n     */\n    onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxPhoneMaskPipe {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    transform(value) {\n        if (!value) {\n            return '';\n        }\n        return conformToMask(value, mask(), { guide: false }).conformedValue;\n    }\n}\nNgxPhoneMaskPipe.ɵfac = function NgxPhoneMaskPipe_Factory(t) { return new (t || NgxPhoneMaskPipe)(); };\nNgxPhoneMaskPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"ngxPhoneMask\", type: NgxPhoneMaskPipe, pure: true });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'ngxPhoneMask'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxPhoneMaskModule {\n}\nNgxPhoneMaskModule.ɵfac = function NgxPhoneMaskModule_Factory(t) { return new (t || NgxPhoneMaskModule)(); };\nNgxPhoneMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxPhoneMaskModule });\nNgxPhoneMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[TextMaskModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPhoneMaskModule, { declarations: function () { return [NgxPhoneMaskDirective, NgxPhoneMaskPipe]; }, imports: function () { return [TextMaskModule]; }, exports: function () { return [NgxPhoneMaskDirective, NgxPhoneMaskPipe]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPhoneMaskModule, [{\n        type: NgModule,\n        args: [{\n                imports: [TextMaskModule],\n                declarations: [\n                    NgxPhoneMaskDirective,\n                    NgxPhoneMaskPipe\n                ],\n                exports: [\n                    NgxPhoneMaskDirective,\n                    NgxPhoneMaskPipe\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { TextMaskConfig, NgxPhoneMaskDirective, NgxPhoneMaskModule, NgxPhoneMaskPipe as ɵa };\n\n//# sourceMappingURL=ngx-phone-mask.js.map"]},"metadata":{},"sourceType":"module"}