{"ast":null,"code":"import _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ElementRef, EventEmitter, Injector, TemplateRef, ApplicationRef, ComponentFactoryResolver, Injectable, NgZone } from '@angular/core';\nimport { listenToTriggersV2, registerEscClick, registerOutsideClick } from 'ngx-bootstrap/utils';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/positioning';\n\nvar BsComponentRef = /*#__PURE__*/_createClass(function BsComponentRef() {\n  _classCallCheck(this, BsComponentRef);\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\n\n\nvar ContentRef = /*#__PURE__*/_createClass(\n/**\n * @param {?} nodes\n * @param {?=} viewRef\n * @param {?=} componentRef\n */\nfunction ContentRef(\n/* tslint:disable-next-line: no-any */\n\n/* tslint:disable-next-line: no-any */\nnodes, viewRef,\n/* tslint:disable-next-line: no-any */\n\n/* tslint:disable-next-line: no-any */\ncomponentRef) {\n  _classCallCheck(this, ContentRef);\n\n  this.nodes = nodes;\n  this.viewRef = viewRef;\n  this.componentRef = componentRef;\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar ComponentLoader = /*#__PURE__*/function () {\n  /**\n   * Do not use this directly, it should be instanced via\n   * `ComponentLoadFactory.attach`\n   * \\@internal\n   * @param {?} _viewContainerRef\n   * @param {?} _renderer\n   * @param {?} _elementRef\n   * @param {?} _injector\n   * @param {?} _componentFactoryResolver\n   * @param {?} _ngZone\n   * @param {?} _applicationRef\n   * @param {?} _posService\n   */\n  function ComponentLoader(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _applicationRef, _posService) {\n    _classCallCheck(this, ComponentLoader);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._injector = _injector;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._ngZone = _ngZone;\n    this._applicationRef = _applicationRef;\n    this._posService = _posService;\n    this.onBeforeShow = new EventEmitter();\n    /* tslint:disable-next-line: no-any*/\n\n    this.onShown = new EventEmitter();\n    /* tslint:disable-next-line: no-any*/\n\n    this.onBeforeHide = new EventEmitter();\n    this.onHidden = new EventEmitter();\n    this._providers = [];\n    this._isHiding = false;\n    this._listenOpts = {};\n    this._globalListener = Function.prototype;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ComponentLoader, [{\n    key: \"isShown\",\n    get: function get() {\n      if (this._isHiding) {\n        return false;\n      }\n\n      return !!this._componentRef;\n    }\n    /**\n     * @param {?} compType\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(compType) {\n      this._componentFactory = this._componentFactoryResolver.resolveComponentFactory(compType);\n      return this;\n    }\n    /**\n     * @param {?=} container\n     * @return {?}\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(container) {\n      this.container = container || this.container;\n      return this;\n    }\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"position\",\n    value: function position(opts) {\n      this.attachment = opts.attachment || this.attachment;\n      this._elementRef =\n      /** @type {?} */\n      opts.target || this._elementRef;\n      return this;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n\n  }, {\n    key: \"provide\",\n    value: function provide(provider) {\n      this._providers.push(provider);\n\n      return this;\n    }\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._subscribePositioning();\n\n      this._innerComponent = null;\n\n      if (!this._componentRef) {\n        this.onBeforeShow.emit();\n        this._contentRef = this._getContentRef(opts.content, opts.context, opts.initialState);\n        var\n        /** @type {?} */\n        injector = Injector.create({\n          providers: this._providers,\n          parent: this._injector\n        });\n        this._componentRef = this._componentFactory.create(injector, this._contentRef.nodes);\n\n        this._applicationRef.attachView(this._componentRef.hostView); // this._componentRef = this._viewContainerRef\n        //   .createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);\n\n\n        this.instance = this._componentRef.instance;\n        Object.assign(this._componentRef.instance, opts);\n\n        if (this.container instanceof ElementRef) {\n          this.container.nativeElement.appendChild(this._componentRef.location.nativeElement);\n        }\n\n        if (this.container === 'body' && typeof document !== 'undefined') {\n          document.querySelector(\n          /** @type {?} */\n          this.container).appendChild(this._componentRef.location.nativeElement);\n        }\n\n        if (!this.container && this._elementRef && this._elementRef.nativeElement.parentElement) {\n          this._elementRef.nativeElement.parentElement.appendChild(this._componentRef.location.nativeElement);\n        } // we need to manually invoke change detection since events registered\n        // via\n        // Renderer::listen() are not picked up by change detection with the\n        // OnPush strategy\n\n\n        if (this._contentRef.componentRef) {\n          this._innerComponent = this._contentRef.componentRef.instance;\n\n          this._contentRef.componentRef.changeDetectorRef.markForCheck();\n\n          this._contentRef.componentRef.changeDetectorRef.detectChanges();\n        }\n\n        this._componentRef.changeDetectorRef.markForCheck();\n\n        this._componentRef.changeDetectorRef.detectChanges();\n\n        this.onShown.emit(this._componentRef.instance);\n      }\n\n      this._registerOutsideClick();\n\n      return this._componentRef;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (!this._componentRef) {\n        return this;\n      }\n\n      this._posService.deletePositionElement(this._componentRef.location);\n\n      this.onBeforeHide.emit(this._componentRef.instance);\n      var\n      /** @type {?} */\n      componentEl = this._componentRef.location.nativeElement;\n      componentEl.parentNode.removeChild(componentEl);\n\n      if (this._contentRef.componentRef) {\n        this._contentRef.componentRef.destroy();\n      }\n\n      this._componentRef.destroy();\n\n      if (this._viewContainerRef && this._contentRef.viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n      }\n\n      if (this._contentRef.viewRef) {\n        this._contentRef.viewRef.destroy();\n      }\n\n      this._contentRef = null;\n      this._componentRef = null;\n\n      this._removeGlobalListener();\n\n      this.onHidden.emit();\n      return this;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.isShown) {\n        this.hide();\n        return;\n      }\n\n      this.show();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.isShown) {\n        this.hide();\n      }\n\n      this._unsubscribePositioning();\n\n      if (this._unregisterListenersFn) {\n        this._unregisterListenersFn();\n      }\n    }\n    /**\n     * @param {?} listenOpts\n     * @return {?}\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(listenOpts) {\n      var _this = this;\n\n      this.triggers = listenOpts.triggers || this.triggers;\n      this._listenOpts.outsideClick = listenOpts.outsideClick;\n      this._listenOpts.outsideEsc = listenOpts.outsideEsc;\n      listenOpts.target = listenOpts.target || this._elementRef.nativeElement;\n\n      var\n      /** @type {?} */\n      hide = this._listenOpts.hide = function () {\n        return listenOpts.hide ? listenOpts.hide() : void _this.hide();\n      };\n\n      var\n      /** @type {?} */\n      show = this._listenOpts.show = function (registerHide) {\n        listenOpts.show ? listenOpts.show(registerHide) : _this.show(registerHide);\n        registerHide();\n      };\n\n      var\n      /** @type {?} */\n      toggle = function toggle(registerHide) {\n        _this.isShown ? hide() : show(registerHide);\n      };\n\n      this._unregisterListenersFn = listenToTriggersV2(this._renderer, {\n        target: listenOpts.target,\n        triggers: listenOpts.triggers,\n        show: show,\n        hide: hide,\n        toggle: toggle\n      });\n      return this;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalListener) {\n        this._globalListener();\n\n        this._globalListener = null;\n      }\n    }\n    /**\n     * @param {?} vRef\n     * @param {?} template\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachInline\",\n    value: function attachInline(vRef,\n    /* tslint:disable-next-line: no-any*/\n\n    /* tslint:disable-next-line: no-any*/\n    template) {\n      this._inlineViewRef = vRef.createEmbeddedView(template);\n      return this;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerOutsideClick\",\n    value: function _registerOutsideClick() {\n      var _this2 = this;\n\n      if (!this._componentRef || !this._componentRef.location) {\n        return;\n      } // why: should run after first event bubble\n\n\n      if (this._listenOpts.outsideClick) {\n        var\n        /** @type {?} */\n        target = this._componentRef.location.nativeElement;\n        setTimeout(function () {\n          _this2._globalListener = registerOutsideClick(_this2._renderer, {\n            targets: [target, _this2._elementRef.nativeElement],\n            outsideClick: _this2._listenOpts.outsideClick,\n            hide: function hide() {\n              return _this2._listenOpts.hide();\n            }\n          });\n        });\n      }\n\n      if (this._listenOpts.outsideEsc) {\n        var\n        /** @type {?} */\n        _target = this._componentRef.location.nativeElement;\n        this._globalListener = registerEscClick(this._renderer, {\n          targets: [_target, this._elementRef.nativeElement],\n          outsideEsc: this._listenOpts.outsideEsc,\n          hide: function hide() {\n            return _this2._listenOpts.hide();\n          }\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getInnerComponent\",\n    value: function getInnerComponent() {\n      return this._innerComponent;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribePositioning\",\n    value: function _subscribePositioning() {\n      var _this3 = this;\n\n      if (this._zoneSubscription || !this.attachment) {\n        return;\n      }\n\n      this._zoneSubscription = this._ngZone.onStable.subscribe(function () {\n        if (!_this3._componentRef) {\n          return;\n        }\n\n        _this3._posService.position({\n          element: _this3._componentRef.location,\n          target: _this3._elementRef,\n          attachment: _this3.attachment,\n          appendToBody: _this3.container === 'body'\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unsubscribePositioning\",\n    value: function _unsubscribePositioning() {\n      if (!this._zoneSubscription) {\n        return;\n      }\n\n      this._zoneSubscription.unsubscribe();\n\n      this._zoneSubscription = null;\n    }\n    /**\n     * @param {?} content\n     * @param {?=} context\n     * @param {?=} initialState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getContentRef\",\n    value: function _getContentRef(\n    /* tslint:disable-next-line: no-any*/\n\n    /* tslint:disable-next-line: no-any*/\n    content,\n    /* tslint:disable-next-line: no-any*/\n\n    /* tslint:disable-next-line: no-any*/\n    context,\n    /* tslint:disable-next-line: no-any*/\n\n    /* tslint:disable-next-line: no-any*/\n    initialState) {\n      if (!content) {\n        return new ContentRef([]);\n      }\n\n      if (content instanceof TemplateRef) {\n        if (this._viewContainerRef) {\n          var\n          /** @type {?} */\n          _viewRef = this._viewContainerRef.createEmbeddedView(content, context);\n\n          _viewRef.markForCheck();\n\n          return new ContentRef([_viewRef.rootNodes], _viewRef);\n        }\n\n        var\n        /** @type {?} */\n        viewRef = content.createEmbeddedView({});\n\n        this._applicationRef.attachView(viewRef);\n\n        return new ContentRef([viewRef.rootNodes], viewRef);\n      }\n\n      if (typeof content === 'function') {\n        var\n        /** @type {?} */\n        contentCmptFactory = this._componentFactoryResolver.resolveComponentFactory(content);\n\n        var\n        /** @type {?} */\n        modalContentInjector = Injector.create({\n          providers: this._providers,\n          parent: this._injector\n        });\n        var\n        /** @type {?} */\n        componentRef = contentCmptFactory.create(modalContentInjector);\n        Object.assign(componentRef.instance, initialState);\n\n        this._applicationRef.attachView(componentRef.hostView);\n\n        return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\n      }\n\n      return new ContentRef([[this._renderer.createText(\"\".concat(content))]]);\n    }\n  }]);\n\n  return ComponentLoader;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar ComponentLoaderFactory = /*#__PURE__*/function () {\n  /**\n   * @param {?} _componentFactoryResolver\n   * @param {?} _ngZone\n   * @param {?} _injector\n   * @param {?} _posService\n   * @param {?} _applicationRef\n   */\n  function ComponentLoaderFactory(_componentFactoryResolver, _ngZone, _injector, _posService, _applicationRef) {\n    _classCallCheck(this, ComponentLoaderFactory);\n\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this._posService = _posService;\n    this._applicationRef = _applicationRef;\n  }\n  /**\n   *\n   * @template T\n   * @param {?} _elementRef\n   * @param {?} _viewContainerRef\n   * @param {?} _renderer\n   * @return {?}\n   */\n\n\n  _createClass(ComponentLoaderFactory, [{\n    key: \"createLoader\",\n    value: function createLoader(_elementRef, _viewContainerRef, _renderer) {\n      return new ComponentLoader(_viewContainerRef, _renderer, _elementRef, this._injector, this._componentFactoryResolver, this._ngZone, this._applicationRef, this._posService);\n    }\n  }]);\n\n  return ComponentLoaderFactory;\n}();\n\nComponentLoaderFactory.ɵfac = function ComponentLoaderFactory_Factory(t) {\n  return new (t || ComponentLoaderFactory)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.PositioningService), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef));\n};\n\nComponentLoaderFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ComponentLoaderFactory,\n  factory: ComponentLoaderFactory.ɵfac\n});\n/** @nocollapse */\n\nComponentLoaderFactory.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: NgZone\n  }, {\n    type: Injector\n  }, {\n    type: PositioningService\n  }, {\n    type: ApplicationRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ComponentLoaderFactory, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc1.PositioningService\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { BsComponentRef, ComponentLoader, ComponentLoaderFactory, ContentRef }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJvb3RzdHJhcC1jb21wb25lbnQtbG9hZGVyLmpzIiwic291cmNlcyI6WyJuZ3gtYm9vdHN0cmFwL2NvbXBvbmVudC1sb2FkZXIvYnMtY29tcG9uZW50LXJlZi5jbGFzcy50cyIsIm5neC1ib290c3RyYXAvY29tcG9uZW50LWxvYWRlci9jb250ZW50LXJlZi5jbGFzcy50cyIsIm5neC1ib290c3RyYXAvY29tcG9uZW50LWxvYWRlci9jb21wb25lbnQtbG9hZGVyLmNsYXNzLnRzIiwibmd4LWJvb3RzdHJhcC9jb21wb25lbnQtbG9hZGVyL2NvbXBvbmVudC1sb2FkZXIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBLHdCQUdDOztBQUhEO0FBQXVCLENBR3RCO0FBQ0Q7QUFBQztBQUFJOzRCQ0NMLDVCRER1QztBQUF5QztBQUFJO0FBQUk7QUFBNkI7QUFBd0M7QUNDN0o7QUFBbUI7Q0FPakIsREFORDtBQUF3QjtBQUNkO0FBRUw7UUFLRixLQUFZLEVBQ1osT0FBaUIsdEJBTlAsSUFHWjtBQUNvQztZQUlsQyxZQUFnQyxZQUVoQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyx2REFKSCxJQURoQixLQUFZLEVBQ1osT0FBaUI7S0FLakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FDdkIsSUFBSSxDQUFDLDFDQUw4QjtXQUtsQixHQUFHLGRBSHRCLElBREUsWUFBZ0M7TUFJQSxDQUFDLE1BQ2xDLEVBQ0YsZkFMRSxRQUNDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7d0NDbEIzQix4Q0RtQkEsUUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNyQyxLQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQUM7UUNPRCxSRFBLO0FBQWtDO0FBQXlDO0FDdEJoRjtBQUFJO0FBQ007QUE0QlY7QUFBd0I7QUFBUTtB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QUFTLEVBQ2QsSUFBSSxDQUFDLHlCQUF5QixFQUM5QixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUMscExBVm9DLFFBQ3RDLE9BQU8sSUFBSSxlQUFlLENBQ3hCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLHlCQUF5QixFQUM5QixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7S0FDSCxMQUFILEtBQUc7QUFDSDtrREE1QkMsVUFBVSxxRkFOTyx3QkFBd0IsaUJBQ3hDLE1BQU0saUJBRDRELFFBQVEsaUJBSW5FLGtCQUFrQixpQkFKekIsY0FBYyx6T0FNZixVQUFVO2tJQUNUO0FBQUM7QUFBbUI7QUFDVSxZQVJkLHdCQUF3QjtBQUFLLFlBQzdDLE1BQU07QUFBSyxZQUR1RCxRQUFRO0FBQ3pFLFlBR00sa0JBQWtCO0FBQUssWUFKOUIsY0FBYztBQUFLOzs7bU5BQUU7QUFBQztBQUFDO0FBQUk7QUFBa0M7QUFDckM7QUFBSTtBQUFDO0FBQUk7QUFFNUI7QUFBeUM7QUFBSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIEJzQ29tcG9uZW50UmVmPFQ+IHtcbiAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFQ+O1xuICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmO1xufVxuIiwiLyoqXG4gKiBAY29weXJpZ2h0IFZhbG9yIFNvZnR3YXJlXG4gKiBAY29weXJpZ2h0IEFuZ3VsYXIgbmctYm9vdHN0cmFwIHRlYW1cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIFZpZXdSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIENvbnRlbnRSZWYge1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSAqL1xuICBub2RlczogYW55W107XG4gIHZpZXdSZWY/OiBWaWV3UmVmO1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSAqL1xuICBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8YW55PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSAqL1xuICAgIG5vZGVzOiBhbnlbXSxcbiAgICB2aWV3UmVmPzogVmlld1JlZixcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSAqL1xuICAgIGNvbXBvbmVudFJlZj86IENvbXBvbmVudFJlZjxhbnk+XG4gICkge1xuICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB0aGlzLnZpZXdSZWYgPSB2aWV3UmVmO1xuICAgIHRoaXMuY29tcG9uZW50UmVmID0gY29tcG9uZW50UmVmO1xuICB9XG59XG4iLCIvLyB0c2xpbnQ6ZGlzYWJsZTptYXgtZmlsZS1saW5lLWNvdW50XG4vLyB0b2RvOiBhZGQgZGVsYXkgc3VwcG9ydFxuLy8gdG9kbzogbWVyZ2UgZXZlbnRzIG9uU2hvdywgb25TaG93biwgZXRjLi4uXG4vLyB0b2RvOiBhZGQgZ2xvYmFsIHBvc2l0aW9uaW5nIGNvbmZpZ3VyYXRpb24/XG5pbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIEVsZW1lbnRSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3RvcixcbiAgTmdab25lLFxuICBSZW5kZXJlcjIsXG4gIFN0YXRpY1Byb3ZpZGVyLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9zaXRpb25pbmdPcHRpb25zLCBQb3NpdGlvbmluZ1NlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Bvc2l0aW9uaW5nJztcblxuaW1wb3J0IHtcbiAgbGlzdGVuVG9UcmlnZ2Vyc1YyLFxuICByZWdpc3RlckVzY0NsaWNrLFxuICByZWdpc3Rlck91dHNpZGVDbGlja1xufSBmcm9tICduZ3gtYm9vdHN0cmFwL3V0aWxzJztcblxuaW1wb3J0IHsgQ29udGVudFJlZiB9IGZyb20gJy4vY29udGVudC1yZWYuY2xhc3MnO1xuaW1wb3J0IHsgTGlzdGVuT3B0aW9ucyB9IGZyb20gJy4vbGlzdGVuLW9wdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRMb2FkZXI8VD4ge1xuICBvbkJlZm9yZVNob3c6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1hbnkqL1xuICBvblNob3duOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1hbnkqL1xuICBvbkJlZm9yZUhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBvbkhpZGRlbjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGluc3RhbmNlOiBUO1xuICBfY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VD47XG4gIF9pbmxpbmVWaWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8VD47XG5cbiAgcHJpdmF0ZSBfcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW107XG4gIHByaXZhdGUgX2NvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8VD47XG4gIHByaXZhdGUgX3pvbmVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBfY29udGVudFJlZjogQ29udGVudFJlZjtcbiAgcHJpdmF0ZSBfaW5uZXJDb21wb25lbnQ6IENvbXBvbmVudFJlZjxUPjtcblxuICBwcml2YXRlIF91bnJlZ2lzdGVyTGlzdGVuZXJzRm46IEZ1bmN0aW9uO1xuXG4gIGdldCBpc1Nob3duKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLl9pc0hpZGluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIXRoaXMuX2NvbXBvbmVudFJlZjtcbiAgfVxuXG4gIHByaXZhdGUgX2lzSGlkaW5nID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFBsYWNlbWVudCBvZiBhIGNvbXBvbmVudC4gQWNjZXB0czogXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIlxuICAgKi9cbiAgcHJpdmF0ZSBhdHRhY2htZW50OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCB0aGUgcG9wb3ZlciBzaG91bGQgYmUgYXBwZW5kZWQgdG8uXG4gICAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIFwiYm9keVwiLlxuICAgKi9cbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1hbnkqL1xuICBwcml2YXRlIGNvbnRhaW5lcjogc3RyaW5nIHwgRWxlbWVudFJlZiB8IGFueTtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGV2ZW50cyB0aGF0IHNob3VsZCB0cmlnZ2VyLiBTdXBwb3J0cyBhIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mXG4gICAqIGV2ZW50IG5hbWVzLlxuICAgKi9cbiAgcHJpdmF0ZSB0cmlnZ2Vyczogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2xpc3Rlbk9wdHM6IExpc3Rlbk9wdGlvbnMgPSB7fTtcbiAgcHJpdmF0ZSBfZ2xvYmFsTGlzdGVuZXIgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIERvIG5vdCB1c2UgdGhpcyBkaXJlY3RseSwgaXQgc2hvdWxkIGJlIGluc3RhbmNlZCB2aWFcbiAgICogYENvbXBvbmVudExvYWRGYWN0b3J5LmF0dGFjaGBcbiAgICogQGludGVybmFsXG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSxcbiAgICBwcml2YXRlIF9hcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBfcG9zU2VydmljZTogUG9zaXRpb25pbmdTZXJ2aWNlXG4gICkge31cblxuICBhdHRhY2goY29tcFR5cGU6IFR5cGU8VD4pOiBDb21wb25lbnRMb2FkZXI8VD4ge1xuICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnkgPSB0aGlzLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgIC5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeTxUPihjb21wVHlwZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRvZG86IGFkZCBiZWhhdmlvdXI6IHRvIHRhcmdldCBlbGVtZW50LCBgYm9keWAsIGN1c3RvbSBlbGVtZW50XG4gIHRvKGNvbnRhaW5lcj86IHN0cmluZyB8IEVsZW1lbnRSZWYpOiBDb21wb25lbnRMb2FkZXI8VD4ge1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyIHx8IHRoaXMuY29udGFpbmVyO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwb3NpdGlvbihvcHRzPzogUG9zaXRpb25pbmdPcHRpb25zKTogQ29tcG9uZW50TG9hZGVyPFQ+IHtcbiAgICB0aGlzLmF0dGFjaG1lbnQgPSBvcHRzLmF0dGFjaG1lbnQgfHwgdGhpcy5hdHRhY2htZW50O1xuICAgIHRoaXMuX2VsZW1lbnRSZWYgPSAob3B0cy50YXJnZXQgYXMgRWxlbWVudFJlZikgfHwgdGhpcy5fZWxlbWVudFJlZjtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJvdmlkZShwcm92aWRlcjogU3RhdGljUHJvdmlkZXIpOiBDb21wb25lbnRMb2FkZXI8VD4ge1xuICAgIHRoaXMuX3Byb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdG9kbzogYXBwZW5kQ2hpbGQgdG8gZWxlbWVudCBvciBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuY29udGFpbmVyKVxuXG4gIHNob3cob3B0czoge1xuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55Ki9cbiAgICBjb250ZW50Pzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSovXG4gICAgY29udGV4dD86IGFueTtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSovXG4gICAgaW5pdGlhbFN0YXRlPzogYW55O1xuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55Ki9cbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH0gPSB7fVxuICApOiBDb21wb25lbnRSZWY8VD4ge1xuXG4gICAgdGhpcy5fc3Vic2NyaWJlUG9zaXRpb25pbmcoKTtcbiAgICB0aGlzLl9pbm5lckNvbXBvbmVudCA9IG51bGw7XG5cbiAgICBpZiAoIXRoaXMuX2NvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5vbkJlZm9yZVNob3cuZW1pdCgpO1xuICAgICAgdGhpcy5fY29udGVudFJlZiA9IHRoaXMuX2dldENvbnRlbnRSZWYob3B0cy5jb250ZW50LCBvcHRzLmNvbnRleHQsIG9wdHMuaW5pdGlhbFN0YXRlKTtcblxuICAgICAgY29uc3QgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwcm92aWRlcnM6IHRoaXMuX3Byb3ZpZGVycyxcbiAgICAgICAgcGFyZW50OiB0aGlzLl9pbmplY3RvclxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2NvbXBvbmVudFJlZiA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuY3JlYXRlKGluamVjdG9yLCB0aGlzLl9jb250ZW50UmVmLm5vZGVzKTtcbiAgICAgIHRoaXMuX2FwcGxpY2F0aW9uUmVmLmF0dGFjaFZpZXcodGhpcy5fY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgIC8vIHRoaXMuX2NvbXBvbmVudFJlZiA9IHRoaXMuX3ZpZXdDb250YWluZXJSZWZcbiAgICAgIC8vICAgLmNyZWF0ZUNvbXBvbmVudCh0aGlzLl9jb21wb25lbnRGYWN0b3J5LCAwLCBpbmplY3RvciwgdGhpcy5fY29udGVudFJlZi5ub2Rlcyk7XG4gICAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5fY29tcG9uZW50UmVmLmluc3RhbmNlO1xuXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2NvbXBvbmVudFJlZi5pbnN0YW5jZSwgb3B0cyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRhaW5lciBpbnN0YW5jZW9mIEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChcbiAgICAgICAgICB0aGlzLl9jb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb250YWluZXIgPT09ICdib2R5JyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5jb250YWluZXIgYXMgc3RyaW5nKVxuICAgICAgICAgIC5hcHBlbmRDaGlsZCh0aGlzLl9jb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMuY29udGFpbmVyICYmXG4gICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgJiZcbiAgICAgICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChcbiAgICAgICAgICB0aGlzLl9jb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGludm9rZSBjaGFuZ2UgZGV0ZWN0aW9uIHNpbmNlIGV2ZW50cyByZWdpc3RlcmVkXG4gICAgICAvLyB2aWFcbiAgICAgIC8vIFJlbmRlcmVyOjpsaXN0ZW4oKSBhcmUgbm90IHBpY2tlZCB1cCBieSBjaGFuZ2UgZGV0ZWN0aW9uIHdpdGggdGhlXG4gICAgICAvLyBPblB1c2ggc3RyYXRlZ3lcbiAgICAgIGlmICh0aGlzLl9jb250ZW50UmVmLmNvbXBvbmVudFJlZikge1xuICAgICAgICB0aGlzLl9pbm5lckNvbXBvbmVudCA9IHRoaXMuX2NvbnRlbnRSZWYuY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgICAgICB0aGlzLl9jb250ZW50UmVmLmNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgdGhpcy5fY29udGVudFJlZi5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgdGhpcy5fY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIHRoaXMub25TaG93bi5lbWl0KHRoaXMuX2NvbXBvbmVudFJlZi5pbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVnaXN0ZXJPdXRzaWRlQ2xpY2soKTtcblxuICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRSZWY7XG4gIH1cblxuICBoaWRlKCk6IENvbXBvbmVudExvYWRlcjxUPiB7XG4gICAgaWYgKCF0aGlzLl9jb21wb25lbnRSZWYpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuX3Bvc1NlcnZpY2UuZGVsZXRlUG9zaXRpb25FbGVtZW50KHRoaXMuX2NvbXBvbmVudFJlZi5sb2NhdGlvbik7XG5cbiAgICB0aGlzLm9uQmVmb3JlSGlkZS5lbWl0KHRoaXMuX2NvbXBvbmVudFJlZi5pbnN0YW5jZSk7XG5cbiAgICBjb25zdCBjb21wb25lbnRFbCA9IHRoaXMuX2NvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xuICAgIGNvbXBvbmVudEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29tcG9uZW50RWwpO1xuICAgIGlmICh0aGlzLl9jb250ZW50UmVmLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5fY29udGVudFJlZi5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLl9jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgIGlmICh0aGlzLl92aWV3Q29udGFpbmVyUmVmICYmIHRoaXMuX2NvbnRlbnRSZWYudmlld1JlZikge1xuICAgICAgdGhpcy5fdmlld0NvbnRhaW5lclJlZi5yZW1vdmUoXG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYuaW5kZXhPZih0aGlzLl9jb250ZW50UmVmLnZpZXdSZWYpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY29udGVudFJlZi52aWV3UmVmKSB7XG4gICAgICB0aGlzLl9jb250ZW50UmVmLnZpZXdSZWYuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbnRlbnRSZWYgPSBudWxsO1xuICAgIHRoaXMuX2NvbXBvbmVudFJlZiA9IG51bGw7XG4gICAgdGhpcy5fcmVtb3ZlR2xvYmFsTGlzdGVuZXIoKTtcblxuICAgIHRoaXMub25IaWRkZW4uZW1pdCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0b2dnbGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy5oaWRlKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNob3coKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdW5zdWJzY3JpYmVQb3NpdGlvbmluZygpO1xuXG4gICAgaWYgKHRoaXMuX3VucmVnaXN0ZXJMaXN0ZW5lcnNGbikge1xuICAgICAgdGhpcy5fdW5yZWdpc3Rlckxpc3RlbmVyc0ZuKCk7XG4gICAgfVxuICB9XG5cbiAgbGlzdGVuKGxpc3Rlbk9wdHM6IExpc3Rlbk9wdGlvbnMpOiBDb21wb25lbnRMb2FkZXI8VD4ge1xuICAgIHRoaXMudHJpZ2dlcnMgPSBsaXN0ZW5PcHRzLnRyaWdnZXJzIHx8IHRoaXMudHJpZ2dlcnM7XG4gICAgdGhpcy5fbGlzdGVuT3B0cy5vdXRzaWRlQ2xpY2sgPSBsaXN0ZW5PcHRzLm91dHNpZGVDbGljaztcbiAgICB0aGlzLl9saXN0ZW5PcHRzLm91dHNpZGVFc2MgPSBsaXN0ZW5PcHRzLm91dHNpZGVFc2M7XG4gICAgbGlzdGVuT3B0cy50YXJnZXQgPSBsaXN0ZW5PcHRzLnRhcmdldCB8fCB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBjb25zdCBoaWRlID0gKHRoaXMuX2xpc3Rlbk9wdHMuaGlkZSA9ICgpID0+XG4gICAgICBsaXN0ZW5PcHRzLmhpZGUgPyBsaXN0ZW5PcHRzLmhpZGUoKSA6IHZvaWQgdGhpcy5oaWRlKCkpO1xuICAgIGNvbnN0IHNob3cgPSAodGhpcy5fbGlzdGVuT3B0cy5zaG93ID0gKHJlZ2lzdGVySGlkZTogRnVuY3Rpb24pID0+IHtcbiAgICAgIGxpc3Rlbk9wdHMuc2hvdyA/IGxpc3Rlbk9wdHMuc2hvdyhyZWdpc3RlckhpZGUpIDogdGhpcy5zaG93KHJlZ2lzdGVySGlkZSk7XG4gICAgICByZWdpc3RlckhpZGUoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRvZ2dsZSA9IChyZWdpc3RlckhpZGU6IEZ1bmN0aW9uKSA9PiB7XG4gICAgICB0aGlzLmlzU2hvd24gPyBoaWRlKCkgOiBzaG93KHJlZ2lzdGVySGlkZSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3VucmVnaXN0ZXJMaXN0ZW5lcnNGbiA9IGxpc3RlblRvVHJpZ2dlcnNWMih0aGlzLl9yZW5kZXJlciwge1xuICAgICAgdGFyZ2V0OiBsaXN0ZW5PcHRzLnRhcmdldCxcbiAgICAgIHRyaWdnZXJzOiBsaXN0ZW5PcHRzLnRyaWdnZXJzLFxuICAgICAgc2hvdyxcbiAgICAgIGhpZGUsXG4gICAgICB0b2dnbGVcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgX3JlbW92ZUdsb2JhbExpc3RlbmVyKCkge1xuICAgIGlmICh0aGlzLl9nbG9iYWxMaXN0ZW5lcikge1xuICAgICAgdGhpcy5fZ2xvYmFsTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuX2dsb2JhbExpc3RlbmVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhdHRhY2hJbmxpbmUoXG4gICAgdlJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueSovXG4gICAgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT5cbiAgKTogQ29tcG9uZW50TG9hZGVyPFQ+IHtcbiAgICB0aGlzLl9pbmxpbmVWaWV3UmVmID0gdlJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBfcmVnaXN0ZXJPdXRzaWRlQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9jb21wb25lbnRSZWYgfHwgIXRoaXMuX2NvbXBvbmVudFJlZi5sb2NhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB3aHk6IHNob3VsZCBydW4gYWZ0ZXIgZmlyc3QgZXZlbnQgYnViYmxlXG4gICAgaWYgKHRoaXMuX2xpc3Rlbk9wdHMub3V0c2lkZUNsaWNrKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLl9jb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9nbG9iYWxMaXN0ZW5lciA9IHJlZ2lzdGVyT3V0c2lkZUNsaWNrKHRoaXMuX3JlbmRlcmVyLCB7XG4gICAgICAgICAgdGFyZ2V0czogW3RhcmdldCwgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50XSxcbiAgICAgICAgICBvdXRzaWRlQ2xpY2s6IHRoaXMuX2xpc3Rlbk9wdHMub3V0c2lkZUNsaWNrLFxuICAgICAgICAgIGhpZGU6ICgpID0+IHRoaXMuX2xpc3Rlbk9wdHMuaGlkZSgpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saXN0ZW5PcHRzLm91dHNpZGVFc2MpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2NvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xuICAgICAgdGhpcy5fZ2xvYmFsTGlzdGVuZXIgPSByZWdpc3RlckVzY0NsaWNrKHRoaXMuX3JlbmRlcmVyLCB7XG4gICAgICAgIHRhcmdldHM6IFt0YXJnZXQsIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudF0sXG4gICAgICAgIG91dHNpZGVFc2M6IHRoaXMuX2xpc3Rlbk9wdHMub3V0c2lkZUVzYyxcbiAgICAgICAgaGlkZTogKCkgPT4gdGhpcy5fbGlzdGVuT3B0cy5oaWRlKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldElubmVyQ29tcG9uZW50KCk6IENvbXBvbmVudFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyQ29tcG9uZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBfc3Vic2NyaWJlUG9zaXRpb25pbmcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3pvbmVTdWJzY3JpcHRpb24gfHwgIXRoaXMuYXR0YWNobWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3pvbmVTdWJzY3JpcHRpb24gPSB0aGlzLl9uZ1pvbmUub25TdGFibGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fY29tcG9uZW50UmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Bvc1NlcnZpY2UucG9zaXRpb24oe1xuICAgICAgICBlbGVtZW50OiB0aGlzLl9jb21wb25lbnRSZWYubG9jYXRpb24sXG4gICAgICAgIHRhcmdldDogdGhpcy5fZWxlbWVudFJlZixcbiAgICAgICAgYXR0YWNobWVudDogdGhpcy5hdHRhY2htZW50LFxuICAgICAgICBhcHBlbmRUb0JvZHk6IHRoaXMuY29udGFpbmVyID09PSAnYm9keSdcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfdW5zdWJzY3JpYmVQb3NpdGlvbmluZygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3pvbmVTdWJzY3JpcHRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl96b25lU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5fem9uZVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9nZXRDb250ZW50UmVmKFxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55Ki9cbiAgICBjb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHwgYW55LFxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55Ki9cbiAgICBjb250ZXh0PzogYW55LFxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55Ki9cbiAgICBpbml0aWFsU3RhdGU/OiBhbnlcbiAgKTogQ29udGVudFJlZiB7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm4gbmV3IENvbnRlbnRSZWYoW10pO1xuICAgIH1cblxuICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIGlmICh0aGlzLl92aWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIGNvbnN0IF92aWV3UmVmID0gdGhpcy5fdmlld0NvbnRhaW5lclJlZlxuICAgICAgICAgIC5jcmVhdGVFbWJlZGRlZFZpZXc8VGVtcGxhdGVSZWY8VD4+KGNvbnRlbnQsIGNvbnRleHQpO1xuICAgICAgICBfdmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcblxuICAgICAgICByZXR1cm4gbmV3IENvbnRlbnRSZWYoW192aWV3UmVmLnJvb3ROb2Rlc10sIF92aWV3UmVmKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZpZXdSZWYgPSBjb250ZW50LmNyZWF0ZUVtYmVkZGVkVmlldyh7fSk7XG4gICAgICB0aGlzLl9hcHBsaWNhdGlvblJlZi5hdHRhY2hWaWV3KHZpZXdSZWYpO1xuXG4gICAgICByZXR1cm4gbmV3IENvbnRlbnRSZWYoW3ZpZXdSZWYucm9vdE5vZGVzXSwgdmlld1JlZik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250ZW50Q21wdEZhY3RvcnkgPSB0aGlzLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXG4gICAgICAgIGNvbnRlbnRcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG1vZGFsQ29udGVudEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgcHJvdmlkZXJzOiB0aGlzLl9wcm92aWRlcnMsXG4gICAgICAgIHBhcmVudDogdGhpcy5faW5qZWN0b3JcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb21wb25lbnRSZWYgPSBjb250ZW50Q21wdEZhY3RvcnkuY3JlYXRlKG1vZGFsQ29udGVudEluamVjdG9yKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oY29tcG9uZW50UmVmLmluc3RhbmNlLCBpbml0aWFsU3RhdGUpO1xuICAgICAgdGhpcy5fYXBwbGljYXRpb25SZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXG4gICAgICByZXR1cm4gbmV3IENvbnRlbnRSZWYoXG4gICAgICAgIFtbY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnRdXSxcbiAgICAgICAgY29tcG9uZW50UmVmLmhvc3RWaWV3LFxuICAgICAgICBjb21wb25lbnRSZWZcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb250ZW50UmVmKFtbdGhpcy5fcmVuZGVyZXIuY3JlYXRlVGV4dChgJHtjb250ZW50fWApXV0pO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBJbmplY3RhYmxlLCBJbmplY3RvcixcbiAgTmdab25lLCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnRMb2FkZXIgfSBmcm9tICcuL2NvbXBvbmVudC1sb2FkZXIuY2xhc3MnO1xuaW1wb3J0IHsgUG9zaXRpb25pbmdTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3NpdGlvbmluZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRMb2FkZXJGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX25nWm9uZTogTmdab25lLFxuICAgICAgICAgICAgICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IsXG4gICAgICAgICAgICAgIHByaXZhdGUgX3Bvc1NlcnZpY2U6IFBvc2l0aW9uaW5nU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfYXBwbGljYXRpb25SZWY6IEFwcGxpY2F0aW9uUmVmKSB7fVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gX2VsZW1lbnRSZWZcbiAgICogQHBhcmFtIF92aWV3Q29udGFpbmVyUmVmXG4gICAqIEBwYXJhbSBfcmVuZGVyZXJcbiAgICovXG4gIGNyZWF0ZUxvYWRlcjxUPihfZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICAgIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICAgICAgX3JlbmRlcmVyOiBSZW5kZXJlcjIpOiBDb21wb25lbnRMb2FkZXI8VD4ge1xuICAgIHJldHVybiBuZXcgQ29tcG9uZW50TG9hZGVyPFQ+KFxuICAgICAgX3ZpZXdDb250YWluZXJSZWYsXG4gICAgICBfcmVuZGVyZXIsXG4gICAgICBfZWxlbWVudFJlZixcbiAgICAgIHRoaXMuX2luamVjdG9yLFxuICAgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgdGhpcy5fbmdab25lLFxuICAgICAgdGhpcy5fYXBwbGljYXRpb25SZWYsXG4gICAgICB0aGlzLl9wb3NTZXJ2aWNlXG4gICAgKTtcbiAgfVxufVxuIl19","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ngx-bootstrap/__ivy_ngcc__/component-loader/fesm2015/ngx-bootstrap-component-loader.js"],"names":["ElementRef","EventEmitter","Injector","TemplateRef","ApplicationRef","ComponentFactoryResolver","Injectable","NgZone","listenToTriggersV2","registerEscClick","registerOutsideClick","PositioningService","ɵngcc0","ɵngcc1","BsComponentRef","ContentRef","nodes","viewRef","componentRef","ComponentLoader","_viewContainerRef","_renderer","_elementRef","_injector","_componentFactoryResolver","_ngZone","_applicationRef","_posService","onBeforeShow","onShown","onBeforeHide","onHidden","_providers","_isHiding","_listenOpts","_globalListener","Function","prototype","_componentRef","compType","_componentFactory","resolveComponentFactory","container","opts","attachment","target","provider","push","_subscribePositioning","_innerComponent","emit","_contentRef","_getContentRef","content","context","initialState","injector","create","providers","parent","attachView","hostView","instance","Object","assign","nativeElement","appendChild","location","document","querySelector","parentElement","changeDetectorRef","markForCheck","detectChanges","_registerOutsideClick","deletePositionElement","componentEl","parentNode","removeChild","destroy","remove","indexOf","_removeGlobalListener","isShown","hide","show","_unsubscribePositioning","_unregisterListenersFn","listenOpts","triggers","outsideClick","outsideEsc","registerHide","toggle","vRef","template","_inlineViewRef","createEmbeddedView","setTimeout","targets","_zoneSubscription","onStable","subscribe","position","element","appendToBody","unsubscribe","_viewRef","rootNodes","contentCmptFactory","modalContentInjector","createText","ComponentLoaderFactory","ɵfac","ComponentLoaderFactory_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","ngDevMode","ɵsetClassMetadata"],"mappings":"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","sourcesContent":["import { ElementRef, EventEmitter, Injector, TemplateRef, ApplicationRef, ComponentFactoryResolver, Injectable, NgZone } from '@angular/core';\nimport { listenToTriggersV2, registerEscClick, registerOutsideClick } from 'ngx-bootstrap/utils';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/positioning';\nclass BsComponentRef {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\nclass ContentRef {\n    /**\n     * @param {?} nodes\n     * @param {?=} viewRef\n     * @param {?=} componentRef\n     */\n    constructor(/* tslint:disable-next-line: no-any */\n    /* tslint:disable-next-line: no-any */\n    nodes, viewRef, /* tslint:disable-next-line: no-any */\n    /* tslint:disable-next-line: no-any */\n    componentRef) {\n        this.nodes = nodes;\n        this.viewRef = viewRef;\n        this.componentRef = componentRef;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n */\nclass ComponentLoader {\n    /**\n     * Do not use this directly, it should be instanced via\n     * `ComponentLoadFactory.attach`\n     * \\@internal\n     * @param {?} _viewContainerRef\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _injector\n     * @param {?} _componentFactoryResolver\n     * @param {?} _ngZone\n     * @param {?} _applicationRef\n     * @param {?} _posService\n     */\n    constructor(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _applicationRef, _posService) {\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._injector = _injector;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._ngZone = _ngZone;\n        this._applicationRef = _applicationRef;\n        this._posService = _posService;\n        this.onBeforeShow = new EventEmitter();\n        /* tslint:disable-next-line: no-any*/\n        this.onShown = new EventEmitter();\n        /* tslint:disable-next-line: no-any*/\n        this.onBeforeHide = new EventEmitter();\n        this.onHidden = new EventEmitter();\n        this._providers = [];\n        this._isHiding = false;\n        this._listenOpts = {};\n        this._globalListener = Function.prototype;\n    }\n    /**\n     * @return {?}\n     */\n    get isShown() {\n        if (this._isHiding) {\n            return false;\n        }\n        return !!this._componentRef;\n    }\n    /**\n     * @param {?} compType\n     * @return {?}\n     */\n    attach(compType) {\n        this._componentFactory = this._componentFactoryResolver\n            .resolveComponentFactory(compType);\n        return this;\n    }\n    /**\n     * @param {?=} container\n     * @return {?}\n     */\n    to(container) {\n        this.container = container || this.container;\n        return this;\n    }\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    position(opts) {\n        this.attachment = opts.attachment || this.attachment;\n        this._elementRef = (/** @type {?} */ (opts.target)) || this._elementRef;\n        return this;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    provide(provider) {\n        this._providers.push(provider);\n        return this;\n    }\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    show(opts = {}) {\n        this._subscribePositioning();\n        this._innerComponent = null;\n        if (!this._componentRef) {\n            this.onBeforeShow.emit();\n            this._contentRef = this._getContentRef(opts.content, opts.context, opts.initialState);\n            const /** @type {?} */ injector = Injector.create({\n                providers: this._providers,\n                parent: this._injector\n            });\n            this._componentRef = this._componentFactory.create(injector, this._contentRef.nodes);\n            this._applicationRef.attachView(this._componentRef.hostView);\n            // this._componentRef = this._viewContainerRef\n            //   .createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);\n            this.instance = this._componentRef.instance;\n            Object.assign(this._componentRef.instance, opts);\n            if (this.container instanceof ElementRef) {\n                this.container.nativeElement.appendChild(this._componentRef.location.nativeElement);\n            }\n            if (this.container === 'body' && typeof document !== 'undefined') {\n                document\n                    .querySelector(/** @type {?} */ (this.container))\n                    .appendChild(this._componentRef.location.nativeElement);\n            }\n            if (!this.container &&\n                this._elementRef &&\n                this._elementRef.nativeElement.parentElement) {\n                this._elementRef.nativeElement.parentElement.appendChild(this._componentRef.location.nativeElement);\n            }\n            // we need to manually invoke change detection since events registered\n            // via\n            // Renderer::listen() are not picked up by change detection with the\n            // OnPush strategy\n            if (this._contentRef.componentRef) {\n                this._innerComponent = this._contentRef.componentRef.instance;\n                this._contentRef.componentRef.changeDetectorRef.markForCheck();\n                this._contentRef.componentRef.changeDetectorRef.detectChanges();\n            }\n            this._componentRef.changeDetectorRef.markForCheck();\n            this._componentRef.changeDetectorRef.detectChanges();\n            this.onShown.emit(this._componentRef.instance);\n        }\n        this._registerOutsideClick();\n        return this._componentRef;\n    }\n    /**\n     * @return {?}\n     */\n    hide() {\n        if (!this._componentRef) {\n            return this;\n        }\n        this._posService.deletePositionElement(this._componentRef.location);\n        this.onBeforeHide.emit(this._componentRef.instance);\n        const /** @type {?} */ componentEl = this._componentRef.location.nativeElement;\n        componentEl.parentNode.removeChild(componentEl);\n        if (this._contentRef.componentRef) {\n            this._contentRef.componentRef.destroy();\n        }\n        this._componentRef.destroy();\n        if (this._viewContainerRef && this._contentRef.viewRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n        }\n        if (this._contentRef.viewRef) {\n            this._contentRef.viewRef.destroy();\n        }\n        this._contentRef = null;\n        this._componentRef = null;\n        this._removeGlobalListener();\n        this.onHidden.emit();\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    toggle() {\n        if (this.isShown) {\n            this.hide();\n            return;\n        }\n        this.show();\n    }\n    /**\n     * @return {?}\n     */\n    dispose() {\n        if (this.isShown) {\n            this.hide();\n        }\n        this._unsubscribePositioning();\n        if (this._unregisterListenersFn) {\n            this._unregisterListenersFn();\n        }\n    }\n    /**\n     * @param {?} listenOpts\n     * @return {?}\n     */\n    listen(listenOpts) {\n        this.triggers = listenOpts.triggers || this.triggers;\n        this._listenOpts.outsideClick = listenOpts.outsideClick;\n        this._listenOpts.outsideEsc = listenOpts.outsideEsc;\n        listenOpts.target = listenOpts.target || this._elementRef.nativeElement;\n        const /** @type {?} */ hide = (this._listenOpts.hide = () => listenOpts.hide ? listenOpts.hide() : void this.hide());\n        const /** @type {?} */ show = (this._listenOpts.show = (registerHide) => {\n            listenOpts.show ? listenOpts.show(registerHide) : this.show(registerHide);\n            registerHide();\n        });\n        const /** @type {?} */ toggle = (registerHide) => {\n            this.isShown ? hide() : show(registerHide);\n        };\n        this._unregisterListenersFn = listenToTriggersV2(this._renderer, {\n            target: listenOpts.target,\n            triggers: listenOpts.triggers,\n            show,\n            hide,\n            toggle\n        });\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalListener) {\n            this._globalListener();\n            this._globalListener = null;\n        }\n    }\n    /**\n     * @param {?} vRef\n     * @param {?} template\n     * @return {?}\n     */\n    attachInline(vRef, /* tslint:disable-next-line: no-any*/\n    /* tslint:disable-next-line: no-any*/\n    template) {\n        this._inlineViewRef = vRef.createEmbeddedView(template);\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    _registerOutsideClick() {\n        if (!this._componentRef || !this._componentRef.location) {\n            return;\n        }\n        // why: should run after first event bubble\n        if (this._listenOpts.outsideClick) {\n            const /** @type {?} */ target = this._componentRef.location.nativeElement;\n            setTimeout(() => {\n                this._globalListener = registerOutsideClick(this._renderer, {\n                    targets: [target, this._elementRef.nativeElement],\n                    outsideClick: this._listenOpts.outsideClick,\n                    hide: () => this._listenOpts.hide()\n                });\n            });\n        }\n        if (this._listenOpts.outsideEsc) {\n            const /** @type {?} */ target = this._componentRef.location.nativeElement;\n            this._globalListener = registerEscClick(this._renderer, {\n                targets: [target, this._elementRef.nativeElement],\n                outsideEsc: this._listenOpts.outsideEsc,\n                hide: () => this._listenOpts.hide()\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getInnerComponent() {\n        return this._innerComponent;\n    }\n    /**\n     * @return {?}\n     */\n    _subscribePositioning() {\n        if (this._zoneSubscription || !this.attachment) {\n            return;\n        }\n        this._zoneSubscription = this._ngZone.onStable.subscribe(() => {\n            if (!this._componentRef) {\n                return;\n            }\n            this._posService.position({\n                element: this._componentRef.location,\n                target: this._elementRef,\n                attachment: this.attachment,\n                appendToBody: this.container === 'body'\n            });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _unsubscribePositioning() {\n        if (!this._zoneSubscription) {\n            return;\n        }\n        this._zoneSubscription.unsubscribe();\n        this._zoneSubscription = null;\n    }\n    /**\n     * @param {?} content\n     * @param {?=} context\n     * @param {?=} initialState\n     * @return {?}\n     */\n    _getContentRef(/* tslint:disable-next-line: no-any*/\n    /* tslint:disable-next-line: no-any*/\n    content, /* tslint:disable-next-line: no-any*/\n    /* tslint:disable-next-line: no-any*/\n    context, /* tslint:disable-next-line: no-any*/\n    /* tslint:disable-next-line: no-any*/\n    initialState) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        if (content instanceof TemplateRef) {\n            if (this._viewContainerRef) {\n                const /** @type {?} */ _viewRef = this._viewContainerRef\n                    .createEmbeddedView(content, context);\n                _viewRef.markForCheck();\n                return new ContentRef([_viewRef.rootNodes], _viewRef);\n            }\n            const /** @type {?} */ viewRef = content.createEmbeddedView({});\n            this._applicationRef.attachView(viewRef);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        }\n        if (typeof content === 'function') {\n            const /** @type {?} */ contentCmptFactory = this._componentFactoryResolver.resolveComponentFactory(content);\n            const /** @type {?} */ modalContentInjector = Injector.create({\n                providers: this._providers,\n                parent: this._injector\n            });\n            const /** @type {?} */ componentRef = contentCmptFactory.create(modalContentInjector);\n            Object.assign(componentRef.instance, initialState);\n            this._applicationRef.attachView(componentRef.hostView);\n            return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\n        }\n        return new ContentRef([[this._renderer.createText(`${content}`)]]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ComponentLoaderFactory {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _ngZone\n     * @param {?} _injector\n     * @param {?} _posService\n     * @param {?} _applicationRef\n     */\n    constructor(_componentFactoryResolver, _ngZone, _injector, _posService, _applicationRef) {\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._ngZone = _ngZone;\n        this._injector = _injector;\n        this._posService = _posService;\n        this._applicationRef = _applicationRef;\n    }\n    /**\n     *\n     * @template T\n     * @param {?} _elementRef\n     * @param {?} _viewContainerRef\n     * @param {?} _renderer\n     * @return {?}\n     */\n    createLoader(_elementRef, _viewContainerRef, _renderer) {\n        return new ComponentLoader(_viewContainerRef, _renderer, _elementRef, this._injector, this._componentFactoryResolver, this._ngZone, this._applicationRef, this._posService);\n    }\n}\nComponentLoaderFactory.ɵfac = function ComponentLoaderFactory_Factory(t) { return new (t || ComponentLoaderFactory)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.PositioningService), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef)); };\nComponentLoaderFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ComponentLoaderFactory, factory: ComponentLoaderFactory.ɵfac });\n/** @nocollapse */\nComponentLoaderFactory.ctorParameters = () => [\n    { type: ComponentFactoryResolver, },\n    { type: NgZone, },\n    { type: Injector, },\n    { type: PositioningService, },\n    { type: ApplicationRef, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ComponentLoaderFactory, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ɵngcc1.PositioningService }, { type: ɵngcc0.ApplicationRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { BsComponentRef, ComponentLoader, ComponentLoaderFactory, ContentRef };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"metadata":{},"sourceType":"module"}