{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\nvar CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nvar InputManager = /*#__PURE__*/function () {\n  function InputManager(htmlInputElement) {\n    _classCallCheck(this, InputManager);\n\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  _createClass(InputManager, [{\n    key: \"setCursorAt\",\n    value: function setCursorAt(position) {\n      if (this.htmlInputElement.setSelectionRange) {\n        this.htmlInputElement.focus();\n        this.htmlInputElement.setSelectionRange(position, position);\n      } else if (this.htmlInputElement.createTextRange) {\n        var textRange = this.htmlInputElement.createTextRange();\n        textRange.collapse(true);\n        textRange.moveEnd(\"character\", position);\n        textRange.moveStart(\"character\", position);\n        textRange.select();\n      }\n    }\n  }, {\n    key: \"updateValueAndCursor\",\n    value: function updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n      this.rawValue = newRawValue;\n      var newLength = newRawValue.length;\n      selectionStart = selectionStart - (oldLength - newLength);\n      this.setCursorAt(selectionStart);\n    }\n  }, {\n    key: \"canInputMoreNumbers\",\n    get: function get() {\n      var haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n      var selectionStart = this.inputSelection.selectionStart;\n      var selectionEnd = this.inputSelection.selectionEnd;\n      var haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n      var startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n      return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n  }, {\n    key: \"inputSelection\",\n    get: function get() {\n      var selectionStart = 0;\n      var selectionEnd = 0;\n\n      if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n        selectionStart = this.htmlInputElement.selectionStart;\n        selectionEnd = this.htmlInputElement.selectionEnd;\n      } else {\n        var range = document.getSelection().anchorNode;\n\n        if (range && range.firstChild == this.htmlInputElement) {\n          var lenght = this.htmlInputElement.value.length;\n          var normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n          var startRange = this.htmlInputElement.createTextRange();\n          var endRange = this.htmlInputElement.createTextRange();\n          endRange.collapse(false);\n\n          if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n            selectionStart = selectionEnd = lenght;\n          } else {\n            selectionStart = -startRange.moveStart(\"character\", -lenght);\n            selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n            if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n              selectionEnd = lenght;\n            } else {\n              selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n              selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n            }\n          }\n        }\n      }\n\n      return {\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      };\n    }\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      return this.htmlInputElement && this.htmlInputElement.value;\n    },\n    set: function set(value) {\n      this._storedRawValue = value;\n\n      if (this.htmlInputElement) {\n        this.htmlInputElement.value = value;\n      }\n    }\n  }, {\n    key: \"storedRawValue\",\n    get: function get() {\n      return this._storedRawValue;\n    }\n  }]);\n\n  return InputManager;\n}();\n\nvar InputService = /*#__PURE__*/function () {\n  function InputService(htmlInputElement, options) {\n    _classCallCheck(this, InputService);\n\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n\n  _createClass(InputService, [{\n    key: \"addNumber\",\n    value: function addNumber(keyCode) {\n      if (!this.rawValue) {\n        this.rawValue = this.applyMask(false, \"0\");\n      }\n\n      var keyChar = String.fromCharCode(keyCode);\n      var selectionStart = this.inputSelection.selectionStart;\n      var selectionEnd = this.inputSelection.selectionEnd;\n      this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n      this.updateFieldValue(selectionStart + 1);\n    }\n  }, {\n    key: \"applyMask\",\n    value: function applyMask(isNumber, rawValue) {\n      var _this$options = this.options,\n          allowNegative = _this$options.allowNegative,\n          decimal = _this$options.decimal,\n          precision = _this$options.precision,\n          prefix = _this$options.prefix,\n          suffix = _this$options.suffix,\n          thousands = _this$options.thousands;\n      rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n      var onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n      if (!onlyNumbers) {\n        return \"\";\n      }\n\n      var integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n      if (integerPart == \"\") {\n        integerPart = \"0\";\n      }\n\n      var newRawValue = integerPart;\n      var decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n      if (precision > 0) {\n        decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n        newRawValue += decimal + decimalPart;\n      }\n\n      var isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n      var operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n      return operator + prefix + newRawValue + suffix;\n    }\n  }, {\n    key: \"clearMask\",\n    value: function clearMask(rawValue) {\n      if (rawValue == null || rawValue == \"\") {\n        return null;\n      }\n\n      var value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n      if (this.options.thousands) {\n        value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n      }\n\n      if (this.options.decimal) {\n        value = value.replace(this.options.decimal, \".\");\n      }\n\n      return parseFloat(value);\n    }\n  }, {\n    key: \"changeToNegative\",\n    value: function changeToNegative() {\n      if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n        var selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = \"-\" + this.rawValue;\n        this.updateFieldValue(selectionStart + 1);\n      }\n    }\n  }, {\n    key: \"changeToPositive\",\n    value: function changeToPositive() {\n      var selectionStart = this.inputSelection.selectionStart;\n      this.rawValue = this.rawValue.replace(\"-\", \"\");\n      this.updateFieldValue(selectionStart - 1);\n    }\n  }, {\n    key: \"fixCursorPosition\",\n    value: function fixCursorPosition(forceToEndPosition) {\n      var currentCursorPosition = this.inputSelection.selectionStart; //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n\n      if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n        this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition()); //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n      } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n        this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n      }\n    }\n  }, {\n    key: \"getRawValueWithoutSuffixEndPosition\",\n    value: function getRawValueWithoutSuffixEndPosition() {\n      return this.rawValue.length - this.options.suffix.length;\n    }\n  }, {\n    key: \"getRawValueWithoutPrefixStartPosition\",\n    value: function getRawValueWithoutPrefixStartPosition() {\n      return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n  }, {\n    key: \"removeNumber\",\n    value: function removeNumber(keyCode) {\n      var _this$options2 = this.options,\n          decimal = _this$options2.decimal,\n          thousands = _this$options2.thousands;\n      var selectionEnd = this.inputSelection.selectionEnd;\n      var selectionStart = this.inputSelection.selectionStart;\n\n      if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n        selectionEnd = this.rawValue.length - this.options.suffix.length;\n        selectionStart = this.rawValue.length - this.options.suffix.length;\n      } //there is no selection\n\n\n      if (selectionEnd == selectionStart) {\n        //delete key and the target digit is a number\n        if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n          selectionEnd = selectionEnd + 1;\n        } //delete key and the target digit is the decimal or thousands divider\n\n\n        if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n          selectionEnd = selectionEnd + 2;\n          selectionStart = selectionStart + 1;\n        } //backspace key and the target digit is a number\n\n\n        if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n          selectionStart = selectionStart - 1;\n        } //backspace key and the target digit is the decimal or thousands divider\n\n\n        if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n          selectionStart = selectionStart - 2;\n          selectionEnd = selectionEnd - 1;\n        }\n      }\n\n      this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n      this.updateFieldValue(selectionStart);\n    }\n  }, {\n    key: \"updateFieldValue\",\n    value: function updateFieldValue(selectionStart) {\n      var newRawValue = this.applyMask(false, this.rawValue || \"\");\n      selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n      this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(options) {\n      var value = this.value;\n      this.options = options;\n      this.value = value;\n    }\n  }, {\n    key: \"canInputMoreNumbers\",\n    get: function get() {\n      return this.inputManager.canInputMoreNumbers;\n    }\n  }, {\n    key: \"inputSelection\",\n    get: function get() {\n      return this.inputManager.inputSelection;\n    }\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      return this.inputManager.rawValue;\n    },\n    set: function set(value) {\n      this.inputManager.rawValue = value;\n    }\n  }, {\n    key: \"storedRawValue\",\n    get: function get() {\n      return this.inputManager.storedRawValue;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.clearMask(this.rawValue);\n    },\n    set: function set(value) {\n      this.rawValue = this.applyMask(true, \"\" + value);\n    }\n  }]);\n\n  return InputService;\n}();\n\nvar InputHandler = /*#__PURE__*/function () {\n  function InputHandler(htmlInputElement, options) {\n    _classCallCheck(this, InputHandler);\n\n    this.inputService = new InputService(htmlInputElement, options);\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  _createClass(InputHandler, [{\n    key: \"handleClick\",\n    value: function handleClick(event, chromeAndroid) {\n      var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart); //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n\n      if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n        this.inputService.fixCursorPosition(chromeAndroid);\n      }\n    }\n  }, {\n    key: \"handleCut\",\n    value: function handleCut(event) {\n      var _this = this;\n\n      if (this.isReadOnly()) {\n        return;\n      }\n\n      setTimeout(function () {\n        _this.inputService.updateFieldValue();\n\n        _this.setValue(_this.inputService.value);\n\n        _this.onModelChange(_this.inputService.value);\n      }, 0);\n    }\n  }, {\n    key: \"handleInput\",\n    value: function handleInput(event) {\n      if (this.isReadOnly()) {\n        return;\n      }\n\n      var keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n      var rawValueLength = this.inputService.rawValue.length;\n      var rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n      var rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n      var storedRawValueLength = this.inputService.storedRawValue.length;\n      this.inputService.rawValue = this.inputService.storedRawValue;\n\n      if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n        this.setCursorPosition(event);\n        return;\n      }\n\n      if (rawValueLength < storedRawValueLength) {\n        if (this.inputService.value != 0) {\n          this.inputService.removeNumber(8);\n        } else {\n          this.setValue(null);\n        }\n      }\n\n      if (rawValueLength > storedRawValueLength) {\n        switch (keyCode) {\n          case 43:\n            this.inputService.changeToPositive();\n            break;\n\n          case 45:\n            this.inputService.changeToNegative();\n            break;\n\n          default:\n            if (!this.inputService.canInputMoreNumbers || isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null) {\n              return;\n            }\n\n            this.inputService.addNumber(keyCode);\n        }\n      }\n\n      this.setCursorPosition(event);\n      this.onModelChange(this.inputService.value);\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      if (this.isReadOnly()) {\n        return;\n      }\n\n      var keyCode = event.which || event.charCode || event.keyCode;\n\n      if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n        event.preventDefault();\n        var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n        if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n          this.setValue(null);\n          this.onModelChange(this.inputService.value);\n        }\n\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n          this.inputService.removeNumber(keyCode);\n          this.onModelChange(this.inputService.value);\n        }\n\n        if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n          this.inputService.removeNumber(keyCode);\n          this.onModelChange(this.inputService.value);\n        }\n      }\n    }\n  }, {\n    key: \"handleKeypress\",\n    value: function handleKeypress(event) {\n      if (this.isReadOnly()) {\n        return;\n      }\n\n      var keyCode = event.which || event.charCode || event.keyCode;\n\n      if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n        return;\n      }\n\n      switch (keyCode) {\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n\n        default:\n          if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n            this.inputService.addNumber(keyCode);\n          }\n\n      }\n\n      event.preventDefault();\n      this.onModelChange(this.inputService.value);\n    }\n  }, {\n    key: \"handleKeyup\",\n    value: function handleKeyup(event) {\n      this.inputService.fixCursorPosition();\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(event) {\n      var _this2 = this;\n\n      if (this.isReadOnly()) {\n        return;\n      }\n\n      setTimeout(function () {\n        _this2.inputService.updateFieldValue();\n\n        _this2.setValue(_this2.inputService.value);\n\n        _this2.onModelChange(_this2.inputService.value);\n      }, 1);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(options) {\n      this.inputService.updateOptions(options);\n    }\n  }, {\n    key: \"getOnModelChange\",\n    value: function getOnModelChange() {\n      return this.onModelChange;\n    }\n  }, {\n    key: \"setOnModelChange\",\n    value: function setOnModelChange(callbackFunction) {\n      this.onModelChange = callbackFunction;\n    }\n  }, {\n    key: \"getOnModelTouched\",\n    value: function getOnModelTouched() {\n      return this.onModelTouched;\n    }\n  }, {\n    key: \"setOnModelTouched\",\n    value: function setOnModelTouched(callbackFunction) {\n      this.onModelTouched = callbackFunction;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.inputService.value = value;\n    }\n  }, {\n    key: \"getNewKeyCode\",\n    value: function getNewKeyCode(oldString, newString) {\n      if (oldString.length > newString.length) {\n        return null;\n      }\n\n      for (var x = 0; x < newString.length; x++) {\n        if (oldString.length == x || oldString[x] != newString[x]) {\n          return newString.charCodeAt(x);\n        }\n      }\n    }\n  }, {\n    key: \"isArrowEndHomeKeyInFirefox\",\n    value: function isArrowEndHomeKeyInFirefox(event) {\n      if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isReadOnly\",\n    value: function isReadOnly() {\n      return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n  }, {\n    key: \"setCursorPosition\",\n    value: function setCursorPosition(event) {\n      var rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n      setTimeout(function () {\n        event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n      }, 0);\n    }\n  }]);\n\n  return InputHandler;\n}();\n\nvar CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return CurrencyMaskDirective;\n  }),\n  multi: true\n};\n\nvar CurrencyMaskDirective = /*#__PURE__*/function () {\n  function CurrencyMaskDirective(currencyMaskConfig, elementRef, keyValueDiffers) {\n    _classCallCheck(this, CurrencyMaskDirective);\n\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\"\n    };\n\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  _createClass(CurrencyMaskDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.keyValueDiffer.diff(this.options)) {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n        this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(event) {\n      this.inputHandler.getOnModelTouched().apply(event);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n  }, {\n    key: \"handleCut\",\n    value: function handleCut(event) {\n      if (!this.isChromeAndroid()) {\n        this.inputHandler.handleCut(event);\n      }\n    }\n  }, {\n    key: \"handleInput\",\n    value: function handleInput(event) {\n      if (this.isChromeAndroid()) {\n        this.inputHandler.handleInput(event);\n      }\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      if (!this.isChromeAndroid()) {\n        this.inputHandler.handleKeydown(event);\n      }\n    }\n  }, {\n    key: \"handleKeypress\",\n    value: function handleKeypress(event) {\n      if (!this.isChromeAndroid()) {\n        this.inputHandler.handleKeypress(event);\n      }\n    }\n  }, {\n    key: \"handleKeyup\",\n    value: function handleKeyup(event) {\n      if (!this.isChromeAndroid()) {\n        this.inputHandler.handleKeyup(event);\n      }\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(event) {\n      if (!this.isChromeAndroid()) {\n        this.inputHandler.handlePaste(event);\n      }\n    }\n  }, {\n    key: \"isChromeAndroid\",\n    value: function isChromeAndroid() {\n      return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(callbackFunction) {\n      this.inputHandler.setOnModelChange(callbackFunction);\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(callbackFunction) {\n      this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(value) {\n      this.elementRef.nativeElement.disabled = value;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(abstractControl) {\n      var result = {};\n\n      if (abstractControl.value > this.max) {\n        result.max = true;\n      }\n\n      if (abstractControl.value < this.min) {\n        result.min = true;\n      }\n\n      return result != {} ? result : null;\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.inputHandler.setValue(value);\n    }\n  }]);\n\n  return CurrencyMaskDirective;\n}();\n\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers));\n};\n\nCurrencyMaskDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) {\n        return ctx.handleClick($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyup($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      });\n    }\n  },\n  inputs: {\n    options: \"options\",\n    max: \"max\",\n    min: \"min\"\n  },\n  features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n    provide: NG_VALIDATORS,\n    useExisting: CurrencyMaskDirective,\n    multi: true\n  }])]\n});\n\nCurrencyMaskDirective.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CURRENCY_MASK_CONFIG]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: KeyValueDiffers\n  }];\n};\n\nCurrencyMaskDirective.propDecorators = {\n  max: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  handleBlur: [{\n    type: HostListener,\n    args: [\"blur\", [\"$event\"]]\n  }],\n  handleClick: [{\n    type: HostListener,\n    args: [\"click\", [\"$event\"]]\n  }],\n  handleCut: [{\n    type: HostListener,\n    args: [\"cut\", [\"$event\"]]\n  }],\n  handleInput: [{\n    type: HostListener,\n    args: [\"input\", [\"$event\"]]\n  }],\n  handleKeydown: [{\n    type: HostListener,\n    args: [\"keydown\", [\"$event\"]]\n  }],\n  handleKeypress: [{\n    type: HostListener,\n    args: [\"keypress\", [\"$event\"]]\n  }],\n  handleKeyup: [{\n    type: HostListener,\n    args: [\"keyup\", [\"$event\"]]\n  }],\n  handlePaste: [{\n    type: HostListener,\n    args: [\"paste\", [\"$event\"]]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n        provide: NG_VALIDATORS,\n        useExisting: CurrencyMaskDirective,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.KeyValueDiffers\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handleKeyup: [{\n      type: HostListener,\n      args: [\"keyup\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CurrencyMaskModule = /*#__PURE__*/_createClass(function CurrencyMaskModule() {\n  _classCallCheck(this, CurrencyMaskModule);\n});\n\nCurrencyMaskModule.Éµfac = function CurrencyMaskModule_Factory(t) {\n  return new (t || CurrencyMaskModule)();\n};\n\nCurrencyMaskModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: CurrencyMaskModule\n});\nCurrencyMaskModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CurrencyMaskModule, {\n    declarations: function declarations() {\n      return [CurrencyMaskDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule];\n    },\n    exports: function exports() {\n      return [CurrencyMaskDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule }; //# sourceMappingURL=ng2-currency-mask.js.map","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ng2-currency-mask/__ivy_ngcc__/fesm2015/ng2-currency-mask.js"],"names":["InjectionToken","forwardRef","Directive","Optional","Inject","ElementRef","KeyValueDiffers","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","CommonModule","Éµngcc0","CURRENCY_MASK_CONFIG","InputManager","htmlInputElement","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","newRawValue","oldLength","selectionStart","rawValue","newLength","length","setCursorAt","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","InputService","options","inputManager","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","allowNegative","decimal","precision","prefix","suffix","thousands","Number","toFixed","onlyNumbers","integerPart","decimalPart","repeat","isZero","parseInt","operator","indexOf","RegExp","parseFloat","charAt","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","test","undefined","updateValueAndCursor","canInputMoreNumbers","storedRawValue","clearMask","InputHandler","inputService","event","chromeAndroid","selectionRangeLength","Math","abs","isNaN","fixCursorPosition","isReadOnly","setTimeout","setValue","onModelChange","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","removeNumber","changeToPositive","changeToNegative","addNumber","which","charCode","preventDefault","isArrowEndHomeKeyInFirefox","updateOptions","callbackFunction","onModelTouched","oldString","newString","x","charCodeAt","readOnly","target","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","nativeElement","style","textAlign","diff","inputHandler","Object","assign","getOnModelTouched","apply","handleClick","isChromeAndroid","handleCut","handleInput","handleKeydown","handleKeypress","handleKeyup","handlePaste","navigator","userAgent","setOnModelChange","setOnModelTouched","disabled","abstractControl","result","max","min","Éµfac","CurrencyMaskDirective_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","hostBindings","CurrencyMaskDirective_HostBindings","rf","ctx","ÉµÉµlistener","CurrencyMaskDirective_blur_HostBindingHandler","$event","handleBlur","CurrencyMaskDirective_click_HostBindingHandler","CurrencyMaskDirective_cut_HostBindingHandler","CurrencyMaskDirective_input_HostBindingHandler","CurrencyMaskDirective_keydown_HostBindingHandler","CurrencyMaskDirective_keypress_HostBindingHandler","CurrencyMaskDirective_keyup_HostBindingHandler","CurrencyMaskDirective_paste_HostBindingHandler","inputs","features","ÉµÉµProvidersFeature","ctorParameters","decorators","args","propDecorators","ngDevMode","ÉµsetClassMetadata","selector","providers","CurrencyMaskModule","CurrencyMaskModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","imports","ngJitMode","ÉµÉµsetNgModuleScope","declarations","exports"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,QAAhD,EAA0DC,MAA1D,EAAkEC,UAAlE,EAA8EC,eAA9E,EAA+FC,KAA/F,EAAsGC,YAAtG,EAAoHC,QAApH,QAAoI,eAApI;AACA,SAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,WAA3C,QAA8D,gBAA9D;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,IAAIC,oBAAoB,GAAG,IAAIf,cAAJ,CAAmB,sBAAnB,CAA3B;;IAEMgB,Y;AACF,wBAAYC,gBAAZ,EAA8B;AAAA;;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;;;;WACD,qBAAYC,QAAZ,EAAsB;AAClB,UAAI,KAAKD,gBAAL,CAAsBE,iBAA1B,EAA6C;AACzC,aAAKF,gBAAL,CAAsBG,KAAtB;AACA,aAAKH,gBAAL,CAAsBE,iBAAtB,CAAwCD,QAAxC,EAAkDA,QAAlD;AACH,OAHD,MAIK,IAAI,KAAKD,gBAAL,CAAsBI,eAA1B,EAA2C;AAC5C,YAAIC,SAAS,GAAG,KAAKL,gBAAL,CAAsBI,eAAtB,EAAhB;AACAC,QAAAA,SAAS,CAACC,QAAV,CAAmB,IAAnB;AACAD,QAAAA,SAAS,CAACE,OAAV,CAAkB,WAAlB,EAA+BN,QAA/B;AACAI,QAAAA,SAAS,CAACG,SAAV,CAAoB,WAApB,EAAiCP,QAAjC;AACAI,QAAAA,SAAS,CAACI,MAAV;AACH;AACJ;;;WACD,8BAAqBC,WAArB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6D;AACzD,WAAKC,QAAL,GAAgBH,WAAhB;AACA,UAAII,SAAS,GAAGJ,WAAW,CAACK,MAA5B;AACAH,MAAAA,cAAc,GAAGA,cAAc,IAAID,SAAS,GAAGG,SAAhB,CAA/B;AACA,WAAKE,WAAL,CAAiBJ,cAAjB;AACH;;;SACD,eAA0B;AACtB,UAAIK,sBAAsB,GAAG,EAAE,KAAKJ,QAAL,CAAcE,MAAd,IAAwB,KAAKf,gBAAL,CAAsBkB,SAA9C,IAA2D,KAAKlB,gBAAL,CAAsBkB,SAAtB,IAAmC,CAAhG,CAA7B;AACA,UAAIN,cAAc,GAAG,KAAKO,cAAL,CAAoBP,cAAzC;AACA,UAAIQ,YAAY,GAAG,KAAKD,cAAL,CAAoBC,YAAvC;AACA,UAAIC,kBAAkB,GAAIT,cAAc,IAAIQ,YAAlB,IAAkC,KAAKpB,gBAAL,CAAsBsB,KAAtB,CAA4BC,SAA5B,CAAsCX,cAAtC,EAAsDQ,YAAtD,EAAoEI,KAApE,CAA0E,IAA1E,CAAnC,GAAsH,IAAtH,GAA6H,KAAtJ;AACA,UAAIC,aAAa,GAAI,KAAKzB,gBAAL,CAAsBsB,KAAtB,CAA4BC,SAA5B,CAAsC,CAAtC,EAAyC,CAAzC,KAA+C,GAApE;AACA,aAAON,sBAAsB,IAAII,kBAA1B,IAAgDI,aAAvD;AACH;;;SACD,eAAqB;AACjB,UAAIb,cAAc,GAAG,CAArB;AACA,UAAIQ,YAAY,GAAG,CAAnB;;AACA,UAAI,OAAO,KAAKpB,gBAAL,CAAsBY,cAA7B,IAA+C,QAA/C,IAA2D,OAAO,KAAKZ,gBAAL,CAAsBoB,YAA7B,IAA6C,QAA5G,EAAsH;AAClHR,QAAAA,cAAc,GAAG,KAAKZ,gBAAL,CAAsBY,cAAvC;AACAQ,QAAAA,YAAY,GAAG,KAAKpB,gBAAL,CAAsBoB,YAArC;AACH,OAHD,MAIK;AACD,YAAIM,KAAK,GAAGC,QAAQ,CAACC,YAAT,GAAwBC,UAApC;;AACA,YAAIH,KAAK,IAAIA,KAAK,CAACI,UAAN,IAAoB,KAAK9B,gBAAtC,EAAwD;AACpD,cAAI+B,MAAM,GAAG,KAAK/B,gBAAL,CAAsBsB,KAAtB,CAA4BP,MAAzC;AACA,cAAIiB,eAAe,GAAG,KAAKhC,gBAAL,CAAsBsB,KAAtB,CAA4BW,OAA5B,CAAoC,OAApC,EAA6C,IAA7C,CAAtB;AACA,cAAIC,UAAU,GAAG,KAAKlC,gBAAL,CAAsBI,eAAtB,EAAjB;AACA,cAAI+B,QAAQ,GAAG,KAAKnC,gBAAL,CAAsBI,eAAtB,EAAf;AACA+B,UAAAA,QAAQ,CAAC7B,QAAT,CAAkB,KAAlB;;AACA,cAAI4B,UAAU,CAACE,gBAAX,CAA4B,YAA5B,EAA0CD,QAA1C,IAAsD,CAAC,CAA3D,EAA8D;AAC1DvB,YAAAA,cAAc,GAAGQ,YAAY,GAAGW,MAAhC;AACH,WAFD,MAGK;AACDnB,YAAAA,cAAc,GAAG,CAACsB,UAAU,CAAC1B,SAAX,CAAqB,WAArB,EAAkC,CAACuB,MAAnC,CAAlB;AACAnB,YAAAA,cAAc,IAAIoB,eAAe,CAACK,KAAhB,CAAsB,CAAtB,EAAyBzB,cAAzB,EAAyC0B,KAAzC,CAA+C,IAA/C,EAAqDvB,MAArD,GAA8D,CAAhF;;AACA,gBAAImB,UAAU,CAACE,gBAAX,CAA4B,UAA5B,EAAwCD,QAAxC,IAAoD,CAAC,CAAzD,EAA4D;AACxDf,cAAAA,YAAY,GAAGW,MAAf;AACH,aAFD,MAGK;AACDX,cAAAA,YAAY,GAAG,CAACc,UAAU,CAAC3B,OAAX,CAAmB,WAAnB,EAAgC,CAACwB,MAAjC,CAAhB;AACAX,cAAAA,YAAY,IAAIY,eAAe,CAACK,KAAhB,CAAsB,CAAtB,EAAyBjB,YAAzB,EAAuCkB,KAAvC,CAA6C,IAA7C,EAAmDvB,MAAnD,GAA4D,CAA5E;AACH;AACJ;AACJ;AACJ;;AACD,aAAO;AACHH,QAAAA,cAAc,EAAEA,cADb;AAEHQ,QAAAA,YAAY,EAAEA;AAFX,OAAP;AAIH;;;SACD,eAAe;AACX,aAAO,KAAKpB,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBsB,KAAtD;AACH,K;SACD,aAAaA,KAAb,EAAoB;AAChB,WAAKiB,eAAL,GAAuBjB,KAAvB;;AACA,UAAI,KAAKtB,gBAAT,EAA2B;AACvB,aAAKA,gBAAL,CAAsBsB,KAAtB,GAA8BA,KAA9B;AACH;AACJ;;;SACD,eAAqB;AACjB,aAAO,KAAKiB,eAAZ;AACH;;;;;;IAGCC,Y;AACF,wBAAYxC,gBAAZ,EAA8ByC,OAA9B,EAAuC;AAAA;;AACnC,SAAKzC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKyC,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoB,IAAI3C,YAAJ,CAAiBC,gBAAjB,CAApB;AACH;;;;WACD,mBAAU2C,OAAV,EAAmB;AACf,UAAI,CAAC,KAAK9B,QAAV,EAAoB;AAChB,aAAKA,QAAL,GAAgB,KAAK+B,SAAL,CAAe,KAAf,EAAsB,GAAtB,CAAhB;AACH;;AACD,UAAIC,OAAO,GAAGC,MAAM,CAACC,YAAP,CAAoBJ,OAApB,CAAd;AACA,UAAI/B,cAAc,GAAG,KAAKO,cAAL,CAAoBP,cAAzC;AACA,UAAIQ,YAAY,GAAG,KAAKD,cAAL,CAAoBC,YAAvC;AACA,WAAKP,QAAL,GAAgB,KAAKA,QAAL,CAAcU,SAAd,CAAwB,CAAxB,EAA2BX,cAA3B,IAA6CiC,OAA7C,GAAuD,KAAKhC,QAAL,CAAcU,SAAd,CAAwBH,YAAxB,EAAsC,KAAKP,QAAL,CAAcE,MAApD,CAAvE;AACA,WAAKiC,gBAAL,CAAsBpC,cAAc,GAAG,CAAvC;AACH;;;WACD,mBAAUqC,QAAV,EAAoBpC,QAApB,EAA8B;AAC1B,0BAAuE,KAAK4B,OAA5E;AAAA,UAAMS,aAAN,iBAAMA,aAAN;AAAA,UAAqBC,OAArB,iBAAqBA,OAArB;AAAA,UAA8BC,SAA9B,iBAA8BA,SAA9B;AAAA,UAAyCC,MAAzC,iBAAyCA,MAAzC;AAAA,UAAiDC,MAAjD,iBAAiDA,MAAjD;AAAA,UAAyDC,SAAzD,iBAAyDA,SAAzD;AACA1C,MAAAA,QAAQ,GAAGoC,QAAQ,GAAG,IAAIO,MAAJ,CAAW3C,QAAX,EAAqB4C,OAArB,CAA6BL,SAA7B,CAAH,GAA6CvC,QAAhE;AACA,UAAI6C,WAAW,GAAG7C,QAAQ,CAACoB,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAlB;;AACA,UAAI,CAACyB,WAAL,EAAkB;AACd,eAAO,EAAP;AACH;;AACD,UAAIC,WAAW,GAAGD,WAAW,CAACrB,KAAZ,CAAkB,CAAlB,EAAqBqB,WAAW,CAAC3C,MAAZ,GAAqBqC,SAA1C,EAAqDnB,OAArD,CAA6D,MAA7D,EAAqE,EAArE,EAAyEA,OAAzE,CAAiF,uBAAjF,EAA0GsB,SAA1G,CAAlB;;AACA,UAAII,WAAW,IAAI,EAAnB,EAAuB;AACnBA,QAAAA,WAAW,GAAG,GAAd;AACH;;AACD,UAAIjD,WAAW,GAAGiD,WAAlB;AACA,UAAIC,WAAW,GAAGF,WAAW,CAACrB,KAAZ,CAAkBqB,WAAW,CAAC3C,MAAZ,GAAqBqC,SAAvC,CAAlB;;AACA,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACfQ,QAAAA,WAAW,GAAG,IAAIC,MAAJ,CAAWT,SAAS,GAAGQ,WAAW,CAAC7C,MAAnC,IAA6C6C,WAA3D;AACAlD,QAAAA,WAAW,IAAIyC,OAAO,GAAGS,WAAzB;AACH;;AACD,UAAIE,MAAM,GAAGC,QAAQ,CAACJ,WAAD,CAAR,IAAyB,CAAzB,KAA+BI,QAAQ,CAACH,WAAD,CAAR,IAAyB,CAAzB,IAA8BA,WAAW,IAAI,EAA5E,CAAb;AACA,UAAII,QAAQ,GAAInD,QAAQ,CAACoD,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzB,IAA8Bf,aAA9B,IAA+C,CAACY,MAAjD,GAA2D,GAA3D,GAAiE,EAAhF;AACA,aAAOE,QAAQ,GAAGX,MAAX,GAAoB3C,WAApB,GAAkC4C,MAAzC;AACH;;;WACD,mBAAUzC,QAAV,EAAoB;AAChB,UAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAI,EAApC,EAAwC;AACpC,eAAO,IAAP;AACH;;AACD,UAAIS,KAAK,GAAGT,QAAQ,CAACoB,OAAT,CAAiB,KAAKQ,OAAL,CAAaY,MAA9B,EAAsC,EAAtC,EAA0CpB,OAA1C,CAAkD,KAAKQ,OAAL,CAAaa,MAA/D,EAAuE,EAAvE,CAAZ;;AACA,UAAI,KAAKb,OAAL,CAAac,SAAjB,EAA4B;AACxBjC,QAAAA,KAAK,GAAGA,KAAK,CAACW,OAAN,CAAc,IAAIiC,MAAJ,CAAW,OAAO,KAAKzB,OAAL,CAAac,SAA/B,EAA0C,GAA1C,CAAd,EAA8D,EAA9D,CAAR;AACH;;AACD,UAAI,KAAKd,OAAL,CAAaU,OAAjB,EAA0B;AACtB7B,QAAAA,KAAK,GAAGA,KAAK,CAACW,OAAN,CAAc,KAAKQ,OAAL,CAAaU,OAA3B,EAAoC,GAApC,CAAR;AACH;;AACD,aAAOgB,UAAU,CAAC7C,KAAD,CAAjB;AACH;;;WACD,4BAAmB;AACf,UAAI,KAAKmB,OAAL,CAAaS,aAAb,IAA8B,KAAKrC,QAAL,IAAiB,EAA/C,IAAqD,KAAKA,QAAL,CAAcuD,MAAd,CAAqB,CAArB,KAA2B,GAAhF,IAAuF,KAAK9C,KAAL,IAAc,CAAzG,EAA4G;AACxG,YAAIV,cAAc,GAAG,KAAKO,cAAL,CAAoBP,cAAzC;AACA,aAAKC,QAAL,GAAgB,MAAM,KAAKA,QAA3B;AACA,aAAKmC,gBAAL,CAAsBpC,cAAc,GAAG,CAAvC;AACH;AACJ;;;WACD,4BAAmB;AACf,UAAIA,cAAc,GAAG,KAAKO,cAAL,CAAoBP,cAAzC;AACA,WAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcoB,OAAd,CAAsB,GAAtB,EAA2B,EAA3B,CAAhB;AACA,WAAKe,gBAAL,CAAsBpC,cAAc,GAAG,CAAvC;AACH;;;WACD,2BAAkByD,kBAAlB,EAAsC;AAClC,UAAIC,qBAAqB,GAAG,KAAKnD,cAAL,CAAoBP,cAAhD,CADkC,CAElC;;AACA,UAAI0D,qBAAqB,GAAG,KAAKC,mCAAL,EAAxB,IAAsEF,kBAA1E,EAA8F;AAC1F,aAAK3B,YAAL,CAAkB1B,WAAlB,CAA8B,KAAKuD,mCAAL,EAA9B,EAD0F,CAE1F;AACH,OAHD,MAIK,IAAID,qBAAqB,GAAG,KAAKE,qCAAL,EAA5B,EAA0E;AAC3E,aAAK9B,YAAL,CAAkB1B,WAAlB,CAA8B,KAAKwD,qCAAL,EAA9B;AACH;AACJ;;;WACD,+CAAsC;AAClC,aAAO,KAAK3D,QAAL,CAAcE,MAAd,GAAuB,KAAK0B,OAAL,CAAaa,MAAb,CAAoBvC,MAAlD;AACH;;;WACD,iDAAwC;AACpC,aAAO,KAAKO,KAAL,IAAc,IAAd,IAAsB,KAAKA,KAAL,GAAa,CAAnC,GAAuC,KAAKmB,OAAL,CAAaY,MAAb,CAAoBtC,MAApB,GAA6B,CAApE,GAAwE,KAAK0B,OAAL,CAAaY,MAAb,CAAoBtC,MAAnG;AACH;;;WACD,sBAAa4B,OAAb,EAAsB;AAClB,2BAA6B,KAAKF,OAAlC;AAAA,UAAMU,OAAN,kBAAMA,OAAN;AAAA,UAAeI,SAAf,kBAAeA,SAAf;AACA,UAAInC,YAAY,GAAG,KAAKD,cAAL,CAAoBC,YAAvC;AACA,UAAIR,cAAc,GAAG,KAAKO,cAAL,CAAoBP,cAAzC;;AACA,UAAIA,cAAc,GAAG,KAAKC,QAAL,CAAcE,MAAd,GAAuB,KAAK0B,OAAL,CAAaa,MAAb,CAAoBvC,MAAhE,EAAwE;AACpEK,QAAAA,YAAY,GAAG,KAAKP,QAAL,CAAcE,MAAd,GAAuB,KAAK0B,OAAL,CAAaa,MAAb,CAAoBvC,MAA1D;AACAH,QAAAA,cAAc,GAAG,KAAKC,QAAL,CAAcE,MAAd,GAAuB,KAAK0B,OAAL,CAAaa,MAAb,CAAoBvC,MAA5D;AACH,OAPiB,CAQlB;;;AACA,UAAIK,YAAY,IAAIR,cAApB,EAAoC;AAChC;AACA,YAAI,CAAC+B,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,KAA7B,KAAuC,QAAQ8B,IAAR,CAAa,KAAK5D,QAAL,CAAcU,SAAd,CAAwBX,cAAxB,EAAwCQ,YAAY,GAAG,CAAvD,CAAb,CAA3C,EAAoH;AAChHA,UAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACH,SAJ+B,CAKhC;;;AACA,YAAI,CAACuB,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,KAA7B,MAAwC,KAAK9B,QAAL,CAAcU,SAAd,CAAwBX,cAAxB,EAAwCQ,YAAY,GAAG,CAAvD,KAA6D+B,OAA7D,IAAwE,KAAKtC,QAAL,CAAcU,SAAd,CAAwBX,cAAxB,EAAwCQ,YAAY,GAAG,CAAvD,KAA6DmC,SAA7K,CAAJ,EAA6L;AACzLnC,UAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACAR,UAAAA,cAAc,GAAGA,cAAc,GAAG,CAAlC;AACH,SAT+B,CAUhC;;;AACA,YAAI+B,OAAO,IAAI,CAAX,IAAgB,QAAQ8B,IAAR,CAAa,KAAK5D,QAAL,CAAcU,SAAd,CAAwBX,cAAc,GAAG,CAAzC,EAA4CQ,YAA5C,CAAb,CAApB,EAA6F;AACzFR,UAAAA,cAAc,GAAGA,cAAc,GAAG,CAAlC;AACH,SAb+B,CAchC;;;AACA,YAAI+B,OAAO,IAAI,CAAX,KAAiB,KAAK9B,QAAL,CAAcU,SAAd,CAAwBX,cAAc,GAAG,CAAzC,EAA4CQ,YAA5C,KAA6D+B,OAA7D,IAAwE,KAAKtC,QAAL,CAAcU,SAAd,CAAwBX,cAAc,GAAG,CAAzC,EAA4CQ,YAA5C,KAA6DmC,SAAtJ,CAAJ,EAAsK;AAClK3C,UAAAA,cAAc,GAAGA,cAAc,GAAG,CAAlC;AACAQ,UAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACH;AACJ;;AACD,WAAKP,QAAL,GAAgB,KAAKA,QAAL,CAAcU,SAAd,CAAwB,CAAxB,EAA2BX,cAA3B,IAA6C,KAAKC,QAAL,CAAcU,SAAd,CAAwBH,YAAxB,EAAsC,KAAKP,QAAL,CAAcE,MAApD,CAA7D;AACA,WAAKiC,gBAAL,CAAsBpC,cAAtB;AACH;;;WACD,0BAAiBA,cAAjB,EAAiC;AAC7B,UAAIF,WAAW,GAAG,KAAKkC,SAAL,CAAe,KAAf,EAAsB,KAAK/B,QAAL,IAAiB,EAAvC,CAAlB;AACAD,MAAAA,cAAc,GAAGA,cAAc,IAAI8D,SAAlB,GAA8B,KAAK7D,QAAL,CAAcE,MAA5C,GAAqDH,cAAtE;AACA,WAAK8B,YAAL,CAAkBiC,oBAAlB,CAAuCjE,WAAvC,EAAoD,KAAKG,QAAL,CAAcE,MAAlE,EAA0EH,cAA1E;AACH;;;WACD,uBAAc6B,OAAd,EAAuB;AACnB,UAAInB,KAAK,GAAG,KAAKA,KAAjB;AACA,WAAKmB,OAAL,GAAeA,OAAf;AACA,WAAKnB,KAAL,GAAaA,KAAb;AACH;;;SACD,eAA0B;AACtB,aAAO,KAAKoB,YAAL,CAAkBkC,mBAAzB;AACH;;;SACD,eAAqB;AACjB,aAAO,KAAKlC,YAAL,CAAkBvB,cAAzB;AACH;;;SACD,eAAe;AACX,aAAO,KAAKuB,YAAL,CAAkB7B,QAAzB;AACH,K;SACD,aAAaS,KAAb,EAAoB;AAChB,WAAKoB,YAAL,CAAkB7B,QAAlB,GAA6BS,KAA7B;AACH;;;SACD,eAAqB;AACjB,aAAO,KAAKoB,YAAL,CAAkBmC,cAAzB;AACH;;;SACD,eAAY;AACR,aAAO,KAAKC,SAAL,CAAe,KAAKjE,QAApB,CAAP;AACH,K;SACD,aAAUS,KAAV,EAAiB;AACb,WAAKT,QAAL,GAAgB,KAAK+B,SAAL,CAAe,IAAf,EAAqB,KAAKtB,KAA1B,CAAhB;AACH;;;;;;IAGCyD,Y;AACF,wBAAY/E,gBAAZ,EAA8ByC,OAA9B,EAAuC;AAAA;;AACnC,SAAKuC,YAAL,GAAoB,IAAIxC,YAAJ,CAAiBxC,gBAAjB,EAAmCyC,OAAnC,CAApB;AACA,SAAKzC,gBAAL,GAAwBA,gBAAxB;AACH;;;;WACD,qBAAYiF,KAAZ,EAAmBC,aAAnB,EAAkC;AAC9B,UAAIC,oBAAoB,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKL,YAAL,CAAkB7D,cAAlB,CAAiCC,YAAjC,GAAgD,KAAK4D,YAAL,CAAkB7D,cAAlB,CAAiCP,cAA1F,CAA3B,CAD8B,CAE9B;;AACA,UAAIuE,oBAAoB,IAAI,CAAxB,IAA6B,CAACG,KAAK,CAAC,KAAKN,YAAL,CAAkB1D,KAAnB,CAAvC,EAAkE;AAC9D,aAAK0D,YAAL,CAAkBO,iBAAlB,CAAoCL,aAApC;AACH;AACJ;;;WACD,mBAAUD,KAAV,EAAiB;AAAA;;AACb,UAAI,KAAKO,UAAL,EAAJ,EAAuB;AACnB;AACH;;AACDC,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,KAAI,CAACT,YAAL,CAAkBhC,gBAAlB;;AACA,QAAA,KAAI,CAAC0C,QAAL,CAAc,KAAI,CAACV,YAAL,CAAkB1D,KAAhC;;AACA,QAAA,KAAI,CAACqE,aAAL,CAAmB,KAAI,CAACX,YAAL,CAAkB1D,KAArC;AACH,OAJS,EAIP,CAJO,CAAV;AAKH;;;WACD,qBAAY2D,KAAZ,EAAmB;AACf,UAAI,KAAKO,UAAL,EAAJ,EAAuB;AACnB;AACH;;AACD,UAAI7C,OAAO,GAAG,KAAKiD,aAAL,CAAmB,KAAKZ,YAAL,CAAkBH,cAArC,EAAqD,KAAKG,YAAL,CAAkBnE,QAAvE,CAAd;AACA,UAAIgF,cAAc,GAAG,KAAKb,YAAL,CAAkBnE,QAAlB,CAA2BE,MAAhD;AACA,UAAI+E,oBAAoB,GAAG,KAAKd,YAAL,CAAkB7D,cAAlB,CAAiCC,YAA5D;AACA,UAAI2E,gCAAgC,GAAG,KAAKf,YAAL,CAAkBT,mCAAlB,EAAvC;AACA,UAAIyB,oBAAoB,GAAG,KAAKhB,YAAL,CAAkBH,cAAlB,CAAiC9D,MAA5D;AACA,WAAKiE,YAAL,CAAkBnE,QAAlB,GAA6B,KAAKmE,YAAL,CAAkBH,cAA/C;;AACA,UAAI,CAACiB,oBAAoB,IAAIC,gCAAxB,IAA4DX,IAAI,CAACC,GAAL,CAASQ,cAAc,GAAGG,oBAA1B,KAAmD,CAAhH,KAAsHA,oBAAoB,IAAI,CAAlJ,EAAqJ;AACjJ,aAAKC,iBAAL,CAAuBhB,KAAvB;AACA;AACH;;AACD,UAAIY,cAAc,GAAGG,oBAArB,EAA2C;AACvC,YAAI,KAAKhB,YAAL,CAAkB1D,KAAlB,IAA2B,CAA/B,EAAkC;AAC9B,eAAK0D,YAAL,CAAkBkB,YAAlB,CAA+B,CAA/B;AACH,SAFD,MAGK;AACD,eAAKR,QAAL,CAAc,IAAd;AACH;AACJ;;AACD,UAAIG,cAAc,GAAGG,oBAArB,EAA2C;AACvC,gBAAQrD,OAAR;AACI,eAAK,EAAL;AACI,iBAAKqC,YAAL,CAAkBmB,gBAAlB;AACA;;AACJ,eAAK,EAAL;AACI,iBAAKnB,YAAL,CAAkBoB,gBAAlB;AACA;;AACJ;AACI,gBAAI,CAAC,KAAKpB,YAAL,CAAkBJ,mBAAnB,IAA2CU,KAAK,CAAC,KAAKN,YAAL,CAAkB1D,KAAnB,CAAL,IAAkCwB,MAAM,CAACC,YAAP,CAAoBJ,OAApB,EAA6BnB,KAA7B,CAAmC,IAAnC,KAA4C,IAA7H,EAAoI;AAChI;AACH;;AACD,iBAAKwD,YAAL,CAAkBqB,SAAlB,CAA4B1D,OAA5B;AAXR;AAaH;;AACD,WAAKsD,iBAAL,CAAuBhB,KAAvB;AACA,WAAKU,aAAL,CAAmB,KAAKX,YAAL,CAAkB1D,KAArC;AACH;;;WACD,uBAAc2D,KAAd,EAAqB;AACjB,UAAI,KAAKO,UAAL,EAAJ,EAAuB;AACnB;AACH;;AACD,UAAI7C,OAAO,GAAGsC,KAAK,CAACqB,KAAN,IAAerB,KAAK,CAACsB,QAArB,IAAiCtB,KAAK,CAACtC,OAArD;;AACA,UAAIA,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,EAA3B,IAAiCA,OAAO,IAAI,KAAhD,EAAuD;AACnDsC,QAAAA,KAAK,CAACuB,cAAN;AACA,YAAIrB,oBAAoB,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKL,YAAL,CAAkB7D,cAAlB,CAAiCC,YAAjC,GAAgD,KAAK4D,YAAL,CAAkB7D,cAAlB,CAAiCP,cAA1F,CAA3B;;AACA,YAAIuE,oBAAoB,IAAI,KAAKH,YAAL,CAAkBnE,QAAlB,CAA2BE,MAAnD,IAA6D,KAAKiE,YAAL,CAAkB1D,KAAlB,IAA2B,CAA5F,EAA+F;AAC3F,eAAKoE,QAAL,CAAc,IAAd;AACA,eAAKC,aAAL,CAAmB,KAAKX,YAAL,CAAkB1D,KAArC;AACH;;AACD,YAAI6D,oBAAoB,IAAI,CAAxB,IAA6B,CAACG,KAAK,CAAC,KAAKN,YAAL,CAAkB1D,KAAnB,CAAvC,EAAkE;AAC9D,eAAK0D,YAAL,CAAkBkB,YAAlB,CAA+BvD,OAA/B;AACA,eAAKgD,aAAL,CAAmB,KAAKX,YAAL,CAAkB1D,KAArC;AACH;;AACD,YAAI,CAACqB,OAAO,KAAK,CAAZ,IAAiBA,OAAO,KAAK,EAA9B,KAAqCwC,oBAAoB,IAAI,CAA7D,IAAkE,CAACG,KAAK,CAAC,KAAKN,YAAL,CAAkB1D,KAAnB,CAA5E,EAAuG;AACnG,eAAK0D,YAAL,CAAkBkB,YAAlB,CAA+BvD,OAA/B;AACA,eAAKgD,aAAL,CAAmB,KAAKX,YAAL,CAAkB1D,KAArC;AACH;AACJ;AACJ;;;WACD,wBAAe2D,KAAf,EAAsB;AAClB,UAAI,KAAKO,UAAL,EAAJ,EAAuB;AACnB;AACH;;AACD,UAAI7C,OAAO,GAAGsC,KAAK,CAACqB,KAAN,IAAerB,KAAK,CAACsB,QAArB,IAAiCtB,KAAK,CAACtC,OAArD;;AACA,UAAIA,OAAO,IAAI+B,SAAX,IAAwB,CAAC,CAAD,EAAI,EAAJ,EAAQT,OAAR,CAAgBtB,OAAhB,KAA4B,CAAC,CAArD,IAA0D,KAAK8D,0BAAL,CAAgCxB,KAAhC,CAA9D,EAAsG;AAClG;AACH;;AACD,cAAQtC,OAAR;AACI,aAAK,EAAL;AACI,eAAKqC,YAAL,CAAkBmB,gBAAlB;AACA;;AACJ,aAAK,EAAL;AACI,eAAKnB,YAAL,CAAkBoB,gBAAlB;AACA;;AACJ;AACI,cAAI,KAAKpB,YAAL,CAAkBJ,mBAAlB,KAA0C,CAACU,KAAK,CAAC,KAAKN,YAAL,CAAkB1D,KAAnB,CAAN,IAAmCwB,MAAM,CAACC,YAAP,CAAoBJ,OAApB,EAA6BnB,KAA7B,CAAmC,IAAnC,KAA4C,IAAzH,CAAJ,EAAoI;AAChI,iBAAKwD,YAAL,CAAkBqB,SAAlB,CAA4B1D,OAA5B;AACH;;AAVT;;AAYAsC,MAAAA,KAAK,CAACuB,cAAN;AACA,WAAKb,aAAL,CAAmB,KAAKX,YAAL,CAAkB1D,KAArC;AACH;;;WACD,qBAAY2D,KAAZ,EAAmB;AACf,WAAKD,YAAL,CAAkBO,iBAAlB;AACH;;;WACD,qBAAYN,KAAZ,EAAmB;AAAA;;AACf,UAAI,KAAKO,UAAL,EAAJ,EAAuB;AACnB;AACH;;AACDC,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,MAAI,CAACT,YAAL,CAAkBhC,gBAAlB;;AACA,QAAA,MAAI,CAAC0C,QAAL,CAAc,MAAI,CAACV,YAAL,CAAkB1D,KAAhC;;AACA,QAAA,MAAI,CAACqE,aAAL,CAAmB,MAAI,CAACX,YAAL,CAAkB1D,KAArC;AACH,OAJS,EAIP,CAJO,CAAV;AAKH;;;WACD,uBAAcmB,OAAd,EAAuB;AACnB,WAAKuC,YAAL,CAAkB0B,aAAlB,CAAgCjE,OAAhC;AACH;;;WACD,4BAAmB;AACf,aAAO,KAAKkD,aAAZ;AACH;;;WACD,0BAAiBgB,gBAAjB,EAAmC;AAC/B,WAAKhB,aAAL,GAAqBgB,gBAArB;AACH;;;WACD,6BAAoB;AAChB,aAAO,KAAKC,cAAZ;AACH;;;WACD,2BAAkBD,gBAAlB,EAAoC;AAChC,WAAKC,cAAL,GAAsBD,gBAAtB;AACH;;;WACD,kBAASrF,KAAT,EAAgB;AACZ,WAAK0D,YAAL,CAAkB1D,KAAlB,GAA0BA,KAA1B;AACH;;;WACD,uBAAcuF,SAAd,EAAyBC,SAAzB,EAAoC;AAChC,UAAID,SAAS,CAAC9F,MAAV,GAAmB+F,SAAS,CAAC/F,MAAjC,EAAyC;AACrC,eAAO,IAAP;AACH;;AACD,WAAK,IAAIgG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAAC/F,MAA9B,EAAsCgG,CAAC,EAAvC,EAA2C;AACvC,YAAIF,SAAS,CAAC9F,MAAV,IAAoBgG,CAApB,IAAyBF,SAAS,CAACE,CAAD,CAAT,IAAgBD,SAAS,CAACC,CAAD,CAAtD,EAA2D;AACvD,iBAAOD,SAAS,CAACE,UAAV,CAAqBD,CAArB,CAAP;AACH;AACJ;AACJ;;;WACD,oCAA2B9B,KAA3B,EAAkC;AAC9B,UAAI,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyBhB,OAAzB,CAAiCgB,KAAK,CAACtC,OAAvC,KAAmD,CAAC,CAApD,KAA0DsC,KAAK,CAACsB,QAAN,IAAkB7B,SAAlB,IAA+BO,KAAK,CAACsB,QAAN,IAAkB,CAA3G,CAAJ,EAAmH;AAC/G,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;WACD,sBAAa;AACT,aAAO,KAAKvG,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBiH,QAAtD;AACH;;;WACD,2BAAkBhC,KAAlB,EAAyB;AACrB,UAAIc,gCAAgC,GAAG,KAAKf,YAAL,CAAkBT,mCAAlB,EAAvC;AACAkB,MAAAA,UAAU,CAAC,YAAY;AACnBR,QAAAA,KAAK,CAACiC,MAAN,CAAahH,iBAAb,CAA+B6F,gCAA/B,EAAiEA,gCAAjE;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;;;;;;AAGL,IAAMoB,oCAAoC,GAAG;AACzCC,EAAAA,OAAO,EAAE3H,iBADgC;AAEzC4H,EAAAA,WAAW,EAAErI,UAAU,CAAC;AAAA,WAAMsI,qBAAN;AAAA,GAAD,CAFkB;AAGzCC,EAAAA,KAAK,EAAE;AAHkC,CAA7C;;IAKMD,qB;AACF,iCAAYE,kBAAZ,EAAgCC,UAAhC,EAA4CC,eAA5C,EAA6D;AAAA;;AACzD,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKjF,OAAL,GAAe,EAAf;AACA,SAAKkF,eAAL,GAAuB;AACnBC,MAAAA,KAAK,EAAE,OADY;AAEnB1E,MAAAA,aAAa,EAAE,IAFI;AAGnBC,MAAAA,OAAO,EAAE,GAHU;AAInBC,MAAAA,SAAS,EAAE,CAJQ;AAKnBC,MAAAA,MAAM,EAAE,IALW;AAMnBC,MAAAA,MAAM,EAAE,EANW;AAOnBC,MAAAA,SAAS,EAAE;AAPQ,KAAvB;;AASA,QAAIiE,kBAAJ,EAAwB;AACpB,WAAKG,eAAL,GAAuBH,kBAAvB;AACH;;AACD,SAAKK,cAAL,GAAsBH,eAAe,CAACI,IAAhB,CAAqB,EAArB,EAAyBC,MAAzB,EAAtB;AACH;;;;WACD,2BAAkB;AACd,WAAKN,UAAL,CAAgBO,aAAhB,CAA8BC,KAA9B,CAAoCC,SAApC,GAAgD,KAAKzF,OAAL,CAAamF,KAAb,GAAqB,KAAKnF,OAAL,CAAamF,KAAlC,GAA0C,KAAKD,eAAL,CAAqBC,KAA/G;AACH;;;WACD,qBAAY;AACR,UAAI,KAAKC,cAAL,CAAoBM,IAApB,CAAyB,KAAK1F,OAA9B,CAAJ,EAA4C;AACxC,aAAKgF,UAAL,CAAgBO,aAAhB,CAA8BC,KAA9B,CAAoCC,SAApC,GAAgD,KAAKzF,OAAL,CAAamF,KAAb,GAAqB,KAAKnF,OAAL,CAAamF,KAAlC,GAA0C,KAAKD,eAAL,CAAqBC,KAA/G;AACA,aAAKQ,YAAL,CAAkB1B,aAAlB,CAAgC2B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKX,eAAvB,EAAwC,KAAKlF,OAA7C,CAAhC;AACH;AACJ;;;WACD,oBAAW;AACP,WAAK2F,YAAL,GAAoB,IAAIrD,YAAJ,CAAiB,KAAK0C,UAAL,CAAgBO,aAAjC,EAAgDK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKX,eAAvB,EAAwC,KAAKlF,OAA7C,CAAhD,CAApB;AACH;;;WACD,oBAAWwC,KAAX,EAAkB;AACd,WAAKmD,YAAL,CAAkBG,iBAAlB,GAAsCC,KAAtC,CAA4CvD,KAA5C;AACH;;;WACD,qBAAYA,KAAZ,EAAmB;AACf,WAAKmD,YAAL,CAAkBK,WAAlB,CAA8BxD,KAA9B,EAAqC,KAAKyD,eAAL,EAArC;AACH;;;WACD,mBAAUzD,KAAV,EAAiB;AACb,UAAI,CAAC,KAAKyD,eAAL,EAAL,EAA6B;AACzB,aAAKN,YAAL,CAAkBO,SAAlB,CAA4B1D,KAA5B;AACH;AACJ;;;WACD,qBAAYA,KAAZ,EAAmB;AACf,UAAI,KAAKyD,eAAL,EAAJ,EAA4B;AACxB,aAAKN,YAAL,CAAkBQ,WAAlB,CAA8B3D,KAA9B;AACH;AACJ;;;WACD,uBAAcA,KAAd,EAAqB;AACjB,UAAI,CAAC,KAAKyD,eAAL,EAAL,EAA6B;AACzB,aAAKN,YAAL,CAAkBS,aAAlB,CAAgC5D,KAAhC;AACH;AACJ;;;WACD,wBAAeA,KAAf,EAAsB;AAClB,UAAI,CAAC,KAAKyD,eAAL,EAAL,EAA6B;AACzB,aAAKN,YAAL,CAAkBU,cAAlB,CAAiC7D,KAAjC;AACH;AACJ;;;WACD,qBAAYA,KAAZ,EAAmB;AACf,UAAI,CAAC,KAAKyD,eAAL,EAAL,EAA6B;AACzB,aAAKN,YAAL,CAAkBW,WAAlB,CAA8B9D,KAA9B;AACH;AACJ;;;WACD,qBAAYA,KAAZ,EAAmB;AACf,UAAI,CAAC,KAAKyD,eAAL,EAAL,EAA6B;AACzB,aAAKN,YAAL,CAAkBY,WAAlB,CAA8B/D,KAA9B;AACH;AACJ;;;WACD,2BAAkB;AACd,aAAO,UAAUR,IAAV,CAAewE,SAAS,CAACC,SAAzB,KAAuC,WAAWzE,IAAX,CAAgBwE,SAAS,CAACC,SAA1B,CAA9C;AACH;;;WACD,0BAAiBvC,gBAAjB,EAAmC;AAC/B,WAAKyB,YAAL,CAAkBe,gBAAlB,CAAmCxC,gBAAnC;AACH;;;WACD,2BAAkBA,gBAAlB,EAAoC;AAChC,WAAKyB,YAAL,CAAkBgB,iBAAlB,CAAoCzC,gBAApC;AACH;;;WACD,0BAAiBrF,KAAjB,EAAwB;AACpB,WAAKmG,UAAL,CAAgBO,aAAhB,CAA8BqB,QAA9B,GAAyC/H,KAAzC;AACH;;;WACD,kBAASgI,eAAT,EAA0B;AACtB,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAID,eAAe,CAAChI,KAAhB,GAAwB,KAAKkI,GAAjC,EAAsC;AAClCD,QAAAA,MAAM,CAACC,GAAP,GAAa,IAAb;AACH;;AACD,UAAIF,eAAe,CAAChI,KAAhB,GAAwB,KAAKmI,GAAjC,EAAsC;AAClCF,QAAAA,MAAM,CAACE,GAAP,GAAa,IAAb;AACH;;AACD,aAAOF,MAAM,IAAI,EAAV,GAAeA,MAAf,GAAwB,IAA/B;AACH;;;WACD,oBAAWjI,KAAX,EAAkB;AACd,WAAK8G,YAAL,CAAkB1C,QAAlB,CAA2BpE,KAA3B;AACH;;;;;;AAELgG,qBAAqB,CAACoC,IAAtB,GAA6B,SAASC,6BAAT,CAAuCC,CAAvC,EAA0C;AAAE,SAAO,KAAKA,CAAC,IAAItC,qBAAV,EAAiCzH,MAAM,CAACgK,iBAAP,CAAyB/J,oBAAzB,EAA+C,CAA/C,CAAjC,EAAoFD,MAAM,CAACgK,iBAAP,CAAyBhK,MAAM,CAACT,UAAhC,CAApF,EAAiIS,MAAM,CAACgK,iBAAP,CAAyBhK,MAAM,CAACR,eAAhC,CAAjI,CAAP;AAA4L,CAArQ;;AACAiI,qBAAqB,CAACwC,IAAtB,GAA6BjK,MAAM,CAACkK,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAE1C,qBAAR;AAA+B2C,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,cAAL,EAAqB,EAArB,CAAD,CAA1C;AAAsEC,EAAAA,YAAY,EAAE,SAASC,kCAAT,CAA4CC,EAA5C,EAAgDC,GAAhD,EAAqD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACrMvK,MAAAA,MAAM,CAACyK,UAAP,CAAkB,MAAlB,EAA0B,SAASC,6CAAT,CAAuDC,MAAvD,EAA+D;AAAE,eAAOH,GAAG,CAACI,UAAJ,CAAeD,MAAf,CAAP;AAAgC,OAA3H,EAA6H,OAA7H,EAAsI,SAASE,8CAAT,CAAwDF,MAAxD,EAAgE;AAAE,eAAOH,GAAG,CAAC5B,WAAJ,CAAgB+B,MAAhB,CAAP;AAAiC,OAAzO,EAA2O,KAA3O,EAAkP,SAASG,4CAAT,CAAsDH,MAAtD,EAA8D;AAAE,eAAOH,GAAG,CAAC1B,SAAJ,CAAc6B,MAAd,CAAP;AAA+B,OAAjV,EAAmV,OAAnV,EAA4V,SAASI,8CAAT,CAAwDJ,MAAxD,EAAgE;AAAE,eAAOH,GAAG,CAACzB,WAAJ,CAAgB4B,MAAhB,CAAP;AAAiC,OAA/b,EAAic,SAAjc,EAA4c,SAASK,gDAAT,CAA0DL,MAA1D,EAAkE;AAAE,eAAOH,GAAG,CAACxB,aAAJ,CAAkB2B,MAAlB,CAAP;AAAmC,OAAnjB,EAAqjB,UAArjB,EAAikB,SAASM,iDAAT,CAA2DN,MAA3D,EAAmE;AAAE,eAAOH,GAAG,CAACvB,cAAJ,CAAmB0B,MAAnB,CAAP;AAAoC,OAA1qB,EAA4qB,OAA5qB,EAAqrB,SAASO,8CAAT,CAAwDP,MAAxD,EAAgE;AAAE,eAAOH,GAAG,CAACtB,WAAJ,CAAgByB,MAAhB,CAAP;AAAiC,OAAxxB,EAA0xB,OAA1xB,EAAmyB,SAASQ,8CAAT,CAAwDR,MAAxD,EAAgE;AAAE,eAAOH,GAAG,CAACrB,WAAJ,CAAgBwB,MAAhB,CAAP;AAAiC,OAAt4B;AACH;AAAE,GAF+C;AAE7CS,EAAAA,MAAM,EAAE;AAAExI,IAAAA,OAAO,EAAE,SAAX;AAAsB+G,IAAAA,GAAG,EAAE,KAA3B;AAAkCC,IAAAA,GAAG,EAAE;AAAvC,GAFqC;AAEWyB,EAAAA,QAAQ,EAAE,CAACrL,MAAM,CAACsL,kBAAP,CAA0B,CAC1FhE,oCAD0F,EAE1F;AAAEC,IAAAA,OAAO,EAAE1H,aAAX;AAA0B2H,IAAAA,WAAW,EAAEC,qBAAvC;AAA8DC,IAAAA,KAAK,EAAE;AAArE,GAF0F,CAA1B,CAAD;AAFrB,CAAzB,CAA7B;;AAMAD,qBAAqB,CAAC8D,cAAtB,GAAuC;AAAA,SAAM,CACzC;AAAEpB,IAAAA,IAAI,EAAEtF,SAAR;AAAmB2G,IAAAA,UAAU,EAAE,CAAC;AAAErB,MAAAA,IAAI,EAAE9K;AAAR,KAAD,EAAqB;AAAE8K,MAAAA,IAAI,EAAE7K,MAAR;AAAgBmM,MAAAA,IAAI,EAAE,CAACxL,oBAAD;AAAtB,KAArB;AAA/B,GADyC,EAEzC;AAAEkK,IAAAA,IAAI,EAAE5K;AAAR,GAFyC,EAGzC;AAAE4K,IAAAA,IAAI,EAAE3K;AAAR,GAHyC,CAAN;AAAA,CAAvC;;AAKAiI,qBAAqB,CAACiE,cAAtB,GAAuC;AACnC/B,EAAAA,GAAG,EAAE,CAAC;AAAEQ,IAAAA,IAAI,EAAE1K;AAAR,GAAD,CAD8B;AAEnCmK,EAAAA,GAAG,EAAE,CAAC;AAAEO,IAAAA,IAAI,EAAE1K;AAAR,GAAD,CAF8B;AAGnCmD,EAAAA,OAAO,EAAE,CAAC;AAAEuH,IAAAA,IAAI,EAAE1K;AAAR,GAAD,CAH0B;AAInCmL,EAAAA,UAAU,EAAE,CAAC;AAAET,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,CAAC,QAAD,CAAT;AAA5B,GAAD,CAJuB;AAKnC7C,EAAAA,WAAW,EAAE,CAAC;AAAEuB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD,CALsB;AAMnC3C,EAAAA,SAAS,EAAE,CAAC;AAAEqB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,CAAC,QAAD,CAAR;AAA5B,GAAD,CANwB;AAOnC1C,EAAAA,WAAW,EAAE,CAAC;AAAEoB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD,CAPsB;AAQnCzC,EAAAA,aAAa,EAAE,CAAC;AAAEmB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;AAA5B,GAAD,CARoB;AASnCxC,EAAAA,cAAc,EAAE,CAAC;AAAEkB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,CAAC,QAAD,CAAb;AAA5B,GAAD,CATmB;AAUnCvC,EAAAA,WAAW,EAAE,CAAC;AAAEiB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD,CAVsB;AAWnCtC,EAAAA,WAAW,EAAE,CAAC;AAAEgB,IAAAA,IAAI,EAAEzK,YAAR;AAAsB+L,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD;AAXsB,CAAvC;;AAaA,CAAC,YAAY;AAAE,GAAC,OAAOE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD3L,MAAM,CAAC4L,iBAAP,CAAyBnE,qBAAzB,EAAgD,CAAC;AAC3G0C,IAAAA,IAAI,EAAE/K,SADqG;AAE3GqM,IAAAA,IAAI,EAAE,CAAC;AACCI,MAAAA,QAAQ,EAAE,gBADX;AAECC,MAAAA,SAAS,EAAE,CACPxE,oCADO,EAEP;AAAEC,QAAAA,OAAO,EAAE1H,aAAX;AAA0B2H,QAAAA,WAAW,EAAEC,qBAAvC;AAA8DC,QAAAA,KAAK,EAAE;AAArE,OAFO;AAFZ,KAAD;AAFqG,GAAD,CAAhD,EAS1D,YAAY;AAAE,WAAO,CAAC;AAAEyC,MAAAA,IAAI,EAAEtF,SAAR;AAAmB2G,MAAAA,UAAU,EAAE,CAAC;AAC9CrB,QAAAA,IAAI,EAAE9K;AADwC,OAAD,EAE9C;AACC8K,QAAAA,IAAI,EAAE7K,MADP;AAECmM,QAAAA,IAAI,EAAE,CAACxL,oBAAD;AAFP,OAF8C;AAA/B,KAAD,EAKX;AAAEkK,MAAAA,IAAI,EAAEnK,MAAM,CAACT;AAAf,KALW,EAKkB;AAAE4K,MAAAA,IAAI,EAAEnK,MAAM,CAACR;AAAf,KALlB,CAAP;AAK6D,GAdjB,EAcmB;AAAEoD,IAAAA,OAAO,EAAE,CAAC;AACrFuH,MAAAA,IAAI,EAAE1K;AAD+E,KAAD,CAAX;AAEzEmL,IAAAA,UAAU,EAAE,CAAC;AACbT,MAAAA,IAAI,EAAEzK,YADO;AAEb+L,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,CAAC,QAAD,CAAT;AAFO,KAAD,CAF6D;AAKzE7C,IAAAA,WAAW,EAAE,CAAC;AACduB,MAAAA,IAAI,EAAEzK,YADQ;AAEd+L,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFQ,KAAD,CAL4D;AAQzE3C,IAAAA,SAAS,EAAE,CAAC;AACZqB,MAAAA,IAAI,EAAEzK,YADM;AAEZ+L,MAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,CAAC,QAAD,CAAR;AAFM,KAAD,CAR8D;AAWzE1C,IAAAA,WAAW,EAAE,CAAC;AACdoB,MAAAA,IAAI,EAAEzK,YADQ;AAEd+L,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFQ,KAAD,CAX4D;AAczEzC,IAAAA,aAAa,EAAE,CAAC;AAChBmB,MAAAA,IAAI,EAAEzK,YADU;AAEhB+L,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;AAFU,KAAD,CAd0D;AAiBzExC,IAAAA,cAAc,EAAE,CAAC;AACjBkB,MAAAA,IAAI,EAAEzK,YADW;AAEjB+L,MAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,CAAC,QAAD,CAAb;AAFW,KAAD,CAjByD;AAoBzEvC,IAAAA,WAAW,EAAE,CAAC;AACdiB,MAAAA,IAAI,EAAEzK,YADQ;AAEd+L,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFQ,KAAD,CApB4D;AAuBzEtC,IAAAA,WAAW,EAAE,CAAC;AACdgB,MAAAA,IAAI,EAAEzK,YADQ;AAEd+L,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFQ,KAAD,CAvB4D;AA0BzE9B,IAAAA,GAAG,EAAE,CAAC;AACNQ,MAAAA,IAAI,EAAE1K;AADA,KAAD,CA1BoE;AA4BzEmK,IAAAA,GAAG,EAAE,CAAC;AACNO,MAAAA,IAAI,EAAE1K;AADA,KAAD;AA5BoE,GAdnB,CAAnD;AA4CC,CA5ChB;;IA8CMsM,kB;;;;AAENA,kBAAkB,CAAClC,IAAnB,GAA0B,SAASmC,0BAAT,CAAoCjC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAIgC,kBAAV,GAAP;AAAyC,CAA5G;;AACAA,kBAAkB,CAACE,IAAnB,GAA0BjM,MAAM,CAACkM,gBAAP,CAAwB;AAAE/B,EAAAA,IAAI,EAAE4B;AAAR,CAAxB,CAA1B;AACAA,kBAAkB,CAACI,IAAnB,GAA0BnM,MAAM,CAACoM,gBAAP,CAAwB;AAAEC,EAAAA,OAAO,EAAE,CAAC,CAClDtM,YADkD,EAElDD,WAFkD,CAAD;AAAX,CAAxB,CAA1B;;AAIA,CAAC,YAAY;AAAE,GAAC,OAAOwM,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtM,MAAM,CAACuM,kBAAP,CAA0BR,kBAA1B,EAA8C;AAAES,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAAC/E,qBAAD,CAAP;AAAiC,KAA/D;AAAiE4E,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACtM,YAAD,EACvMD,WADuM,CAAP;AACjL,KADyF;AACvF2M,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAChF,qBAAD,CAAP;AAAiC;AAD+B,GAA9C,CAAnD;AACwE,CADvF;;AAEA,CAAC,YAAY;AAAE,GAAC,OAAOkE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD3L,MAAM,CAAC4L,iBAAP,CAAyBG,kBAAzB,EAA6C,CAAC;AACxG5B,IAAAA,IAAI,EAAExK,QADkG;AAExG8L,IAAAA,IAAI,EAAE,CAAC;AACCY,MAAAA,OAAO,EAAE,CACLtM,YADK,EAELD,WAFK,CADV;AAKC0M,MAAAA,YAAY,EAAE,CACV/E,qBADU,CALf;AAQCgF,MAAAA,OAAO,EAAE,CACLhF,qBADK;AARV,KAAD;AAFkG,GAAD,CAA7C,EAc1D,IAd0D,EAcpD,IAdoD,CAAnD;AAcO,CAdtB;AAgBA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASH,oCAAT,EAA+CrH,oBAA/C,EAAqEwH,qBAArE,EAA4FsE,kBAA5F,G,CAEA","sourcesContent":["import { InjectionToken, forwardRef, Directive, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as Éµngcc0 from '@angular/core';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.getSelection().anchorNode;\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue;\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n    applyMask(isNumber, rawValue) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n        if (!onlyNumbers) {\n            return \"\";\n        }\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = (rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    clearMask(rawValue) {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n    changeToPositive() {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n    fixCursorPosition(forceToEndPosition) {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        }\n        else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n    getRawValueWithoutSuffixEndPosition() {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n    getRawValueWithoutPrefixStartPosition() {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n    updateFieldValue(selectionStart) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n    handleClick(event, chromeAndroid) {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n    handleCut(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeydown(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    handleKeypress(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeyup(event) {\n        this.inputService.fixCursorPosition();\n    }\n    handlePaste(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    getNewKeyCode(oldString, newString) {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n    }\n    isArrowEndHomeKeyInFirefox(event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    }\n    isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n    setCursorPosition(event) {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        setTimeout(function () {\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\"\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleClick(event) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n    handleKeyup(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    validate(abstractControl) {\n        let result = {};\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n        return result != {} ? result : null;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers)); };\nCurrencyMaskDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: CurrencyMaskDirective, selectors: [[\"\", \"currencyMask\", \"\"]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) { return ctx.handleClick($event); })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) { return ctx.handleKeyup($event); })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); });\n    } }, inputs: { options: \"options\", max: \"max\", min: \"min\" }, features: [Éµngcc0.ÉµÉµProvidersFeature([\n            CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n            { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }\n        ])] });\nCurrencyMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CURRENCY_MASK_CONFIG,] }] },\n    { type: ElementRef },\n    { type: KeyValueDiffers }\n];\nCurrencyMaskDirective.propDecorators = {\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    options: [{ type: Input }],\n    handleBlur: [{ type: HostListener, args: [\"blur\", [\"$event\"],] }],\n    handleClick: [{ type: HostListener, args: [\"click\", [\"$event\"],] }],\n    handleCut: [{ type: HostListener, args: [\"cut\", [\"$event\"],] }],\n    handleInput: [{ type: HostListener, args: [\"input\", [\"$event\"],] }],\n    handleKeydown: [{ type: HostListener, args: [\"keydown\", [\"$event\"],] }],\n    handleKeypress: [{ type: HostListener, args: [\"keypress\", [\"$event\"],] }],\n    handleKeyup: [{ type: HostListener, args: [\"keyup\", [\"$event\"],] }],\n    handlePaste: [{ type: HostListener, args: [\"paste\", [\"$event\"],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[currencyMask]\",\n                providers: [\n                    CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n                    { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CURRENCY_MASK_CONFIG]\n            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.KeyValueDiffers }]; }, { options: [{\n            type: Input\n        }], handleBlur: [{\n            type: HostListener,\n            args: [\"blur\", [\"$event\"]]\n        }], handleClick: [{\n            type: HostListener,\n            args: [\"click\", [\"$event\"]]\n        }], handleCut: [{\n            type: HostListener,\n            args: [\"cut\", [\"$event\"]]\n        }], handleInput: [{\n            type: HostListener,\n            args: [\"input\", [\"$event\"]]\n        }], handleKeydown: [{\n            type: HostListener,\n            args: [\"keydown\", [\"$event\"]]\n        }], handleKeypress: [{\n            type: HostListener,\n            args: [\"keypress\", [\"$event\"]]\n        }], handleKeyup: [{\n            type: HostListener,\n            args: [\"keyup\", [\"$event\"]]\n        }], handlePaste: [{\n            type: HostListener,\n            args: [\"paste\", [\"$event\"]]\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }] }); })();\n\nclass CurrencyMaskModule {\n}\nCurrencyMaskModule.Éµfac = function CurrencyMaskModule_Factory(t) { return new (t || CurrencyMaskModule)(); };\nCurrencyMaskModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: CurrencyMaskModule });\nCurrencyMaskModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ imports: [[\n            CommonModule,\n            FormsModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CurrencyMaskModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule,\n        FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule\n                ],\n                declarations: [\n                    CurrencyMaskDirective\n                ],\n                exports: [\n                    CurrencyMaskDirective\n                ]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n\n//# sourceMappingURL=ng2-currency-mask.js.map"]},"metadata":{},"sourceType":"module"}