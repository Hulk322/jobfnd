{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Injectable, ElementRef, RendererFactory2 } from '@angular/core';\nimport { fromEvent, merge, of, animationFrameScheduler, Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get CSS computed property of the given element\n * @param {?} element\n * @param {?=} property\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  } // NOTE: 1 DOM access here\n\n\n  var\n  /** @type {?} */\n  window = element.ownerDocument.defaultView;\n  var\n  /** @type {?} */\n  css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Returns the parentNode or the host of the element\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n\n  return element.parentNode || element.host;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n\n    case '#document':\n      return element.body;\n\n    default:\n  } // Firefox want us to check `-x` and `-y` variations as well\n\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(String(overflow) + String(overflowY) + String(overflowX))) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nisBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\nisIE11 = isBrowser && !!(\n/** @type {?} */\nwindow.MSInputMethodContext &&\n/** @type {?} */\ndocument.documentMode);\nvar\n/** @type {?} */\nisIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n/**\n * @param {?=} version\n * @return {?}\n */\n\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n\n  if (version === 10) {\n    return isIE10;\n  }\n\n  return isIE11 || isIE10;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var\n  /** @type {?} */\n  noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here\n\n  var\n  /** @type {?} */\n  offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent\n\n  var\n  /** @type {?} */\n  sibling;\n\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    sibling = element.nextElementSibling;\n    offsetParent = sibling.offsetParent;\n  }\n\n  var\n  /** @type {?} */\n  nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return sibling ? sibling.ownerDocument.documentElement : document.documentElement;\n  } // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n\n\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element1\n * @param {?} element2\n * @return {?}\n */\n\n\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  } // Here we make sure to give as \"start\" the element that comes first in the DOM\n\n  /* tslint:disable-next-line: no-bitwise */\n\n\n  var\n  /** @type {?} */\n  order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var\n  /** @type {?} */\n  start = order ? element1 : element2;\n  var\n  /** @type {?} */\n  end = order ? element2 : element1; // Get common ancestor container\n\n  var\n  /** @type {?} */\n  range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  } // one of the nodes is inside shadowDOM, find which one\n\n\n  var\n  /** @type {?} */\n  element1root = getRoot(element1);\n\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Helper to detect borders of a given element\n */\n\n/**\n * @param {?} styles\n * @param {?} axis\n * @return {?}\n */\n\n\nfunction getBordersSize(styles, axis) {\n  var\n  /** @type {?} */\n  sideA = axis === 'x' ? 'Left' : 'Top';\n  var\n  /** @type {?} */\n  sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n  return parseFloat(styles[\"border\".concat(sideA, \"Width\")]) + parseFloat(styles[\"border\".concat(sideB, \"Width\")]);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} axis\n * @param {?} body\n * @param {?} html\n * @param {?} computedStyle\n * @return {?}\n */\n\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body[\"offset\".concat(axis)], body[\"scroll\".concat(axis)], html[\"client\".concat(axis)], html[\"offset\".concat(axis)], html[\"scroll\".concat(axis)], isIE(10) ? parseInt(html[\"offset\".concat(axis)], 10) + parseInt(computedStyle[\"margin\".concat(axis === 'Height' ? 'Top' : 'Left')], 10) + parseInt(computedStyle[\"margin\".concat(axis === 'Height' ? 'Bottom' : 'Right')], 10) : 0);\n}\n/**\n * @param {?} document\n * @return {?}\n */\n\n\nfunction getWindowSizes(document) {\n  var\n  /** @type {?} */\n  body = document.body;\n  var\n  /** @type {?} */\n  html = document.documentElement;\n  var\n  /** @type {?} */\n  computedStyle = isIE(10) && getComputedStyle(html);\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @param {?} element\n * @param {?=} side\n * @return {?}\n */\n\n\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n  var\n  /** @type {?} */\n  upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var\n  /** @type {?} */\n  nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var\n    /** @type {?} */\n    html = element.ownerDocument.documentElement;\n    var\n    /** @type {?} */\n    scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} offsets\n * @return {?}\n */\n\n\nfunction getClientRect(offsets) {\n  return Object.assign({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getBoundingClientRect(element) {\n  var\n  /** @type {?} */\n  rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var\n      /** @type {?} */\n      scrollTop = getScroll(element, 'top');\n      var\n      /** @type {?} */\n      scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (\n  /** @type {?} */\n  e) {\n    return undefined;\n  }\n\n  var\n  /** @type {?} */\n  result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  }; // subtract scrollbar size from sizes\n\n  var\n  /** @type {?} */\n  sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var\n  /** @type {?} */\n  width = sizes.width || element.clientWidth || result.right - result.left;\n  var\n  /** @type {?} */\n  height = sizes.height || element.clientHeight || result.bottom - result.top;\n  var\n  /** @type {?} */\n  horizScrollbar = element.offsetWidth - width;\n  var\n  /** @type {?} */\n  vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n\n  if (horizScrollbar || vertScrollbar) {\n    var\n    /** @type {?} */\n    styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} rect\n * @param {?} element\n * @param {?=} subtract\n * @return {?}\n */\n\n\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var\n  /** @type {?} */\n  scrollTop = getScroll(element, 'top');\n  var\n  /** @type {?} */\n  scrollLeft = getScroll(element, 'left');\n  var\n  /** @type {?} */\n  modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} children\n * @param {?} parent\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var\n  /** @type {?} */\n  isIE10 = isIE(10);\n  var\n  /** @type {?} */\n  isHTML = parent.nodeName === 'HTML';\n  var\n  /** @type {?} */\n  childrenRect = getBoundingClientRect(children);\n  var\n  /** @type {?} */\n  parentRect = getBoundingClientRect(parent);\n  var\n  /** @type {?} */\n  scrollParent = getScrollParent(children);\n  var\n  /** @type {?} */\n  styles = getStyleComputedProperty(parent);\n  var\n  /** @type {?} */\n  borderTopWidth = parseFloat(styles.borderTopWidth);\n  var\n  /** @type {?} */\n  borderLeftWidth = parseFloat(styles.borderLeftWidth); // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n\n  var\n  /** @type {?} */\n  offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n\n  if (!isIE10 && isHTML) {\n    var\n    /** @type {?} */\n    marginTop = parseFloat(styles.marginTop);\n    var\n    /** @type {?} */\n    marginLeft = parseFloat(styles.marginLeft);\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them\n\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @param {?=} excludeScroll\n * @return {?}\n */\n\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var\n  /** @type {?} */\n  html = element.ownerDocument.documentElement;\n  var\n  /** @type {?} */\n  relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var\n  /** @type {?} */\n  width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var\n  /** @type {?} */\n  height = Math.max(html.clientHeight, window.innerHeight || 0);\n  var\n  /** @type {?} */\n  scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var\n  /** @type {?} */\n  scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n  var\n  /** @type {?} */\n  offset = {\n    top: scrollTop - Number(relativeOffset.top) + Number(relativeOffset.marginTop),\n    left: scrollLeft - Number(relativeOffset.left) + Number(relativeOffset.marginLeft),\n    width: width,\n    height: height\n  };\n  return getClientRect(offset);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isFixed(element) {\n  var\n  /** @type {?} */\n  nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n\n  return isFixed(getParentNode(element));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n\n  var\n  /** @type {?} */\n  el = element.parentElement;\n\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n\n  return el || document.documentElement;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} padding\n * @param {?=} boundariesElement\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getBoundaries(target, host) {\n  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var boundariesElement = arguments.length > 3 ? arguments[3] : undefined;\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // NOTE: 1 DOM access here\n  var\n  /** @type {?} */\n  boundaries = {\n    top: 0,\n    left: 0\n  };\n  var\n  /** @type {?} */\n  offsetParent = fixedPosition ? getFixedPositionOffsetParent(target) : findCommonOffsetParent(target, host); // Handle viewport case\n\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var\n    /** @type {?} */\n    boundariesNode;\n\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(host));\n\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = target.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = target.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var\n    /** @type {?} */\n    offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation\n\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(target.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = Number(height) + Number(offsets.top);\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = Number(width) + Number(offsets.left);\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  } // Add paddings\n\n\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n  return boundaries;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width * height;\n}\n/**\n * @param {?} placement\n * @param {?} refRect\n * @param {?} target\n * @param {?} host\n * @param {?} boundariesElement\n * @param {?=} padding\n * @return {?}\n */\n\n\nfunction computeAutoPlacement(placement, refRect, target, host, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  if (placement.indexOf('auto') !== -1 && (placement.indexOf('left') !== -1 || placement.indexOf('right') !== -1 || placement.indexOf('top') !== -1 || placement.indexOf('bottom') !== -1)) {\n    return placement.split(' ')[1] || '';\n  }\n\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(target, host, padding, boundariesElement);\n  var\n  /** @type {?} */\n  rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n  var\n  /** @type {?} */\n  sortedAreas = Object.keys(rects).map(function (key) {\n    return Object.assign({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n  var\n  /** @type {?} */\n  filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= target.clientWidth && height >= target.clientHeight;\n  });\n  var\n  /** @type {?} */\n  computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n  var\n  /** @type {?} */\n  variation = placement.split(' ')[1];\n  target.className = target.className.replace(/auto/g, computedPlacement);\n  return computedPlacement + (variation ? \"-\".concat(variation) : '');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction getOffsets(data) {\n  return {\n    width: data.offsets.target.width,\n    height: data.offsets.target.height,\n    left: Math.floor(data.offsets.target.left),\n    top: Math.round(data.offsets.target.top),\n    bottom: Math.round(data.offsets.target.bottom),\n    right: Math.floor(data.offsets.target.right)\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the opposite placement of the given one\n * @param {?} placement\n * @return {?}\n */\n\n\nfunction getOppositePlacement(placement) {\n  var\n  /** @type {?} */\n  hash = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the opposite placement variation of the given one\n * @param {?} variation\n * @return {?}\n */\n\n\nfunction getOppositeVariation(variation) {\n  if (variation === 'right') {\n    return 'left';\n  } else if (variation === 'left') {\n    return 'right';\n  }\n\n  return variation;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getOuterSizes(element) {\n  var\n  /** @type {?} */\n  window = element.ownerDocument.defaultView;\n  var\n  /** @type {?} */\n  styles = window.getComputedStyle(element);\n  var\n  /** @type {?} */\n  x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var\n  /** @type {?} */\n  y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  return {\n    width: Number(element.offsetWidth) + y,\n    height: Number(element.offsetHeight) + x\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getReferenceOffsets(target, host) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var\n  /** @type {?} */\n  commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(target) : findCommonOffsetParent(target, host);\n  return getOffsetRectRelativeToArbitraryNode(host, commonOffsetParent, fixedPosition);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} hostOffsets\n * @param {?} position\n * @return {?}\n */\n\n\nfunction getTargetOffsets(target, hostOffsets, position) {\n  var\n  /** @type {?} */\n  placement = position.split(' ')[0]; // Get target node sizes\n\n  var\n  /** @type {?} */\n  targetRect = getOuterSizes(target); // Add position, width and height to our offsets object\n\n  var\n  /** @type {?} */\n  targetOffsets = {\n    width: targetRect.width,\n    height: targetRect.height\n  }; // depending by the target placement we have to compute its offsets slightly differently\n\n  var\n  /** @type {?} */\n  isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var\n  /** @type {?} */\n  mainSide = isHoriz ? 'top' : 'left';\n  var\n  /** @type {?} */\n  secondarySide = isHoriz ? 'left' : 'top';\n  var\n  /** @type {?} */\n  measurement = isHoriz ? 'height' : 'width';\n  var\n  /** @type {?} */\n  secondaryMeasurement = !isHoriz ? 'height' : 'width';\n  targetOffsets[mainSide] = hostOffsets[mainSide] + hostOffsets[measurement] / 2 - targetRect[measurement] / 2;\n  targetOffsets[secondarySide] = placement === secondarySide ? hostOffsets[secondarySide] - targetRect[secondaryMeasurement] : hostOffsets[getOppositePlacement(secondarySide)];\n  return targetOffsets;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Tells if a given input is a number\n * @param {?} n\n * @return {?}\n */\n\n\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @param {?=} renderer\n * @return {?}\n */\n\n\nfunction setAllStyles$$1(data, renderer) {\n  var\n  /** @type {?} */\n  target = data.instance.target;\n  var\n  /** @type {?} */\n  offsets = getOffsets(data);\n  setStyles(target, {\n    'will-change': 'transform',\n    top: '0px',\n    left: '0px',\n    transform: \"translate3d(\".concat(offsets.left, \"px, \").concat(offsets.top, \"px, 0px)\")\n  }, renderer);\n\n  if (data.instance.arrow) {\n    setStyles(data.instance.arrow, data.offsets.arrow, renderer);\n  }\n\n  if (data.placementAuto) {\n    if (renderer) {\n      renderer.setAttribute(target, 'class', target.className.replace(/bs-popover-auto/g, \"bs-popover-\".concat(data.placement)));\n      renderer.setAttribute(target, 'class', target.className.replace(/bs-tooltip-auto/g, \"bs-tooltip-\".concat(data.placement)));\n      renderer.setAttribute(target, 'class', target.className.replace(/\\sauto/g, \"s\".concat(data.placement)));\n\n      if (target.className.match(/popover/g)) {\n        renderer.addClass(target, 'popover-auto');\n      }\n\n      if (target.className.match(/tooltip/g)) {\n        renderer.addClass(target, 'tooltip-auto');\n      }\n    } else {\n      target.className = target.className.replace(/bs-popover-auto/g, \"bs-popover-\".concat(data.placement));\n      target.className = target.className.replace(/bs-tooltip-auto/g, \"bs-tooltip-\".concat(data.placement));\n      target.className = target.className.replace(/\\sauto/g, \"s\".concat(data.placement));\n\n      if (target.className.match(/popover/g)) {\n        target.classList.add('popover-auto');\n      }\n\n      if (target.className.match(/tooltip/g)) {\n        target.classList.add('tooltip-auto');\n      }\n    }\n  }\n\n  if (renderer) {\n    renderer.setAttribute(target, 'class', target.className.replace(/left|right|top|bottom/g, \"\".concat(data.placement)));\n  } else {\n    target.className = target.className.replace(/left|right|top|bottom/g, \"\".concat(data.placement));\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @param {?} styles\n * @param {?=} renderer\n * @return {?}\n */\n\n\nfunction setStyles(element, styles, renderer) {\n  Object.keys(styles).forEach(function (prop) {\n    var\n    /** @type {?} */\n    unit = ''; // add unit if the value is numeric and is one of the following\n\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n\n    if (renderer) {\n      renderer.setStyle(element, prop, \"\".concat(String(styles[prop])).concat(unit));\n      return;\n    }\n\n    element.style[prop] = String(styles[prop]) + unit;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction arrow(data) {\n  var _data$offsets$arrow;\n\n  var\n  /** @type {?} */\n  targetOffsets = data.offsets.target; // if arrowElement is a string, suppose it's a CSS selector\n\n  var\n  /** @type {?} */\n  arrowElement = data.instance.target.querySelector('.arrow'); // if arrowElement is not found, don't run the modifier\n\n  if (!arrowElement) {\n    return data;\n  }\n\n  var\n  /** @type {?} */\n  isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var\n  /** @type {?} */\n  len = isVertical ? 'height' : 'width';\n  var\n  /** @type {?} */\n  sideCapitalized = isVertical ? 'Top' : 'Left';\n  var\n  /** @type {?} */\n  side = sideCapitalized.toLowerCase();\n  var\n  /** @type {?} */\n  altSide = isVertical ? 'left' : 'top';\n  var\n  /** @type {?} */\n  opSide = isVertical ? 'bottom' : 'right';\n  var\n  /** @type {?} */\n  arrowElementSize = getOuterSizes(arrowElement)[len]; // top/left side\n\n  if (data.offsets.host[opSide] - arrowElementSize < targetOffsets[side]) {\n    targetOffsets[side] -= targetOffsets[side] - (data.offsets.host[opSide] - arrowElementSize);\n  } // bottom/right side\n\n\n  if (Number(data.offsets.host[side]) + Number(arrowElementSize) > targetOffsets[opSide]) {\n    targetOffsets[side] += Number(data.offsets.host[side]) + Number(arrowElementSize) - Number(targetOffsets[opSide]);\n  }\n\n  targetOffsets = getClientRect(targetOffsets); // compute center of the target\n\n  var\n  /** @type {?} */\n  center = Number(data.offsets.host[side]) + Number(data.offsets.host[len] / 2 - arrowElementSize / 2); // Compute the sideValue using the updated target offsets\n  // take target margin in account because we don't have this info available\n\n  var\n  /** @type {?} */\n  css = getStyleComputedProperty(data.instance.target);\n  var\n  /** @type {?} */\n  targetMarginSide = parseFloat(css[\"margin\".concat(sideCapitalized)]);\n  var\n  /** @type {?} */\n  targetBorderSide = parseFloat(css[\"border\".concat(sideCapitalized, \"Width\")]);\n  var\n  /** @type {?} */\n  sideValue = center - targetOffsets[side] - targetMarginSide - targetBorderSide; // prevent arrowElement from being placed not contiguously to its target\n\n  sideValue = Math.max(Math.min(targetOffsets[len] - arrowElementSize, sideValue), 0);\n  data.offsets.arrow = (_data$offsets$arrow = {}, _defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), _defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n  data.instance.arrow = arrowElement;\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction flip(data) {\n  data.offsets.target = getClientRect(data.offsets.target);\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n  'viewport', false // positionFixed\n  );\n  var\n  /** @type {?} */\n  placement = data.placement.split(' ')[0];\n  var\n  /** @type {?} */\n  variation = data.placement.split(' ')[1] || '';\n  var\n  /** @type {?} */\n  adaptivePosition = variation ? getOppositePlacement(placement) : computeAutoPlacement('auto', data.offsets.host, data.instance.target, data.instance.host, 'viewport', 0);\n  var\n  /** @type {?} */\n  flipOrder = [placement, adaptivePosition];\n  /* tslint:disable-next-line: cyclomatic-complexity */\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split(' ')[0]; // using floor because the host offsets may contain decimals we are not going to consider here\n\n    var\n    /** @type {?} */\n    overlapsRef = placement === 'left' && Math.floor(data.offsets.target.right) > Math.floor(data.offsets.host.left) || placement === 'right' && Math.floor(data.offsets.target.left) < Math.floor(data.offsets.host.right) || placement === 'top' && Math.floor(data.offsets.target.bottom) > Math.floor(data.offsets.host.top) || placement === 'bottom' && Math.floor(data.offsets.target.top) < Math.floor(data.offsets.host.bottom);\n    var\n    /** @type {?} */\n    overflowsLeft = Math.floor(data.offsets.target.left) < Math.floor(boundaries.left);\n    var\n    /** @type {?} */\n    overflowsRight = Math.floor(data.offsets.target.right) > Math.floor(boundaries.right);\n    var\n    /** @type {?} */\n    overflowsTop = Math.floor(data.offsets.target.top) < Math.floor(boundaries.top);\n    var\n    /** @type {?} */\n    overflowsBottom = Math.floor(data.offsets.target.bottom) > Math.floor(boundaries.bottom);\n    var\n    /** @type {?} */\n    overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required\n\n    var\n    /** @type {?} */\n    isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var\n    /** @type {?} */\n    flippedVariation = isVertical && variation === 'left' && overflowsLeft || isVertical && variation === 'right' && overflowsRight || !isVertical && variation === 'left' && overflowsTop || !isVertical && variation === 'right' && overflowsBottom;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? \" \".concat(variation) : '');\n      data.offsets.target = Object.assign({}, data.offsets.target, getTargetOffsets(data.instance.target, data.offsets.host, data.placement));\n    }\n  });\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} targetElement\n * @param {?} hostElement\n * @param {?} position\n * @return {?}\n */\n\n\nfunction initData(targetElement, hostElement, position) {\n  var\n  /** @type {?} */\n  hostElPosition = getReferenceOffsets(targetElement, hostElement);\n  var\n  /** @type {?} */\n  targetOffset = getTargetOffsets(targetElement, hostElPosition, position);\n  var\n  /** @type {?} */\n  placement = computeAutoPlacement(position, hostElPosition, targetElement, hostElement, 'viewport', 0);\n  var\n  /** @type {?} */\n  placementAuto = position.indexOf('auto') !== -1;\n  return {\n    instance: {\n      target: targetElement,\n      host: hostElement,\n      arrow: null\n    },\n    offsets: {\n      target: targetOffset,\n      host: hostElPosition,\n      arrow: null\n    },\n    positionFixed: false,\n    placement: placement,\n    placementAuto: placementAuto\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction preventOverflow(data) {\n  // NOTE: DOM access here\n  // resets the targetOffsets's position so that the document size can be calculated excluding\n  // the size of the targetOffsets element itself\n  var\n  /** @type {?} */\n  transformProp = 'transform';\n  var\n  /** @type {?} */\n  targetStyles = data.instance.target.style; // assignment to help minification\n\n  var top = targetStyles.top,\n      left = targetStyles.left,\n      transform = targetStyles[transformProp];\n  targetStyles.top = '';\n  targetStyles.left = '';\n  targetStyles[transformProp] = '';\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n  'scrollParent', false // positionFixed\n  ); // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n\n  targetStyles.top = top;\n  targetStyles.left = left;\n  targetStyles[transformProp] = transform;\n  var\n  /** @type {?} */\n  order = ['left', 'right', 'top', 'bottom'];\n  var\n  /** @type {?} */\n  check = {\n    /**\n     * @param {?} placement\n     * @return {?}\n     */\n    primary: function primary(placement) {\n      var\n      /** @type {?} */\n      value = data.offsets.target[placement];\n\n      if (data.offsets.target[placement] < boundaries[placement] && !false // options.escapeWithReference\n      ) {\n        value = Math.max(data.offsets.target[placement], boundaries[placement]);\n      }\n\n      return _defineProperty({}, placement, value);\n    },\n\n    /**\n     * @param {?} placement\n     * @return {?}\n     */\n    secondary: function secondary(placement) {\n      var\n      /** @type {?} */\n      mainSide = placement === 'right' ? 'left' : 'top';\n      var\n      /** @type {?} */\n      value = data.offsets.target[mainSide];\n\n      if (data.offsets.target[placement] > boundaries[placement] && !false // escapeWithReference\n      ) {\n        value = Math.min(data.offsets.target[mainSide], boundaries[placement] - (placement === 'right' ? data.offsets.target.width : data.offsets.target.height));\n      }\n\n      return _defineProperty({}, mainSide, value);\n    }\n  };\n  var\n  /** @type {?} */\n  side;\n  order.forEach(function (placement) {\n    side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    data.offsets.target = Object.assign({}, data.offsets.target, check[side](placement));\n  });\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction shift(data) {\n  var\n  /** @type {?} */\n  placement = data.placement;\n  var\n  /** @type {?} */\n  basePlacement = placement.split(' ')[0];\n  var\n  /** @type {?} */\n  shiftvariation = placement.split(' ')[1];\n\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        host = _data$offsets.host,\n        target = _data$offsets.target;\n    var\n    /** @type {?} */\n    isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var\n    /** @type {?} */\n    side = isVertical ? 'left' : 'top';\n    var\n    /** @type {?} */\n    measurement = isVertical ? 'width' : 'height';\n    var\n    /** @type {?} */\n    shiftOffsets = {\n      left: _defineProperty({}, side, host[side]),\n      right: _defineProperty({}, side, host[side] + host[measurement] - host[measurement])\n    };\n    data.offsets.target = Object.assign({}, target, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar Positioning = /*#__PURE__*/function () {\n  function Positioning() {\n    _classCallCheck(this, Positioning);\n  }\n\n  _createClass(Positioning, [{\n    key: \"position\",\n    value:\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n    function position(hostElement, targetElement) {\n      var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return this.offset(hostElement, targetElement, false);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n\n  }, {\n    key: \"offset\",\n    value: function offset(hostElement, targetElement) {\n      var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return getReferenceOffsets(targetElement, hostElement);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?} position\n     * @param {?=} appendToBody\n     * @return {?}\n     */\n\n  }, {\n    key: \"positionElements\",\n    value: function positionElements(hostElement, targetElement, position, appendToBody) {\n      var\n      /** @type {?} */\n      chainOfModifiers = [flip, shift, preventOverflow, arrow];\n      return chainOfModifiers.reduce(function (modifiedData, modifier) {\n        return modifier(modifiedData);\n      }, initData(targetElement, hostElement, position));\n    }\n  }]);\n\n  return Positioning;\n}();\n\nvar\n/** @type {?} */\npositionService = new Positioning();\n/**\n * @param {?} hostElement\n * @param {?} targetElement\n * @param {?} placement\n * @param {?=} appendToBody\n * @param {?=} renderer\n * @return {?}\n */\n\nfunction positionElements(hostElement, targetElement, placement, appendToBody, renderer) {\n  var\n  /** @type {?} */\n  data = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n  setAllStyles$$1(data, renderer);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar PositioningService = /*#__PURE__*/function () {\n  /**\n   * @param {?} rendererFactory\n   */\n  function PositioningService(rendererFactory) {\n    var _this = this;\n\n    _classCallCheck(this, PositioningService);\n\n    this.update$$ = new Subject();\n    this.events$ = merge(fromEvent(window, 'scroll'), fromEvent(window, 'resize'), of(0, animationFrameScheduler), this.update$$);\n    this.positionElements = new Map();\n    this.events$.subscribe(function () {\n      _this.positionElements.forEach(function (positionElement) {\n        positionElements(_getHtmlElement(positionElement.target), _getHtmlElement(positionElement.element), positionElement.attachment, positionElement.appendToBody, rendererFactory.createRenderer(null, null));\n      });\n    });\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(PositioningService, [{\n    key: \"position\",\n    value: function position(options) {\n      this.addPositionElement(options);\n      this.update$$.next();\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"addPositionElement\",\n    value: function addPositionElement(options) {\n      this.positionElements.set(_getHtmlElement(options.element), options);\n    }\n    /**\n     * @param {?} elRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"deletePositionElement\",\n    value: function deletePositionElement(elRef) {\n      this.positionElements.delete(_getHtmlElement(elRef));\n    }\n  }]);\n\n  return PositioningService;\n}();\n\nPositioningService.Éµfac = function PositioningService_Factory(t) {\n  return new (t || PositioningService)(Éµngcc0.ÉµÉµinject(Éµngcc0.RendererFactory2));\n};\n\nPositioningService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: PositioningService,\n  factory: PositioningService.Éµfac\n});\n/** @nocollapse */\n\nPositioningService.ctorParameters = function () {\n  return [{\n    type: RendererFactory2\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PositioningService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Éµngcc0.RendererFactory2\n    }];\n  }, null);\n})();\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction _getHtmlElement(element) {\n  // it means that we got a selector\n  if (typeof element === 'string') {\n    return document.querySelector(element);\n  }\n\n  if (element instanceof ElementRef) {\n    return element.nativeElement;\n  }\n\n  return element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { positionElements, Positioning, PositioningService }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ngx-bootstrap/__ivy_ngcc__/positioning/fesm2015/ngx-bootstrap-positioning.js"],"names":["Injectable","ElementRef","RendererFactory2","fromEvent","merge","of","animationFrameScheduler","Subject","Éµngcc0","getStyleComputedProperty","element","property","nodeType","window","ownerDocument","defaultView","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","document","body","overflow","overflowX","overflowY","test","String","isBrowser","isIE11","MSInputMethodContext","documentMode","isIE10","navigator","userAgent","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","sibling","nextElementSibling","indexOf","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","html","computedStyle","Math","max","parseInt","getWindowSizes","height","width","getScroll","side","upperSide","scrollingElement","getClientRect","offsets","Object","assign","right","left","bottom","top","getBoundingClientRect","rect","scrollTop","scrollLeft","e","undefined","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","includeScroll","subtract","modifier","getOffsetRectRelativeToArbitraryNode","children","parent","fixedPosition","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","getViewportOffsetRectRelativeToArtbitraryNode","excludeScroll","relativeOffset","innerWidth","innerHeight","offset","Number","isFixed","getFixedPositionOffsetParent","parentElement","el","getBoundaries","target","padding","boundariesElement","boundaries","boundariesNode","getArea","computeAutoPlacement","placement","refRect","split","rects","sortedAreas","keys","map","key","area","sort","a","b","filteredAreas","filter","computedPlacement","length","variation","className","replace","getOffsets","data","floor","round","getOppositePlacement","hash","matched","getOppositeVariation","getOuterSizes","x","marginBottom","y","marginRight","getReferenceOffsets","commonOffsetParent","getTargetOffsets","hostOffsets","position","targetRect","targetOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","isNumeric","n","isNaN","isFinite","setAllStyles$$1","renderer","instance","setStyles","transform","arrow","placementAuto","setAttribute","match","addClass","classList","add","forEach","prop","unit","setStyle","style","arrowElement","querySelector","isVertical","len","sideCapitalized","toLowerCase","altSide","opSide","arrowElementSize","center","targetMarginSide","targetBorderSide","sideValue","min","flip","adaptivePosition","flipOrder","step","index","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","initData","targetElement","hostElement","hostElPosition","targetOffset","positionFixed","preventOverflow","transformProp","targetStyles","check","primary","value","secondary","shift","basePlacement","shiftvariation","shiftOffsets","Positioning","appendToBody","chainOfModifiers","reduce","modifiedData","positionService","positionElements","PositioningService","rendererFactory","update$$","events$","Map","subscribe","positionElement","_getHtmlElement","attachment","createRenderer","options","addPositionElement","next","set","elRef","delete","Éµfac","PositioningService_Factory","t","ÉµÉµinject","Éµprov","ÉµÉµdefineInjectable","token","factory","ctorParameters","type","ngDevMode","ÉµsetClassMetadata","nativeElement"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,gBAAjC,QAAyD,eAAzD;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,EAA3B,EAA+BC,uBAA/B,EAAwDC,OAAxD,QAAuE,MAAvE;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AACA,SAASC,wBAAT,CAAkCC,OAAlC,EAA2CC,QAA3C,EAAqD;AACjD,MAAID,OAAO,CAACE,QAAR,KAAqB,CAAzB,EAA4B;AACxB,WAAO,EAAP;AACH,GAHgD,CAIjD;;;AACA;AAAM;AAAiBC,EAAAA,MAAM,GAAGH,OAAO,CAACI,aAAR,CAAsBC,WAAtD;AACA;AAAM;AAAiBC,EAAAA,GAAG,GAAGH,MAAM,CAACI,gBAAP,CAAwBP,OAAxB,EAAiC,IAAjC,CAA7B;AACA,SAAOC,QAAQ,GAAGK,GAAG,CAACL,QAAD,CAAN,GAAmBK,GAAlC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBR,OAAvB,EAAgC;AAC5B,MAAIA,OAAO,CAACS,QAAR,KAAqB,MAAzB,EAAiC;AAC7B,WAAOT,OAAP;AACH;;AACD,SAAOA,OAAO,CAACU,UAAR,IAAsBV,OAAO,CAACW,IAArC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBZ,OAAzB,EAAkC;AAC9B;AACA,MAAI,CAACA,OAAL,EAAc;AACV,WAAOa,QAAQ,CAACC,IAAhB;AACH;;AACD,UAAQd,OAAO,CAACS,QAAhB;AACI,SAAK,MAAL;AACA,SAAK,MAAL;AACI,aAAOT,OAAO,CAACI,aAAR,CAAsBU,IAA7B;;AACJ,SAAK,WAAL;AACI,aAAOd,OAAO,CAACc,IAAf;;AACJ;AANJ,GAL8B,CAa9B;;;AACA,8BAA2Cf,wBAAwB,CAACC,OAAD,CAAnE;AAAA,MAAQe,QAAR,yBAAQA,QAAR;AAAA,MAAkBC,SAAlB,yBAAkBA,SAAlB;AAAA,MAA6BC,SAA7B,yBAA6BA,SAA7B;;AACA,MAAI,wBAAwBC,IAAxB,CAA6BC,MAAM,CAACJ,QAAD,CAAN,GAAmBI,MAAM,CAACF,SAAD,CAAzB,GAAuCE,MAAM,CAACH,SAAD,CAA1E,CAAJ,EAA4F;AACxF,WAAOhB,OAAP;AACH;;AACD,SAAOY,eAAe,CAACJ,aAAa,CAACR,OAAD,CAAd,CAAtB;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBoB,SAAS,GAAG,OAAOjB,MAAP,KAAkB,WAAlB,IAAiC,OAAOU,QAAP,KAAoB,WAAxF;AAEA;AACA;AACA;AACA;;AACA;AAAM;AAAiBQ,MAAM,GAAGD,SAAS,IAAI,CAAC;AAAG;AAAkBjB,MAAnB,CAA4BmB,oBAA5B;AAAqD;AAAkBT,QAAnB,CAA8BU,YAApF,CAA9C;AACA;AAAM;AAAiBC,MAAM,GAAGJ,SAAS,IAAI,UAAUF,IAAV,CAAeO,SAAS,CAACC,SAAzB,CAA7C;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACnB,MAAIA,OAAO,KAAK,EAAhB,EAAoB;AAChB,WAAOP,MAAP;AACH;;AACD,MAAIO,OAAO,KAAK,EAAhB,EAAoB;AAChB,WAAOJ,MAAP;AACH;;AACD,SAAOH,MAAM,IAAIG,MAAjB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASK,eAAT,CAAyB7B,OAAzB,EAAkC;AAC9B,MAAI,CAACA,OAAL,EAAc;AACV,WAAOa,QAAQ,CAACiB,eAAhB;AACH;;AACD;AAAM;AAAiBC,EAAAA,cAAc,GAAGJ,IAAI,CAAC,EAAD,CAAJ,GAAWd,QAAQ,CAACC,IAApB,GAA2B,IAAnE,CAJ8B,CAK9B;;AACA;AAAI;AAAiBkB,EAAAA,YAAY,GAAGhC,OAAO,CAACgC,YAAR,IAAwB,IAA5D,CAN8B,CAO9B;;AACA;AAAI;AAAiBC,EAAAA,OAArB;;AACA,SAAOD,YAAY,KAAKD,cAAjB,IAAmC/B,OAAO,CAACkC,kBAAlD,EAAsE;AAClED,IAAAA,OAAO,GAAGjC,OAAO,CAACkC,kBAAlB;AACAF,IAAAA,YAAY,GAAGC,OAAO,CAACD,YAAvB;AACH;;AACD;AAAM;AAAiBvB,EAAAA,QAAQ,GAAGuB,YAAY,IAAIA,YAAY,CAACvB,QAA/D;;AACA,MAAI,CAACA,QAAD,IAAaA,QAAQ,KAAK,MAA1B,IAAoCA,QAAQ,KAAK,MAArD,EAA6D;AACzD,WAAOwB,OAAO,GAAGA,OAAO,CAAC7B,aAAR,CAAsB0B,eAAzB,GAA2CjB,QAAQ,CAACiB,eAAlE;AACH,GAhB6B,CAiB9B;AACA;;;AACA,MAAI,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,EAAsBK,OAAtB,CAA8BH,YAAY,CAACvB,QAA3C,MAAyD,CAAC,CAA1D,IACAV,wBAAwB,CAACiC,YAAD,EAAe,UAAf,CAAxB,KAAuD,QAD3D,EACqE;AACjE,WAAOH,eAAe,CAACG,YAAD,CAAtB;AACH;;AACD,SAAOA,YAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASI,iBAAT,CAA2BpC,OAA3B,EAAoC;AAChC,MAAQS,QAAR,GAAqBT,OAArB,CAAQS,QAAR;;AACA,MAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACrB,WAAO,KAAP;AACH;;AACD,SAAQA,QAAQ,KAAK,MAAb,IAAuBoB,eAAe,CAAC7B,OAAO,CAACqC,iBAAT,CAAf,KAA+CrC,OAA9E;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,MAAIA,IAAI,CAAC7B,UAAL,KAAoB,IAAxB,EAA8B;AAC1B,WAAO4B,OAAO,CAACC,IAAI,CAAC7B,UAAN,CAAd;AACH;;AACD,SAAO6B,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AAChD;AACA,MAAI,CAACD,QAAD,IAAa,CAACA,QAAQ,CAACvC,QAAvB,IAAmC,CAACwC,QAApC,IAAgD,CAACA,QAAQ,CAACxC,QAA9D,EAAwE;AACpE,WAAOW,QAAQ,CAACiB,eAAhB;AACH,GAJ+C,CAKhD;;AACA;;;AACA;AAAM;AAAiBa,EAAAA,KAAK,GAAGF,QAAQ,CAACG,uBAAT,CAAiCF,QAAjC,IAA6CG,IAAI,CAACC,2BAAjF;AACA;AAAM;AAAiBC,EAAAA,KAAK,GAAGJ,KAAK,GAAGF,QAAH,GAAcC,QAAlD;AACA;AAAM;AAAiBM,EAAAA,GAAG,GAAGL,KAAK,GAAGD,QAAH,GAAcD,QAAhD,CATgD,CAUhD;;AACA;AAAM;AAAiBQ,EAAAA,KAAK,GAAGpC,QAAQ,CAACqC,WAAT,EAA/B;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAeJ,KAAf,EAAsB,CAAtB;AACAE,EAAAA,KAAK,CAACG,MAAN,CAAaJ,GAAb,EAAkB,CAAlB;AACA,MAAQK,uBAAR,GAAoCJ,KAApC,CAAQI,uBAAR,CAdgD,CAehD;;AACA,MAAKZ,QAAQ,KAAKY,uBAAb,IACDX,QAAQ,KAAKW,uBADb,IAEAN,KAAK,CAACO,QAAN,CAAeN,GAAf,CAFJ,EAEyB;AACrB,QAAIZ,iBAAiB,CAACiB,uBAAD,CAArB,EAAgD;AAC5C,aAAOA,uBAAP;AACH;;AACD,WAAOxB,eAAe,CAACwB,uBAAD,CAAtB;AACH,GAvB+C,CAwBhD;;;AACA;AAAM;AAAiBE,EAAAA,YAAY,GAAGjB,OAAO,CAACG,QAAD,CAA7C;;AACA,MAAIc,YAAY,CAAC5C,IAAjB,EAAuB;AACnB,WAAO6B,sBAAsB,CAACe,YAAY,CAAC5C,IAAd,EAAoB+B,QAApB,CAA7B;AACH,GAFD,MAGK;AACD,WAAOF,sBAAsB,CAACC,QAAD,EAAWH,OAAO,CAACI,QAAD,CAAP,CAAkB/B,IAA7B,CAA7B;AACH;AACJ;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6C,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AAClC;AAAM;AAAiBC,EAAAA,KAAK,GAAGD,IAAI,KAAK,GAAT,GAAe,MAAf,GAAwB,KAAvD;AACA;AAAM;AAAiBE,EAAAA,KAAK,GAAGD,KAAK,KAAK,MAAV,GAAmB,OAAnB,GAA6B,QAA5D;AACA,SAAQE,UAAU,CAACJ,MAAM,iBAAUE,KAAV,WAAP,CAAV,GACJE,UAAU,CAACJ,MAAM,iBAAUG,KAAV,WAAP,CADd;AAEH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBJ,IAAjB,EAAuB5C,IAAvB,EAA6BiD,IAA7B,EAAmCC,aAAnC,EAAkD;AAC9C,SAAOC,IAAI,CAACC,GAAL,CAASpD,IAAI,iBAAU4C,IAAV,EAAb,EAAgC5C,IAAI,iBAAU4C,IAAV,EAApC,EAAuDK,IAAI,iBAAUL,IAAV,EAA3D,EAA8EK,IAAI,iBAAUL,IAAV,EAAlF,EAAqGK,IAAI,iBAAUL,IAAV,EAAzG,EAA4H/B,IAAI,CAAC,EAAD,CAAJ,GAC5HwC,QAAQ,CAACJ,IAAI,iBAAUL,IAAV,EAAL,EAAwB,EAAxB,CAAR,GACCS,QAAQ,CAACH,aAAa,iBAAUN,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,MAAtC,EAAd,EAA+D,EAA/D,CADT,GAECS,QAAQ,CAACH,aAAa,iBAAUN,IAAI,KAAK,QAAT,GAAoB,QAApB,GAA+B,OAAzC,EAAd,EAAmE,EAAnE,CAHmH,GAI7H,CAJC,CAAP;AAKH;AACD;AACA;AACA;AACA;;;AACA,SAASU,cAAT,CAAwBvD,QAAxB,EAAkC;AAC9B;AAAM;AAAiBC,EAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAvC;AACA;AAAM;AAAiBiD,EAAAA,IAAI,GAAGlD,QAAQ,CAACiB,eAAvC;AACA;AAAM;AAAiBkC,EAAAA,aAAa,GAAGrC,IAAI,CAAC,EAAD,CAAJ,IAAYpB,gBAAgB,CAACwD,IAAD,CAAnE;AACA,SAAO;AACHM,IAAAA,MAAM,EAAEP,OAAO,CAAC,QAAD,EAAWhD,IAAX,EAAiBiD,IAAjB,EAAuBC,aAAvB,CADZ;AAEHM,IAAAA,KAAK,EAAER,OAAO,CAAC,OAAD,EAAUhD,IAAV,EAAgBiD,IAAhB,EAAsBC,aAAtB;AAFX,GAAP;AAIH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,SAAT,CAAmBvE,OAAnB,EAA0C;AAAA,MAAdwE,IAAc,uEAAP,KAAO;AACtC;AAAM;AAAiBC,EAAAA,SAAS,GAAGD,IAAI,KAAK,KAAT,GAAiB,WAAjB,GAA+B,YAAlE;AACA;AAAM;AAAiB/D,EAAAA,QAAQ,GAAGT,OAAO,CAACS,QAA1C;;AACA,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,MAAxC,EAAgD;AAC5C;AAAM;AAAiBsD,IAAAA,IAAI,GAAG/D,OAAO,CAACI,aAAR,CAAsB0B,eAApD;AACA;AAAM;AAAiB4C,IAAAA,gBAAgB,GAAG1E,OAAO,CAACI,aAAR,CAAsBsE,gBAAtB,IAA0CX,IAApF;AACA,WAAOW,gBAAgB,CAACD,SAAD,CAAvB;AACH;;AACD,SAAOzE,OAAO,CAACyE,SAAD,CAAd;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAAEG,IAAAA,KAAK,EAAEH,OAAO,CAACI,IAAR,GAAeJ,OAAO,CAACN,KAAhC;AAAuCW,IAAAA,MAAM,EAAEL,OAAO,CAACM,GAAR,GAAcN,OAAO,CAACP;AAArE,GAA3B,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASc,qBAAT,CAA+BnF,OAA/B,EAAwC;AACpC;AAAI;AAAiBoF,EAAAA,IAAI,GAAG,EAA5B,CADoC,CAEpC;AACA;AACA;;AACA,MAAI;AACA,QAAIzD,IAAI,CAAC,EAAD,CAAR,EAAc;AACVyD,MAAAA,IAAI,GAAGpF,OAAO,CAACmF,qBAAR,EAAP;AACA;AAAM;AAAiBE,MAAAA,SAAS,GAAGd,SAAS,CAACvE,OAAD,EAAU,KAAV,CAA5C;AACA;AAAM;AAAiBsF,MAAAA,UAAU,GAAGf,SAAS,CAACvE,OAAD,EAAU,MAAV,CAA7C;AACAoF,MAAAA,IAAI,CAACF,GAAL,IAAYG,SAAZ;AACAD,MAAAA,IAAI,CAACJ,IAAL,IAAaM,UAAb;AACAF,MAAAA,IAAI,CAACH,MAAL,IAAeI,SAAf;AACAD,MAAAA,IAAI,CAACL,KAAL,IAAcO,UAAd;AACH,KARD,MASK;AACDF,MAAAA,IAAI,GAAGpF,OAAO,CAACmF,qBAAR,EAAP;AACH;AACJ,GAbD,CAcA;AAAO;AAAiBI,EAAAA,CAAxB,EAA2B;AACvB,WAAOC,SAAP;AACH;;AACD;AAAM;AAAiBC,EAAAA,MAAM,GAAG;AAC5BT,IAAAA,IAAI,EAAEI,IAAI,CAACJ,IADiB;AAE5BE,IAAAA,GAAG,EAAEE,IAAI,CAACF,GAFkB;AAG5BZ,IAAAA,KAAK,EAAEc,IAAI,CAACL,KAAL,GAAaK,IAAI,CAACJ,IAHG;AAI5BX,IAAAA,MAAM,EAAEe,IAAI,CAACH,MAAL,GAAcG,IAAI,CAACF;AAJC,GAAhC,CAtBoC,CA4BpC;;AACA;AAAM;AAAiBQ,EAAAA,KAAK,GAAG1F,OAAO,CAACS,QAAR,KAAqB,MAArB,GAA8B2D,cAAc,CAACpE,OAAO,CAACI,aAAT,CAA5C,GAAsE,EAArG;AACA;AAAM;AAAiBkE,EAAAA,KAAK,GAAGoB,KAAK,CAACpB,KAAN,IAAetE,OAAO,CAAC2F,WAAvB,IAAsCF,MAAM,CAACV,KAAP,GAAeU,MAAM,CAACT,IAA3F;AACA;AAAM;AAAiBX,EAAAA,MAAM,GAAGqB,KAAK,CAACrB,MAAN,IAAgBrE,OAAO,CAAC4F,YAAxB,IAAwCH,MAAM,CAACR,MAAP,GAAgBQ,MAAM,CAACP,GAA/F;AACA;AAAI;AAAiBW,EAAAA,cAAc,GAAG7F,OAAO,CAAC8F,WAAR,GAAsBxB,KAA5D;AACA;AAAI;AAAiByB,EAAAA,aAAa,GAAG/F,OAAO,CAACgG,YAAR,GAAuB3B,MAA5D,CAjCoC,CAkCpC;AACA;;AACA,MAAIwB,cAAc,IAAIE,aAAtB,EAAqC;AACjC;AAAM;AAAiBtC,IAAAA,MAAM,GAAG1D,wBAAwB,CAACC,OAAD,CAAxD;AACA6F,IAAAA,cAAc,IAAIrC,cAAc,CAACC,MAAD,EAAS,GAAT,CAAhC;AACAsC,IAAAA,aAAa,IAAIvC,cAAc,CAACC,MAAD,EAAS,GAAT,CAA/B;AACAgC,IAAAA,MAAM,CAACnB,KAAP,IAAgBuB,cAAhB;AACAJ,IAAAA,MAAM,CAACpB,MAAP,IAAiB0B,aAAjB;AACH;;AACD,SAAOpB,aAAa,CAACc,MAAD,CAApB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,aAAT,CAAuBb,IAAvB,EAA6BpF,OAA7B,EAAwD;AAAA,MAAlBkG,QAAkB,uEAAP,KAAO;AACpD;AAAM;AAAiBb,EAAAA,SAAS,GAAGd,SAAS,CAACvE,OAAD,EAAU,KAAV,CAA5C;AACA;AAAM;AAAiBsF,EAAAA,UAAU,GAAGf,SAAS,CAACvE,OAAD,EAAU,MAAV,CAA7C;AACA;AAAM;AAAiBmG,EAAAA,QAAQ,GAAGD,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAlD;AACAd,EAAAA,IAAI,CAACF,GAAL,IAAYG,SAAS,GAAGc,QAAxB;AACAf,EAAAA,IAAI,CAACH,MAAL,IAAeI,SAAS,GAAGc,QAA3B;AACAf,EAAAA,IAAI,CAACJ,IAAL,IAAaM,UAAU,GAAGa,QAA1B;AACAf,EAAAA,IAAI,CAACL,KAAL,IAAcO,UAAU,GAAGa,QAA3B;AACA,SAAOf,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,oCAAT,CAA8CC,QAA9C,EAAwDC,MAAxD,EAAuF;AAAA,MAAvBC,aAAuB,uEAAP,KAAO;AACnF;AAAM;AAAiB/E,EAAAA,MAAM,GAAGG,IAAI,CAAC,EAAD,CAApC;AACA;AAAM;AAAiB6E,EAAAA,MAAM,GAAGF,MAAM,CAAC7F,QAAP,KAAoB,MAApD;AACA;AAAM;AAAiBgG,EAAAA,YAAY,GAAGtB,qBAAqB,CAACkB,QAAD,CAA3D;AACA;AAAM;AAAiBK,EAAAA,UAAU,GAAGvB,qBAAqB,CAACmB,MAAD,CAAzD;AACA;AAAM;AAAiBK,EAAAA,YAAY,GAAG/F,eAAe,CAACyF,QAAD,CAArD;AACA;AAAM;AAAiB5C,EAAAA,MAAM,GAAG1D,wBAAwB,CAACuG,MAAD,CAAxD;AACA;AAAM;AAAiBM,EAAAA,cAAc,GAAG/C,UAAU,CAACJ,MAAM,CAACmD,cAAR,CAAlD;AACA;AAAM;AAAiBC,EAAAA,eAAe,GAAGhD,UAAU,CAACJ,MAAM,CAACoD,eAAR,CAAnD,CARmF,CASnF;;AACA,MAAIN,aAAa,IAAIC,MAArB,EAA6B;AACzBE,IAAAA,UAAU,CAACxB,GAAX,GAAiBjB,IAAI,CAACC,GAAL,CAASwC,UAAU,CAACxB,GAApB,EAAyB,CAAzB,CAAjB;AACAwB,IAAAA,UAAU,CAAC1B,IAAX,GAAkBf,IAAI,CAACC,GAAL,CAASwC,UAAU,CAAC1B,IAApB,EAA0B,CAA1B,CAAlB;AACH;;AACD;AAAI;AAAiBJ,EAAAA,OAAO,GAAGD,aAAa,CAAC;AACzCO,IAAAA,GAAG,EAAEuB,YAAY,CAACvB,GAAb,GAAmBwB,UAAU,CAACxB,GAA9B,GAAoC0B,cADA;AAEzC5B,IAAAA,IAAI,EAAEyB,YAAY,CAACzB,IAAb,GAAoB0B,UAAU,CAAC1B,IAA/B,GAAsC6B,eAFH;AAGzCvC,IAAAA,KAAK,EAAEmC,YAAY,CAACnC,KAHqB;AAIzCD,IAAAA,MAAM,EAAEoC,YAAY,CAACpC;AAJoB,GAAD,CAA5C;AAMAO,EAAAA,OAAO,CAACkC,SAAR,GAAoB,CAApB;AACAlC,EAAAA,OAAO,CAACmC,UAAR,GAAqB,CAArB,CArBmF,CAsBnF;AACA;AACA;AACA;;AACA,MAAI,CAACvF,MAAD,IAAWgF,MAAf,EAAuB;AACnB;AAAM;AAAiBM,IAAAA,SAAS,GAAGjD,UAAU,CAACJ,MAAM,CAACqD,SAAR,CAA7C;AACA;AAAM;AAAiBC,IAAAA,UAAU,GAAGlD,UAAU,CAACJ,MAAM,CAACsD,UAAR,CAA9C;AACAnC,IAAAA,OAAO,CAACM,GAAR,IAAe0B,cAAc,GAAGE,SAAhC;AACAlC,IAAAA,OAAO,CAACK,MAAR,IAAkB2B,cAAc,GAAGE,SAAnC;AACAlC,IAAAA,OAAO,CAACI,IAAR,IAAgB6B,eAAe,GAAGE,UAAlC;AACAnC,IAAAA,OAAO,CAACG,KAAR,IAAiB8B,eAAe,GAAGE,UAAnC,CANmB,CAOnB;;AACAnC,IAAAA,OAAO,CAACkC,SAAR,GAAoBA,SAApB;AACAlC,IAAAA,OAAO,CAACmC,UAAR,GAAqBA,UAArB;AACH;;AACD,MAAIvF,MAAM,IAAI,CAAC+E,aAAX,GACED,MAAM,CAAChD,QAAP,CAAgBqD,YAAhB,CADF,GAEEL,MAAM,KAAKK,YAAX,IAA2BA,YAAY,CAAClG,QAAb,KAA0B,MAF3D,EAEmE;AAC/DmE,IAAAA,OAAO,GAAGqB,aAAa,CAACrB,OAAD,EAAU0B,MAAV,CAAvB;AACH;;AACD,SAAO1B,OAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoC,6CAAT,CAAuDhH,OAAvD,EAAuF;AAAA,MAAvBiH,aAAuB,uEAAP,KAAO;AACnF;AAAM;AAAiBlD,EAAAA,IAAI,GAAG/D,OAAO,CAACI,aAAR,CAAsB0B,eAApD;AACA;AAAM;AAAiBoF,EAAAA,cAAc,GAAGd,oCAAoC,CAACpG,OAAD,EAAU+D,IAAV,CAA5E;AACA;AAAM;AAAiBO,EAAAA,KAAK,GAAGL,IAAI,CAACC,GAAL,CAASH,IAAI,CAAC4B,WAAd,EAA2BxF,MAAM,CAACgH,UAAP,IAAqB,CAAhD,CAA/B;AACA;AAAM;AAAiB9C,EAAAA,MAAM,GAAGJ,IAAI,CAACC,GAAL,CAASH,IAAI,CAAC6B,YAAd,EAA4BzF,MAAM,CAACiH,WAAP,IAAsB,CAAlD,CAAhC;AACA;AAAM;AAAiB/B,EAAAA,SAAS,GAAG,CAAC4B,aAAD,GAAiB1C,SAAS,CAACR,IAAD,CAA1B,GAAmC,CAAtE;AACA;AAAM;AAAiBuB,EAAAA,UAAU,GAAG,CAAC2B,aAAD,GAAiB1C,SAAS,CAACR,IAAD,EAAO,MAAP,CAA1B,GAA2C,CAA/E;AACA;AAAM;AAAiBsD,EAAAA,MAAM,GAAG;AAC5BnC,IAAAA,GAAG,EAAEG,SAAS,GAAGiC,MAAM,CAACJ,cAAc,CAAChC,GAAhB,CAAlB,GAAyCoC,MAAM,CAACJ,cAAc,CAACJ,SAAhB,CADxB;AAE5B9B,IAAAA,IAAI,EAAEM,UAAU,GAAGgC,MAAM,CAACJ,cAAc,CAAClC,IAAhB,CAAnB,GAA2CsC,MAAM,CAACJ,cAAc,CAACH,UAAhB,CAF3B;AAG5BzC,IAAAA,KAAK,EAALA,KAH4B;AAI5BD,IAAAA,MAAM,EAANA;AAJ4B,GAAhC;AAMA,SAAOM,aAAa,CAAC0C,MAAD,CAApB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBvH,OAAjB,EAA0B;AACtB;AAAM;AAAiBS,EAAAA,QAAQ,GAAGT,OAAO,CAACS,QAA1C;;AACA,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,MAAxC,EAAgD;AAC5C,WAAO,KAAP;AACH;;AACD,MAAIV,wBAAwB,CAACC,OAAD,EAAU,UAAV,CAAxB,KAAkD,OAAtD,EAA+D;AAC3D,WAAO,IAAP;AACH;;AACD,SAAOuH,OAAO,CAAC/G,aAAa,CAACR,OAAD,CAAd,CAAd;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASwH,4BAAT,CAAsCxH,OAAtC,EAA+C;AAC3C;AACA,MAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACyH,aAArB,IAAsC9F,IAAI,EAA9C,EAAkD;AAC9C,WAAOd,QAAQ,CAACiB,eAAhB;AACH;;AACD;AAAI;AAAiB4F,EAAAA,EAAE,GAAG1H,OAAO,CAACyH,aAAlC;;AACA,SAAOC,EAAE,IAAI3H,wBAAwB,CAAC2H,EAAD,EAAK,WAAL,CAAxB,KAA8C,MAA3D,EAAmE;AAC/DA,IAAAA,EAAE,GAAGA,EAAE,CAACD,aAAR;AACH;;AACD,SAAOC,EAAE,IAAI7G,QAAQ,CAACiB,eAAtB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6F,aAAT,CAAuBC,MAAvB,EAA+BjH,IAA/B,EAA4F;AAAA,MAAvDkH,OAAuD,uEAA7C,CAA6C;AAAA,MAA1CC,iBAA0C;AAAA,MAAvBvB,aAAuB,uEAAP,KAAO;AACxF;AACA;AAAI;AAAiBwB,EAAAA,UAAU,GAAG;AAAE7C,IAAAA,GAAG,EAAE,CAAP;AAAUF,IAAAA,IAAI,EAAE;AAAhB,GAAlC;AACA;AAAM;AAAiBhD,EAAAA,YAAY,GAAGuE,aAAa,GAAGiB,4BAA4B,CAACI,MAAD,CAA/B,GAA0CpF,sBAAsB,CAACoF,MAAD,EAASjH,IAAT,CAAnH,CAHwF,CAIxF;;AACA,MAAImH,iBAAiB,KAAK,UAA1B,EAAsC;AAClCC,IAAAA,UAAU,GAAGf,6CAA6C,CAAChF,YAAD,EAAeuE,aAAf,CAA1D;AACH,GAFD,MAGK;AACD;AACA;AAAI;AAAiByB,IAAAA,cAArB;;AACA,QAAIF,iBAAiB,KAAK,cAA1B,EAA0C;AACtCE,MAAAA,cAAc,GAAGpH,eAAe,CAACJ,aAAa,CAACG,IAAD,CAAd,CAAhC;;AACA,UAAIqH,cAAc,CAACvH,QAAf,KAA4B,MAAhC,EAAwC;AACpCuH,QAAAA,cAAc,GAAGJ,MAAM,CAACxH,aAAP,CAAqB0B,eAAtC;AACH;AACJ,KALD,MAMK,IAAIgG,iBAAiB,KAAK,QAA1B,EAAoC;AACrCE,MAAAA,cAAc,GAAGJ,MAAM,CAACxH,aAAP,CAAqB0B,eAAtC;AACH,KAFI,MAGA;AACDkG,MAAAA,cAAc,GAAGF,iBAAjB;AACH;;AACD;AAAM;AAAiBlD,IAAAA,OAAO,GAAGwB,oCAAoC,CAAC4B,cAAD,EAAiBhG,YAAjB,EAA+BuE,aAA/B,CAArE,CAfC,CAgBD;;AACA,QAAIyB,cAAc,CAACvH,QAAf,KAA4B,MAA5B,IAAsC,CAAC8G,OAAO,CAACvF,YAAD,CAAlD,EAAkE;AAC9D,4BAA0BoC,cAAc,CAACwD,MAAM,CAACxH,aAAR,CAAxC;AAAA,UAAQiE,MAAR,mBAAQA,MAAR;AAAA,UAAgBC,KAAhB,mBAAgBA,KAAhB;;AACAyD,MAAAA,UAAU,CAAC7C,GAAX,IAAkBN,OAAO,CAACM,GAAR,GAAcN,OAAO,CAACkC,SAAxC;AACAiB,MAAAA,UAAU,CAAC9C,MAAX,GAAoBqC,MAAM,CAACjD,MAAD,CAAN,GAAiBiD,MAAM,CAAC1C,OAAO,CAACM,GAAT,CAA3C;AACA6C,MAAAA,UAAU,CAAC/C,IAAX,IAAmBJ,OAAO,CAACI,IAAR,GAAeJ,OAAO,CAACmC,UAA1C;AACAgB,MAAAA,UAAU,CAAChD,KAAX,GAAmBuC,MAAM,CAAChD,KAAD,CAAN,GAAgBgD,MAAM,CAAC1C,OAAO,CAACI,IAAT,CAAzC;AACH,KAND,MAOK;AACD;AACA+C,MAAAA,UAAU,GAAGnD,OAAb;AACH;AACJ,GApCuF,CAqCxF;;;AACAmD,EAAAA,UAAU,CAAC/C,IAAX,IAAmB6C,OAAnB;AACAE,EAAAA,UAAU,CAAC7C,GAAX,IAAkB2C,OAAlB;AACAE,EAAAA,UAAU,CAAChD,KAAX,IAAoB8C,OAApB;AACAE,EAAAA,UAAU,CAAC9C,MAAX,IAAqB4C,OAArB;AACA,SAAOE,UAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,OAAoC;AAAA,MAAjB3D,KAAiB,QAAjBA,KAAiB;AAAA,MAAVD,MAAU,QAAVA,MAAU;AAChC,SAAOC,KAAK,GAAGD,MAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6D,oBAAT,CAA8BC,SAA9B,EAAyCC,OAAzC,EAAkDR,MAAlD,EAA0DjH,IAA1D,EAAgEmH,iBAAhE,EAAgG;AAAA,MAAbD,OAAa,uEAAH,CAAG;;AAC5F,MAAIM,SAAS,CAAChG,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAAnC,EAAsC;AAClC,WAAOgG,SAAP;AACH;;AACD,MAAIA,SAAS,CAAChG,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAA/B,KACIgG,SAAS,CAAChG,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAA/B,IACGgG,SAAS,CAAChG,OAAV,CAAkB,OAAlB,MAA+B,CAAC,CADnC,IAEGgG,SAAS,CAAChG,OAAV,CAAkB,KAAlB,MAA6B,CAAC,CAFjC,IAGGgG,SAAS,CAAChG,OAAV,CAAkB,QAAlB,MAAgC,CAAC,CAJxC,CAAJ,EAIgD;AAC5C,WAAOgG,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,KAA2B,EAAlC;AACH;;AACD;AAAM;AAAiBN,EAAAA,UAAU,GAAGJ,aAAa,CAACC,MAAD,EAASjH,IAAT,EAAekH,OAAf,EAAwBC,iBAAxB,CAAjD;AACA;AAAM;AAAiBQ,EAAAA,KAAK,GAAG;AAC3BpD,IAAAA,GAAG,EAAE;AACDZ,MAAAA,KAAK,EAAEyD,UAAU,CAACzD,KADjB;AAEDD,MAAAA,MAAM,EAAE+D,OAAO,CAAClD,GAAR,GAAc6C,UAAU,CAAC7C;AAFhC,KADsB;AAK3BH,IAAAA,KAAK,EAAE;AACHT,MAAAA,KAAK,EAAEyD,UAAU,CAAChD,KAAX,GAAmBqD,OAAO,CAACrD,KAD/B;AAEHV,MAAAA,MAAM,EAAE0D,UAAU,CAAC1D;AAFhB,KALoB;AAS3BY,IAAAA,MAAM,EAAE;AACJX,MAAAA,KAAK,EAAEyD,UAAU,CAACzD,KADd;AAEJD,MAAAA,MAAM,EAAE0D,UAAU,CAAC9C,MAAX,GAAoBmD,OAAO,CAACnD;AAFhC,KATmB;AAa3BD,IAAAA,IAAI,EAAE;AACFV,MAAAA,KAAK,EAAE8D,OAAO,CAACpD,IAAR,GAAe+C,UAAU,CAAC/C,IAD/B;AAEFX,MAAAA,MAAM,EAAE0D,UAAU,CAAC1D;AAFjB;AAbqB,GAA/B;AAkBA;AAAM;AAAiBkE,EAAAA,WAAW,GAAG1D,MAAM,CAAC2D,IAAP,CAAYF,KAAZ,EAChCG,GADgC,CAC5B,UAAAC,GAAG;AAAA,WAAK7D,MAAM,CAACC,MAAP,CAAc;AAAE4D,MAAAA,GAAG,EAAHA;AAAF,KAAd,EAAuBJ,KAAK,CAACI,GAAD,CAA5B,EAAmC;AAAEC,MAAAA,IAAI,EAAEV,OAAO,CAACK,KAAK,CAACI,GAAD,CAAN;AAAf,KAAnC,CAAL;AAAA,GADyB,EAEhCE,IAFgC,CAE3B,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACH,IAAF,GAASE,CAAC,CAACF,IAArB;AAAA,GAF2B,CAArC;AAGA;AAAM;AAAiBI,EAAAA,aAAa,GAAGR,WAAW,CAACS,MAAZ,CAAmB;AAAA,QAAG1E,KAAH,SAAGA,KAAH;AAAA,QAAUD,MAAV,SAAUA,MAAV;AAAA,WAAuBC,KAAK,IAAIsD,MAAM,CAACjC,WAAhB,IAA+BtB,MAAM,IAAIuD,MAAM,CAAChC,YAAvE;AAAA,GAAnB,CAAvC;AACA;AAAM;AAAiBqD,EAAAA,iBAAiB,GAAGF,aAAa,CAACG,MAAd,GAAuB,CAAvB,GACrCH,aAAa,CAAC,CAAD,CAAb,CAAiBL,GADoB,GAErCH,WAAW,CAAC,CAAD,CAAX,CAAeG,GAFrB;AAGA;AAAM;AAAiBS,EAAAA,SAAS,GAAGhB,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAnC;AACAT,EAAAA,MAAM,CAACwB,SAAP,GAAmBxB,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,OAAzB,EAAkCJ,iBAAlC,CAAnB;AACA,SAAOA,iBAAiB,IAAIE,SAAS,cAAOA,SAAP,IAAqB,EAAlC,CAAxB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAO;AACHjF,IAAAA,KAAK,EAAEiF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBtD,KADxB;AAEHD,IAAAA,MAAM,EAAEkF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBvD,MAFzB;AAGHW,IAAAA,IAAI,EAAEf,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB5C,IAA/B,CAHH;AAIHE,IAAAA,GAAG,EAAEjB,IAAI,CAACwF,KAAL,CAAWF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB1C,GAA/B,CAJF;AAKHD,IAAAA,MAAM,EAAEhB,IAAI,CAACwF,KAAL,CAAWF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB3C,MAA/B,CALL;AAMHF,IAAAA,KAAK,EAAEd,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB7C,KAA/B;AANJ,GAAP;AAQH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2E,oBAAT,CAA8BvB,SAA9B,EAAyC;AACrC;AAAM;AAAiBwB,EAAAA,IAAI,GAAG;AAAE3E,IAAAA,IAAI,EAAE,OAAR;AAAiBD,IAAAA,KAAK,EAAE,MAAxB;AAAgCE,IAAAA,MAAM,EAAE,KAAxC;AAA+CC,IAAAA,GAAG,EAAE;AAApD,GAA9B;AACA,SAAOiD,SAAS,CAACkB,OAAV,CAAkB,wBAAlB,EAA4C,UAAAO,OAAO;AAAA,WAAID,IAAI,CAACC,OAAD,CAAR;AAAA,GAAnD,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BV,SAA9B,EAAyC;AACrC,MAAIA,SAAS,KAAK,OAAlB,EAA2B;AACvB,WAAO,MAAP;AACH,GAFD,MAGK,IAAIA,SAAS,KAAK,MAAlB,EAA0B;AAC3B,WAAO,OAAP;AACH;;AACD,SAAOA,SAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,aAAT,CAAuB9J,OAAvB,EAAgC;AAC5B;AAAM;AAAiBG,EAAAA,MAAM,GAAGH,OAAO,CAACI,aAAR,CAAsBC,WAAtD;AACA;AAAM;AAAiBoD,EAAAA,MAAM,GAAGtD,MAAM,CAACI,gBAAP,CAAwBP,OAAxB,CAAhC;AACA;AAAM;AAAiB+J,EAAAA,CAAC,GAAGlG,UAAU,CAACJ,MAAM,CAACqD,SAAP,IAAoB,CAArB,CAAV,GAAoCjD,UAAU,CAACJ,MAAM,CAACuG,YAAP,IAAuB,CAAxB,CAAzE;AACA;AAAM;AAAiBC,EAAAA,CAAC,GAAGpG,UAAU,CAACJ,MAAM,CAACsD,UAAP,IAAqB,CAAtB,CAAV,GAAqClD,UAAU,CAACJ,MAAM,CAACyG,WAAP,IAAsB,CAAvB,CAA1E;AACA,SAAO;AACH5F,IAAAA,KAAK,EAAEgD,MAAM,CAACtH,OAAO,CAAC8F,WAAT,CAAN,GAA8BmE,CADlC;AAEH5F,IAAAA,MAAM,EAAEiD,MAAM,CAACtH,OAAO,CAACgG,YAAT,CAAN,GAA+B+D;AAFpC,GAAP;AAIH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,mBAAT,CAA6BvC,MAA7B,EAAqCjH,IAArC,EAAiE;AAAA,MAAtB4F,aAAsB,uEAAN,IAAM;AAC7D;AAAM;AAAiB6D,EAAAA,kBAAkB,GAAG7D,aAAa,GACnDiB,4BAA4B,CAACI,MAAD,CADuB,GAEnDpF,sBAAsB,CAACoF,MAAD,EAASjH,IAAT,CAF5B;AAGA,SAAOyF,oCAAoC,CAACzF,IAAD,EAAOyJ,kBAAP,EAA2B7D,aAA3B,CAA3C;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8D,gBAAT,CAA0BzC,MAA1B,EAAkC0C,WAAlC,EAA+CC,QAA/C,EAAyD;AACrD;AAAM;AAAiBpC,EAAAA,SAAS,GAAGoC,QAAQ,CAAClC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAnC,CADqD,CAErD;;AACA;AAAM;AAAiBmC,EAAAA,UAAU,GAAGV,aAAa,CAAClC,MAAD,CAAjD,CAHqD,CAIrD;;AACA;AAAM;AAAiB6C,EAAAA,aAAa,GAAG;AACnCnG,IAAAA,KAAK,EAAEkG,UAAU,CAAClG,KADiB;AAEnCD,IAAAA,MAAM,EAAEmG,UAAU,CAACnG;AAFgB,GAAvC,CALqD,CASrD;;AACA;AAAM;AAAiBqG,EAAAA,OAAO,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkBvI,OAAlB,CAA0BgG,SAA1B,MAAyC,CAAC,CAA3E;AACA;AAAM;AAAiBwC,EAAAA,QAAQ,GAAGD,OAAO,GAAG,KAAH,GAAW,MAApD;AACA;AAAM;AAAiBE,EAAAA,aAAa,GAAGF,OAAO,GAAG,MAAH,GAAY,KAA1D;AACA;AAAM;AAAiBG,EAAAA,WAAW,GAAGH,OAAO,GAAG,QAAH,GAAc,OAA1D;AACA;AAAM;AAAiBI,EAAAA,oBAAoB,GAAG,CAACJ,OAAD,GAAW,QAAX,GAAsB,OAApE;AACAD,EAAAA,aAAa,CAACE,QAAD,CAAb,GACIL,WAAW,CAACK,QAAD,CAAX,GACIL,WAAW,CAACO,WAAD,CAAX,GAA2B,CAD/B,GAEIL,UAAU,CAACK,WAAD,CAAV,GAA0B,CAHlC;AAIAJ,EAAAA,aAAa,CAACG,aAAD,CAAb,GAA+BzC,SAAS,KAAKyC,aAAd,GACzBN,WAAW,CAACM,aAAD,CAAX,GAA6BJ,UAAU,CAACM,oBAAD,CADd,GAEzBR,WAAW,CAACZ,oBAAoB,CAACkB,aAAD,CAArB,CAFjB;AAGA,SAAOH,aAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,SAAT,CAAmBC,CAAnB,EAAsB;AAClB,SAAOA,CAAC,KAAK,EAAN,IAAY,CAACC,KAAK,CAACpH,UAAU,CAACmH,CAAD,CAAX,CAAlB,IAAqCE,QAAQ,CAACF,CAAD,CAApD;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,eAAT,CAAyB5B,IAAzB,EAA+B6B,QAA/B,EAAyC;AACrC;AAAM;AAAiBxD,EAAAA,MAAM,GAAG2B,IAAI,CAAC8B,QAAL,CAAczD,MAA9C;AACA;AAAM;AAAiBhD,EAAAA,OAAO,GAAG0E,UAAU,CAACC,IAAD,CAA3C;AACA+B,EAAAA,SAAS,CAAC1D,MAAD,EAAS;AACd,mBAAe,WADD;AAEd1C,IAAAA,GAAG,EAAE,KAFS;AAGdF,IAAAA,IAAI,EAAE,KAHQ;AAIduG,IAAAA,SAAS,wBAAiB3G,OAAO,CAACI,IAAzB,iBAAoCJ,OAAO,CAACM,GAA5C;AAJK,GAAT,EAKNkG,QALM,CAAT;;AAMA,MAAI7B,IAAI,CAAC8B,QAAL,CAAcG,KAAlB,EAAyB;AACrBF,IAAAA,SAAS,CAAC/B,IAAI,CAAC8B,QAAL,CAAcG,KAAf,EAAsBjC,IAAI,CAAC3E,OAAL,CAAa4G,KAAnC,EAA0CJ,QAA1C,CAAT;AACH;;AACD,MAAI7B,IAAI,CAACkC,aAAT,EAAwB;AACpB,QAAIL,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACM,YAAT,CAAsB9D,MAAtB,EAA8B,OAA9B,EAAuCA,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,kBAAzB,uBAA2DE,IAAI,CAACpB,SAAhE,EAAvC;AACAiD,MAAAA,QAAQ,CAACM,YAAT,CAAsB9D,MAAtB,EAA8B,OAA9B,EAAuCA,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,kBAAzB,uBAA2DE,IAAI,CAACpB,SAAhE,EAAvC;AACAiD,MAAAA,QAAQ,CAACM,YAAT,CAAsB9D,MAAtB,EAA8B,OAA9B,EAAuCA,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,SAAzB,aAAyCE,IAAI,CAACpB,SAA9C,EAAvC;;AACA,UAAIP,MAAM,CAACwB,SAAP,CAAiBuC,KAAjB,CAAuB,UAAvB,CAAJ,EAAwC;AACpCP,QAAAA,QAAQ,CAACQ,QAAT,CAAkBhE,MAAlB,EAA0B,cAA1B;AACH;;AACD,UAAIA,MAAM,CAACwB,SAAP,CAAiBuC,KAAjB,CAAuB,UAAvB,CAAJ,EAAwC;AACpCP,QAAAA,QAAQ,CAACQ,QAAT,CAAkBhE,MAAlB,EAA0B,cAA1B;AACH;AACJ,KAVD,MAWK;AACDA,MAAAA,MAAM,CAACwB,SAAP,GAAmBxB,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,kBAAzB,uBAA2DE,IAAI,CAACpB,SAAhE,EAAnB;AACAP,MAAAA,MAAM,CAACwB,SAAP,GAAmBxB,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,kBAAzB,uBAA2DE,IAAI,CAACpB,SAAhE,EAAnB;AACAP,MAAAA,MAAM,CAACwB,SAAP,GAAmBxB,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,SAAzB,aAAyCE,IAAI,CAACpB,SAA9C,EAAnB;;AACA,UAAIP,MAAM,CAACwB,SAAP,CAAiBuC,KAAjB,CAAuB,UAAvB,CAAJ,EAAwC;AACpC/D,QAAAA,MAAM,CAACiE,SAAP,CAAiBC,GAAjB,CAAqB,cAArB;AACH;;AACD,UAAIlE,MAAM,CAACwB,SAAP,CAAiBuC,KAAjB,CAAuB,UAAvB,CAAJ,EAAwC;AACpC/D,QAAAA,MAAM,CAACiE,SAAP,CAAiBC,GAAjB,CAAqB,cAArB;AACH;AACJ;AACJ;;AACD,MAAIV,QAAJ,EAAc;AACVA,IAAAA,QAAQ,CAACM,YAAT,CAAsB9D,MAAtB,EAA8B,OAA9B,EAAuCA,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,wBAAzB,YAAsDE,IAAI,CAACpB,SAA3D,EAAvC;AACH,GAFD,MAGK;AACDP,IAAAA,MAAM,CAACwB,SAAP,GAAmBxB,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,wBAAzB,YAAsDE,IAAI,CAACpB,SAA3D,EAAnB;AACH;AACJ;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmD,SAAT,CAAmBtL,OAAnB,EAA4ByD,MAA5B,EAAoC2H,QAApC,EAA8C;AAC1CvG,EAAAA,MAAM,CAAC2D,IAAP,CAAY/E,MAAZ,EAAoBsI,OAApB,CAA4B,UAACC,IAAD,EAAU;AAClC;AAAI;AAAiBC,IAAAA,IAAI,GAAG,EAA5B,CADkC,CAElC;;AACA,QAAI,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,OAA3B,EAAoC,QAApC,EAA8C,MAA9C,EAAsD9J,OAAtD,CAA8D6J,IAA9D,MAAwE,CAAC,CAAzE,IACAjB,SAAS,CAACtH,MAAM,CAACuI,IAAD,CAAP,CADb,EAC6B;AACzBC,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAIb,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACc,QAAT,CAAkBlM,OAAlB,EAA2BgM,IAA3B,YAAoC7K,MAAM,CAACsC,MAAM,CAACuI,IAAD,CAAP,CAA1C,SAA2DC,IAA3D;AACA;AACH;;AACDjM,IAAAA,OAAO,CAACmM,KAAR,CAAcH,IAAd,IAAsB7K,MAAM,CAACsC,MAAM,CAACuI,IAAD,CAAP,CAAN,GAAuBC,IAA7C;AACH,GAZD;AAaH;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAAST,KAAT,CAAejC,IAAf,EAAqB;AAAA;;AACjB;AAAI;AAAiBkB,EAAAA,aAAa,GAAGlB,IAAI,CAAC3E,OAAL,CAAagD,MAAlD,CADiB,CAEjB;;AACA;AAAM;AAAiBwE,EAAAA,YAAY,GAAG7C,IAAI,CAAC8B,QAAL,CAAczD,MAAd,CAAqByE,aAArB,CAAmC,QAAnC,CAAtC,CAHiB,CAIjB;;AACA,MAAI,CAACD,YAAL,EAAmB;AACf,WAAO7C,IAAP;AACH;;AACD;AAAM;AAAiB+C,EAAAA,UAAU,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkBnK,OAAlB,CAA0BoH,IAAI,CAACpB,SAA/B,MAA8C,CAAC,CAAnF;AACA;AAAM;AAAiBoE,EAAAA,GAAG,GAAGD,UAAU,GAAG,QAAH,GAAc,OAArD;AACA;AAAM;AAAiBE,EAAAA,eAAe,GAAGF,UAAU,GAAG,KAAH,GAAW,MAA9D;AACA;AAAM;AAAiB9H,EAAAA,IAAI,GAAGgI,eAAe,CAACC,WAAhB,EAA9B;AACA;AAAM;AAAiBC,EAAAA,OAAO,GAAGJ,UAAU,GAAG,MAAH,GAAY,KAAvD;AACA;AAAM;AAAiBK,EAAAA,MAAM,GAAGL,UAAU,GAAG,QAAH,GAAc,OAAxD;AACA;AAAM;AAAiBM,EAAAA,gBAAgB,GAAG9C,aAAa,CAACsC,YAAD,CAAb,CAA4BG,GAA5B,CAA1C,CAdiB,CAejB;;AACA,MAAIhD,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBgM,MAAlB,IAA4BC,gBAA5B,GAA+CnC,aAAa,CAACjG,IAAD,CAAhE,EAAwE;AACpEiG,IAAAA,aAAa,CAACjG,IAAD,CAAb,IACIiG,aAAa,CAACjG,IAAD,CAAb,IAAuB+E,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBgM,MAAlB,IAA4BC,gBAAnD,CADJ;AAEH,GAnBgB,CAoBjB;;;AACA,MAAItF,MAAM,CAACiC,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkB6D,IAAlB,CAAD,CAAN,GAAkC8C,MAAM,CAACsF,gBAAD,CAAxC,GAA6DnC,aAAa,CAACkC,MAAD,CAA9E,EAAwF;AACpFlC,IAAAA,aAAa,CAACjG,IAAD,CAAb,IACI8C,MAAM,CAACiC,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkB6D,IAAlB,CAAD,CAAN,GAAkC8C,MAAM,CAACsF,gBAAD,CAAxC,GAA6DtF,MAAM,CAACmD,aAAa,CAACkC,MAAD,CAAd,CADvE;AAEH;;AACDlC,EAAAA,aAAa,GAAG9F,aAAa,CAAC8F,aAAD,CAA7B,CAzBiB,CA0BjB;;AACA;AAAM;AAAiBoC,EAAAA,MAAM,GAAGvF,MAAM,CAACiC,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkB6D,IAAlB,CAAD,CAAN,GAAkC8C,MAAM,CAACiC,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkB4L,GAAlB,IAAyB,CAAzB,GAA6BK,gBAAgB,GAAG,CAAjD,CAAxE,CA3BiB,CA4BjB;AACA;;AACA;AAAM;AAAiBtM,EAAAA,GAAG,GAAGP,wBAAwB,CAACwJ,IAAI,CAAC8B,QAAL,CAAczD,MAAf,CAArD;AACA;AAAM;AAAiBkF,EAAAA,gBAAgB,GAAGjJ,UAAU,CAACvD,GAAG,iBAAUkM,eAAV,EAAJ,CAApD;AACA;AAAM;AAAiBO,EAAAA,gBAAgB,GAAGlJ,UAAU,CAACvD,GAAG,iBAAUkM,eAAV,WAAJ,CAApD;AACA;AAAI;AAAiBQ,EAAAA,SAAS,GAAGH,MAAM,GAAGpC,aAAa,CAACjG,IAAD,CAAtB,GAA+BsI,gBAA/B,GAAkDC,gBAAnF,CAjCiB,CAkCjB;;AACAC,EAAAA,SAAS,GAAG/I,IAAI,CAACC,GAAL,CAASD,IAAI,CAACgJ,GAAL,CAASxC,aAAa,CAAC8B,GAAD,CAAb,GAAqBK,gBAA9B,EAAgDI,SAAhD,CAAT,EAAqE,CAArE,CAAZ;AACAzD,EAAAA,IAAI,CAAC3E,OAAL,CAAa4G,KAAb,mEACKhH,IADL,EACYP,IAAI,CAACwF,KAAL,CAAWuD,SAAX,CADZ,wCAEKN,OAFL,EAEe,EAFf;AAIAnD,EAAAA,IAAI,CAAC8B,QAAL,CAAcG,KAAd,GAAsBY,YAAtB;AACA,SAAO7C,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAAS2D,IAAT,CAAc3D,IAAd,EAAoB;AAChBA,EAAAA,IAAI,CAAC3E,OAAL,CAAagD,MAAb,GAAsBjD,aAAa,CAAC4E,IAAI,CAAC3E,OAAL,CAAagD,MAAd,CAAnC;AACA;AAAM;AAAiBG,EAAAA,UAAU,GAAGJ,aAAa,CAAC4B,IAAI,CAAC8B,QAAL,CAAczD,MAAf,EAAuB2B,IAAI,CAAC8B,QAAL,CAAc1K,IAArC,EAA2C,CAA3C,EAA8C;AAC/F,YADiD,EACrC,KADqC,CAC/B;AAD+B,GAAjD;AAGA;AAAI;AAAiBwH,EAAAA,SAAS,GAAGoB,IAAI,CAACpB,SAAL,CAAeE,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAjC;AACA;AAAI;AAAiBc,EAAAA,SAAS,GAAGI,IAAI,CAACpB,SAAL,CAAeE,KAAf,CAAqB,GAArB,EAA0B,CAA1B,KAAgC,EAAjE;AACA;AAAM;AAAiB8E,EAAAA,gBAAgB,GAAGhE,SAAS,GAC7CO,oBAAoB,CAACvB,SAAD,CADyB,GAE7CD,oBAAoB,CAAC,MAAD,EAASqB,IAAI,CAAC3E,OAAL,CAAajE,IAAtB,EAA4B4I,IAAI,CAAC8B,QAAL,CAAczD,MAA1C,EAAkD2B,IAAI,CAAC8B,QAAL,CAAc1K,IAAhE,EAAsE,UAAtE,EAAkF,CAAlF,CAF1B;AAGA;AAAM;AAAiByM,EAAAA,SAAS,GAAG,CAACjF,SAAD,EAAYgF,gBAAZ,CAAnC;AACA;;AACAC,EAAAA,SAAS,CAACrB,OAAV,CAAkB,UAACsB,IAAD,EAAOC,KAAP,EAAiB;AAC/B,QAAInF,SAAS,KAAKkF,IAAd,IAAsBD,SAAS,CAAClE,MAAV,KAAqBoE,KAAK,GAAG,CAAvD,EAA0D;AACtD,aAAO/D,IAAP;AACH;;AACDpB,IAAAA,SAAS,GAAGoB,IAAI,CAACpB,SAAL,CAAeE,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAZ,CAJ+B,CAK/B;;AACA;AAAM;AAAiBkF,IAAAA,WAAW,GAAIpF,SAAS,KAAK,MAAd,IAClClE,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB7C,KAA/B,IAAwCd,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBqE,IAA7B,CADP,IAEhCmD,SAAS,KAAK,OAAd,IACGlE,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB5C,IAA/B,IAAuCf,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBoE,KAA7B,CAHV,IAIhCoD,SAAS,KAAK,KAAd,IACGlE,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB3C,MAA/B,IAAyChB,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBuE,GAA7B,CALZ,IAMhCiD,SAAS,KAAK,QAAd,IACGlE,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB1C,GAA/B,IAAsCjB,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAajE,IAAb,CAAkBsE,MAA7B,CAP9C;AAQA;AAAM;AAAiBuI,IAAAA,aAAa,GAAGvJ,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB5C,IAA/B,IAAuCf,IAAI,CAACuF,KAAL,CAAWzB,UAAU,CAAC/C,IAAtB,CAA9E;AACA;AAAM;AAAiByI,IAAAA,cAAc,GAAGxJ,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB7C,KAA/B,IAAwCd,IAAI,CAACuF,KAAL,CAAWzB,UAAU,CAAChD,KAAtB,CAAhF;AACA;AAAM;AAAiB2I,IAAAA,YAAY,GAAGzJ,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB1C,GAA/B,IAAsCjB,IAAI,CAACuF,KAAL,CAAWzB,UAAU,CAAC7C,GAAtB,CAA5E;AACA;AAAM;AAAiByI,IAAAA,eAAe,GAAG1J,IAAI,CAACuF,KAAL,CAAWD,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB3C,MAA/B,IAAyChB,IAAI,CAACuF,KAAL,CAAWzB,UAAU,CAAC9C,MAAtB,CAAlF;AACA;AAAM;AAAiB2I,IAAAA,mBAAmB,GAAIzF,SAAS,KAAK,MAAd,IAAwBqF,aAAzB,IACxCrF,SAAS,KAAK,OAAd,IAAyBsF,cADe,IAExCtF,SAAS,KAAK,KAAd,IAAuBuF,YAFiB,IAGxCvF,SAAS,KAAK,QAAd,IAA0BwF,eAH/B,CAlB+B,CAsB/B;;AACA;AAAM;AAAiBrB,IAAAA,UAAU,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkBnK,OAAlB,CAA0BgG,SAA1B,MAAyC,CAAC,CAA9E;AACA;AAAM;AAAiB0F,IAAAA,gBAAgB,GAAKvB,UAAU,IAAInD,SAAS,KAAK,MAA5B,IAAsCqE,aAAvC,IACtClB,UAAU,IAAInD,SAAS,KAAK,OAA5B,IAAuCsE,cADD,IAEtC,CAACnB,UAAD,IAAenD,SAAS,KAAK,MAA7B,IAAuCuE,YAFD,IAGtC,CAACpB,UAAD,IAAenD,SAAS,KAAK,OAA7B,IAAwCwE,eAH7C;;AAIA,QAAIJ,WAAW,IAAIK,mBAAf,IAAsCC,gBAA1C,EAA4D;AACxD;AACA,UAAIN,WAAW,IAAIK,mBAAnB,EAAwC;AACpCzF,QAAAA,SAAS,GAAGiF,SAAS,CAACE,KAAK,GAAG,CAAT,CAArB;AACH;;AACD,UAAIO,gBAAJ,EAAsB;AAClB1E,QAAAA,SAAS,GAAGU,oBAAoB,CAACV,SAAD,CAAhC;AACH;;AACDI,MAAAA,IAAI,CAACpB,SAAL,GAAiBA,SAAS,IAAIgB,SAAS,cAAOA,SAAP,IAAqB,EAAlC,CAA1B;AACAI,MAAAA,IAAI,CAAC3E,OAAL,CAAagD,MAAb,GAAsB/C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkByE,IAAI,CAAC3E,OAAL,CAAagD,MAA/B,EAAuCyC,gBAAgB,CAACd,IAAI,CAAC8B,QAAL,CAAczD,MAAf,EAAuB2B,IAAI,CAAC3E,OAAL,CAAajE,IAApC,EAA0C4I,IAAI,CAACpB,SAA/C,CAAvD,CAAtB;AACH;AACJ,GAvCD;AAwCA,SAAOoB,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuE,QAAT,CAAkBC,aAAlB,EAAiCC,WAAjC,EAA8CzD,QAA9C,EAAwD;AACpD;AAAM;AAAiB0D,EAAAA,cAAc,GAAG9D,mBAAmB,CAAC4D,aAAD,EAAgBC,WAAhB,CAA3D;AACA;AAAM;AAAiBE,EAAAA,YAAY,GAAG7D,gBAAgB,CAAC0D,aAAD,EAAgBE,cAAhB,EAAgC1D,QAAhC,CAAtD;AACA;AAAM;AAAiBpC,EAAAA,SAAS,GAAGD,oBAAoB,CAACqC,QAAD,EAAW0D,cAAX,EAA2BF,aAA3B,EAA0CC,WAA1C,EAAuD,UAAvD,EAAmE,CAAnE,CAAvD;AACA;AAAM;AAAiBvC,EAAAA,aAAa,GAAGlB,QAAQ,CAACpI,OAAT,CAAiB,MAAjB,MAA6B,CAAC,CAArE;AACA,SAAO;AACHkJ,IAAAA,QAAQ,EAAE;AACNzD,MAAAA,MAAM,EAAEmG,aADF;AAENpN,MAAAA,IAAI,EAAEqN,WAFA;AAGNxC,MAAAA,KAAK,EAAE;AAHD,KADP;AAMH5G,IAAAA,OAAO,EAAE;AACLgD,MAAAA,MAAM,EAAEsG,YADH;AAELvN,MAAAA,IAAI,EAAEsN,cAFD;AAGLzC,MAAAA,KAAK,EAAE;AAHF,KANN;AAWH2C,IAAAA,aAAa,EAAE,KAXZ;AAYHhG,IAAAA,SAAS,EAATA,SAZG;AAaHsD,IAAAA,aAAa,EAAbA;AAbG,GAAP;AAeH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAAS2C,eAAT,CAAyB7E,IAAzB,EAA+B;AAC3B;AACA;AACA;AACA;AAAM;AAAiB8E,EAAAA,aAAa,GAAG,WAAvC;AACA;AAAM;AAAiBC,EAAAA,YAAY,GAAG/E,IAAI,CAAC8B,QAAL,CAAczD,MAAd,CAAqBuE,KAA3D,CAL2B,CAKuC;;AAClE,MAAQjH,GAAR,GAAkDoJ,YAAlD,CAAQpJ,GAAR;AAAA,MAAaF,IAAb,GAAkDsJ,YAAlD,CAAatJ,IAAb;AAAA,MAAoCuG,SAApC,GAAkD+C,YAAlD,CAAoBD,aAApB;AACAC,EAAAA,YAAY,CAACpJ,GAAb,GAAmB,EAAnB;AACAoJ,EAAAA,YAAY,CAACtJ,IAAb,GAAoB,EAApB;AACAsJ,EAAAA,YAAY,CAACD,aAAD,CAAZ,GAA8B,EAA9B;AACA;AAAM;AAAiBtG,EAAAA,UAAU,GAAGJ,aAAa,CAAC4B,IAAI,CAAC8B,QAAL,CAAczD,MAAf,EAAuB2B,IAAI,CAAC8B,QAAL,CAAc1K,IAArC,EAA2C,CAA3C,EAA8C;AAC/F,gBADiD,EACjC,KADiC,CAC3B;AAD2B,GAAjD,CAV2B,CAa3B;AACA;;AACA2N,EAAAA,YAAY,CAACpJ,GAAb,GAAmBA,GAAnB;AACAoJ,EAAAA,YAAY,CAACtJ,IAAb,GAAoBA,IAApB;AACAsJ,EAAAA,YAAY,CAACD,aAAD,CAAZ,GAA8B9C,SAA9B;AACA;AAAM;AAAiB5I,EAAAA,KAAK,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAA/B;AACA;AAAM;AAAiB4L,EAAAA,KAAK,GAAG;AAC3B;AACR;AACA;AACA;AACQC,IAAAA,OAL2B,mBAKnBrG,SALmB,EAKR;AACf;AAAI;AAAiBsG,MAAAA,KAAK,GAAGlF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBO,SAApB,CAA7B;;AACA,UAAIoB,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBO,SAApB,IAAiCJ,UAAU,CAACI,SAAD,CAA3C,IACA,CAAC,KADL,CACW;AADX,QAEE;AACEsG,QAAAA,KAAK,GAAGxK,IAAI,CAACC,GAAL,CAASqF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBO,SAApB,CAAT,EAAyCJ,UAAU,CAACI,SAAD,CAAnD,CAAR;AACH;;AACD,iCAAUA,SAAV,EAAsBsG,KAAtB;AACH,KAb0B;;AAc3B;AACR;AACA;AACA;AACQC,IAAAA,SAlB2B,qBAkBjBvG,SAlBiB,EAkBN;AACjB;AAAM;AAAiBwC,MAAAA,QAAQ,GAAGxC,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,KAAnE;AACA;AAAI;AAAiBsG,MAAAA,KAAK,GAAGlF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB+C,QAApB,CAA7B;;AACA,UAAIpB,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBO,SAApB,IAAiCJ,UAAU,CAACI,SAAD,CAA3C,IACA,CAAC,KADL,CACW;AADX,QAEE;AACEsG,QAAAA,KAAK,GAAGxK,IAAI,CAACgJ,GAAL,CAAS1D,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoB+C,QAApB,CAAT,EAAwC5C,UAAU,CAACI,SAAD,CAAV,IAC3CA,SAAS,KAAK,OAAd,GAAwBoB,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBtD,KAA5C,GAAoDiF,IAAI,CAAC3E,OAAL,CAAagD,MAAb,CAAoBvD,MAD7B,CAAxC,CAAR;AAEH;;AACD,iCAAUsG,QAAV,EAAqB8D,KAArB;AACH;AA5B0B,GAA/B;AA8BA;AAAI;AAAiBjK,EAAAA,IAArB;AACA7B,EAAAA,KAAK,CAACoJ,OAAN,CAAc,UAAA5D,SAAS,EAAI;AACvB3D,IAAAA,IAAI,GAAG,CAAC,MAAD,EAAS,KAAT,EACFrC,OADE,CACMgG,SADN,MACqB,CAAC,CADtB,GAED,SAFC,GAGD,WAHN;AAIAoB,IAAAA,IAAI,CAAC3E,OAAL,CAAagD,MAAb,GAAsB/C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkByE,IAAI,CAAC3E,OAAL,CAAagD,MAA/B,EAAuC2G,KAAK,CAAC/J,IAAD,CAAL,CAAY2D,SAAZ,CAAvC,CAAtB;AACH,GAND;AAOA,SAAOoB,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASoF,KAAT,CAAepF,IAAf,EAAqB;AACjB;AAAM;AAAiBpB,EAAAA,SAAS,GAAGoB,IAAI,CAACpB,SAAxC;AACA;AAAM;AAAiByG,EAAAA,aAAa,GAAGzG,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAvC;AACA;AAAM;AAAiBwG,EAAAA,cAAc,GAAG1G,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAxC;;AACA,MAAIwG,cAAJ,EAAoB;AAChB,wBAAyBtF,IAAI,CAAC3E,OAA9B;AAAA,QAAQjE,IAAR,iBAAQA,IAAR;AAAA,QAAciH,MAAd,iBAAcA,MAAd;AACA;AAAM;AAAiB0E,IAAAA,UAAU,GAAG,CAAC,QAAD,EAAW,KAAX,EAAkBnK,OAAlB,CAA0ByM,aAA1B,MAA6C,CAAC,CAAlF;AACA;AAAM;AAAiBpK,IAAAA,IAAI,GAAG8H,UAAU,GAAG,MAAH,GAAY,KAApD;AACA;AAAM;AAAiBzB,IAAAA,WAAW,GAAGyB,UAAU,GAAG,OAAH,GAAa,QAA5D;AACA;AAAM;AAAiBwC,IAAAA,YAAY,GAAG;AAClC9J,MAAAA,IAAI,sBAAKR,IAAL,EAAY7D,IAAI,CAAC6D,IAAD,CAAhB,CAD8B;AAElCO,MAAAA,KAAK,sBACAP,IADA,EACO7D,IAAI,CAAC6D,IAAD,CAAJ,GAAa7D,IAAI,CAACkK,WAAD,CAAjB,GAAiClK,IAAI,CAACkK,WAAD,CAD5C;AAF6B,KAAtC;AAMAtB,IAAAA,IAAI,CAAC3E,OAAL,CAAagD,MAAb,GAAsB/C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB8C,MAAlB,EAA0BkH,YAAY,CAACD,cAAD,CAAtC,CAAtB;AACH;;AACD,SAAOtF,IAAP;AACH;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;IACMwF,W;;;;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACI,sBAASf,WAAT,EAAsBD,aAAtB,EAAmD;AAAA,UAAdtE,KAAc,uEAAN,IAAM;AAC/C,aAAO,KAAKpC,MAAL,CAAY2G,WAAZ,EAAyBD,aAAzB,EAAwC,KAAxC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOC,WAAP,EAAoBD,aAApB,EAAiD;AAAA,UAAdtE,KAAc,uEAAN,IAAM;AAC7C,aAAOU,mBAAmB,CAAC4D,aAAD,EAAgBC,WAAhB,CAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiBA,WAAjB,EAA8BD,aAA9B,EAA6CxD,QAA7C,EAAuDyE,YAAvD,EAAqE;AACjE;AAAM;AAAiBC,MAAAA,gBAAgB,GAAG,CAAC/B,IAAD,EAAOyB,KAAP,EAAcP,eAAd,EAA+B5C,KAA/B,CAA1C;AACA,aAAOyD,gBAAgB,CAACC,MAAjB,CAAwB,UAACC,YAAD,EAAehJ,QAAf;AAAA,eAA4BA,QAAQ,CAACgJ,YAAD,CAApC;AAAA,OAAxB,EAA4ErB,QAAQ,CAACC,aAAD,EAAgBC,WAAhB,EAA6BzD,QAA7B,CAApF,CAAP;AACH;;;;;;AAEL;AAAM;AAAiB6E,eAAe,GAAG,IAAIL,WAAJ,EAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,gBAAT,CAA0BrB,WAA1B,EAAuCD,aAAvC,EAAsD5F,SAAtD,EAAiE6G,YAAjE,EAA+E5D,QAA/E,EAAyF;AACrF;AAAM;AAAiB7B,EAAAA,IAAI,GAAG6F,eAAe,CAACC,gBAAhB,CAAiCrB,WAAjC,EAA8CD,aAA9C,EAA6D5F,SAA7D,EAAwE6G,YAAxE,CAA9B;AACA7D,EAAAA,eAAe,CAAC5B,IAAD,EAAO6B,QAAP,CAAf;AACH;AAED;AACA;AACA;AACA;;;IACMkE,kB;AACF;AACJ;AACA;AACI,8BAAYC,eAAZ,EAA6B;AAAA;;AAAA;;AACzB,SAAKC,QAAL,GAAgB,IAAI3P,OAAJ,EAAhB;AACA,SAAK4P,OAAL,GAAe/P,KAAK,CAACD,SAAS,CAACU,MAAD,EAAS,QAAT,CAAV,EAA8BV,SAAS,CAACU,MAAD,EAAS,QAAT,CAAvC,EAA2DR,EAAE,CAAC,CAAD,EAAIC,uBAAJ,CAA7D,EAA2F,KAAK4P,QAAhG,CAApB;AACA,SAAKH,gBAAL,GAAwB,IAAIK,GAAJ,EAAxB;AACA,SAAKD,OAAL,CACKE,SADL,CACe,YAAM;AACjB,MAAA,KAAI,CAACN,gBAAL,CACKtD,OADL,CACa,UAAC6D,eAAD,EAAqB;AAC9BP,QAAAA,gBAAgB,CAACQ,eAAe,CAACD,eAAe,CAAChI,MAAjB,CAAhB,EAA0CiI,eAAe,CAACD,eAAe,CAAC5P,OAAjB,CAAzD,EAAoF4P,eAAe,CAACE,UAApG,EAAgHF,eAAe,CAACZ,YAAhI,EAA8IO,eAAe,CAACQ,cAAhB,CAA+B,IAA/B,EAAqC,IAArC,CAA9I,CAAhB;AACH,OAHD;AAIH,KAND;AAOH;AACD;AACJ;AACA;AACA;;;;;WACI,kBAASC,OAAT,EAAkB;AACd,WAAKC,kBAAL,CAAwBD,OAAxB;AACA,WAAKR,QAAL,CAAcU,IAAd;AACH;AACD;AACJ;AACA;AACA;;;;WACI,4BAAmBF,OAAnB,EAA4B;AACxB,WAAKX,gBAAL,CAAsBc,GAAtB,CAA0BN,eAAe,CAACG,OAAO,CAAChQ,OAAT,CAAzC,EAA4DgQ,OAA5D;AACH;AACD;AACJ;AACA;AACA;;;;WACI,+BAAsBI,KAAtB,EAA6B;AACzB,WAAKf,gBAAL,CAAsBgB,MAAtB,CAA6BR,eAAe,CAACO,KAAD,CAA5C;AACH;;;;;;AAELd,kBAAkB,CAACgB,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAIlB,kBAAV,EAA8BxP,MAAM,CAAC2Q,QAAP,CAAgB3Q,MAAM,CAACN,gBAAvB,CAA9B,CAAP;AAAiF,CAApJ;;AACA8P,kBAAkB,CAACoB,KAAnB,GAA2B5Q,MAAM,CAAC6Q,kBAAP,CAA0B;AAAEC,EAAAA,KAAK,EAAEtB,kBAAT;AAA6BuB,EAAAA,OAAO,EAAEvB,kBAAkB,CAACgB;AAAzD,CAA1B,CAA3B;AACA;;AACAhB,kBAAkB,CAACwB,cAAnB,GAAoC;AAAA,SAAM,CACtC;AAAEC,IAAAA,IAAI,EAAEvR;AAAR,GADsC,CAAN;AAAA,CAApC;;AAGA,CAAC,YAAY;AAAE,GAAC,OAAOwR,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlR,MAAM,CAACmR,iBAAP,CAAyB3B,kBAAzB,EAA6C,CAAC;AACxGyB,IAAAA,IAAI,EAAEzR;AADkG,GAAD,CAA7C,EAE1D,YAAY;AAAE,WAAO,CAAC;AAAEyR,MAAAA,IAAI,EAAEjR,MAAM,CAACN;AAAf,KAAD,CAAP;AAA6C,GAFD,EAEG,IAFH,CAAnD;AAE8D,CAF7E;AAGA;AACA;AACA;AACA;;;AACA,SAASqQ,eAAT,CAAyB7P,OAAzB,EAAkC;AAC9B;AACA,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,WAAOa,QAAQ,CAACwL,aAAT,CAAuBrM,OAAvB,CAAP;AACH;;AACD,MAAIA,OAAO,YAAYT,UAAvB,EAAmC;AAC/B,WAAOS,OAAO,CAACkR,aAAf;AACH;;AACD,SAAOlR,OAAP;AACH;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASqP,gBAAT,EAA2BN,WAA3B,EAAwCO,kBAAxC,G,CAEA","sourcesContent":["import { Injectable, ElementRef, RendererFactory2 } from '@angular/core';\nimport { fromEvent, merge, of, animationFrameScheduler, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Get CSS computed property of the given element\n * @param {?} element\n * @param {?=} property\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction getStyleComputedProperty(element, property) {\n    if (element.nodeType !== 1) {\n        return [];\n    }\n    // NOTE: 1 DOM access here\n    const /** @type {?} */ window = element.ownerDocument.defaultView;\n    const /** @type {?} */ css = window.getComputedStyle(element, null);\n    return property ? css[property] : css;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Returns the parentNode or the host of the element\n * @param {?} element\n * @return {?}\n */\nfunction getParentNode(element) {\n    if (element.nodeName === 'HTML') {\n        return element;\n    }\n    return element.parentNode || element.host;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction getScrollParent(element) {\n    // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n    if (!element) {\n        return document.body;\n    }\n    switch (element.nodeName) {\n        case 'HTML':\n        case 'BODY':\n            return element.ownerDocument.body;\n        case '#document':\n            return element.body;\n        default:\n    }\n    // Firefox want us to check `-x` and `-y` variations as well\n    const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n    if (/(auto|scroll|overlay)/.test(String(overflow) + String(overflowY) + String(overflowX))) {\n        return element;\n    }\n    return getScrollParent(getParentNode(element));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ isIE11 = isBrowser && !!((/** @type {?} */ (window)).MSInputMethodContext && (/** @type {?} */ (document)).documentMode);\nconst /** @type {?} */ isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n/**\n * @param {?=} version\n * @return {?}\n */\nfunction isIE(version) {\n    if (version === 11) {\n        return isIE11;\n    }\n    if (version === 10) {\n        return isIE10;\n    }\n    return isIE11 || isIE10;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction getOffsetParent(element) {\n    if (!element) {\n        return document.documentElement;\n    }\n    const /** @type {?} */ noOffsetParent = isIE(10) ? document.body : null;\n    // NOTE: 1 DOM access here\n    let /** @type {?} */ offsetParent = element.offsetParent || null;\n    // Skip hidden elements which don't have an offsetParent\n    let /** @type {?} */ sibling;\n    while (offsetParent === noOffsetParent && element.nextElementSibling) {\n        sibling = element.nextElementSibling;\n        offsetParent = sibling.offsetParent;\n    }\n    const /** @type {?} */ nodeName = offsetParent && offsetParent.nodeName;\n    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n        return sibling ? sibling.ownerDocument.documentElement : document.documentElement;\n    }\n    // .offsetParent will return the closest TH, TD or TABLE in case\n    // no offsetParent is present, I hate this job...\n    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n        getStyleComputedProperty(offsetParent, 'position') === 'static') {\n        return getOffsetParent(offsetParent);\n    }\n    return offsetParent;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction isOffsetContainer(element) {\n    const { nodeName } = element;\n    if (nodeName === 'BODY') {\n        return false;\n    }\n    return (nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @param {?} node\n * @return {?}\n */\nfunction getRoot(node) {\n    if (node.parentNode !== null) {\n        return getRoot(node.parentNode);\n    }\n    return node;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element1\n * @param {?} element2\n * @return {?}\n */\nfunction findCommonOffsetParent(element1, element2) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n        return document.documentElement;\n    }\n    // Here we make sure to give as \"start\" the element that comes first in the DOM\n    /* tslint:disable-next-line: no-bitwise */\n    const /** @type {?} */ order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n    const /** @type {?} */ start = order ? element1 : element2;\n    const /** @type {?} */ end = order ? element2 : element1;\n    // Get common ancestor container\n    const /** @type {?} */ range = document.createRange();\n    range.setStart(start, 0);\n    range.setEnd(end, 0);\n    const { commonAncestorContainer } = range;\n    // Both nodes are inside #document\n    if ((element1 !== commonAncestorContainer &&\n        element2 !== commonAncestorContainer) ||\n        start.contains(end)) {\n        if (isOffsetContainer(commonAncestorContainer)) {\n            return commonAncestorContainer;\n        }\n        return getOffsetParent(commonAncestorContainer);\n    }\n    // one of the nodes is inside shadowDOM, find which one\n    const /** @type {?} */ element1root = getRoot(element1);\n    if (element1root.host) {\n        return findCommonOffsetParent(element1root.host, element2);\n    }\n    else {\n        return findCommonOffsetParent(element1, getRoot(element2).host);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper to detect borders of a given element\n */\n/**\n * @param {?} styles\n * @param {?} axis\n * @return {?}\n */\nfunction getBordersSize(styles, axis) {\n    const /** @type {?} */ sideA = axis === 'x' ? 'Left' : 'Top';\n    const /** @type {?} */ sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n    return (parseFloat(styles[`border${sideA}Width`]) +\n        parseFloat(styles[`border${sideB}Width`]));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} axis\n * @param {?} body\n * @param {?} html\n * @param {?} computedStyle\n * @return {?}\n */\nfunction getSize(axis, body, html, computedStyle) {\n    return Math.max(body[`offset${axis}`], body[`scroll${axis}`], html[`client${axis}`], html[`offset${axis}`], html[`scroll${axis}`], isIE(10)\n        ? (parseInt(html[`offset${axis}`], 10) +\n            parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`], 10) +\n            parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`], 10))\n        : 0);\n}\n/**\n * @param {?} document\n * @return {?}\n */\nfunction getWindowSizes(document) {\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ html = document.documentElement;\n    const /** @type {?} */ computedStyle = isIE(10) && getComputedStyle(html);\n    return {\n        height: getSize('Height', body, html, computedStyle),\n        width: getSize('Width', body, html, computedStyle)\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @param {?} element\n * @param {?=} side\n * @return {?}\n */\nfunction getScroll(element, side = 'top') {\n    const /** @type {?} */ upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n    const /** @type {?} */ nodeName = element.nodeName;\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n        const /** @type {?} */ html = element.ownerDocument.documentElement;\n        const /** @type {?} */ scrollingElement = element.ownerDocument.scrollingElement || html;\n        return scrollingElement[upperSide];\n    }\n    return element[upperSide];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} offsets\n * @return {?}\n */\nfunction getClientRect(offsets) {\n    return Object.assign({}, offsets, { right: offsets.left + offsets.width, bottom: offsets.top + offsets.height });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction getBoundingClientRect(element) {\n    let /** @type {?} */ rect = {};\n    // IE10 10 FIX: Please, don't ask, the element isn't\n    // considered in DOM in some circumstances...\n    // This isn't reproducible in IE10 compatibility mode of IE11\n    try {\n        if (isIE(10)) {\n            rect = element.getBoundingClientRect();\n            const /** @type {?} */ scrollTop = getScroll(element, 'top');\n            const /** @type {?} */ scrollLeft = getScroll(element, 'left');\n            rect.top += scrollTop;\n            rect.left += scrollLeft;\n            rect.bottom += scrollTop;\n            rect.right += scrollLeft;\n        }\n        else {\n            rect = element.getBoundingClientRect();\n        }\n    }\n    catch (/** @type {?} */ e) {\n        return undefined;\n    }\n    const /** @type {?} */ result = {\n        left: rect.left,\n        top: rect.top,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n    };\n    // subtract scrollbar size from sizes\n    const /** @type {?} */ sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n    const /** @type {?} */ width = sizes.width || element.clientWidth || result.right - result.left;\n    const /** @type {?} */ height = sizes.height || element.clientHeight || result.bottom - result.top;\n    let /** @type {?} */ horizScrollbar = element.offsetWidth - width;\n    let /** @type {?} */ vertScrollbar = element.offsetHeight - height;\n    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n    // we make this check conditional for performance reasons\n    if (horizScrollbar || vertScrollbar) {\n        const /** @type {?} */ styles = getStyleComputedProperty(element);\n        horizScrollbar -= getBordersSize(styles, 'x');\n        vertScrollbar -= getBordersSize(styles, 'y');\n        result.width -= horizScrollbar;\n        result.height -= vertScrollbar;\n    }\n    return getClientRect(result);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} rect\n * @param {?} element\n * @param {?=} subtract\n * @return {?}\n */\nfunction includeScroll(rect, element, subtract = false) {\n    const /** @type {?} */ scrollTop = getScroll(element, 'top');\n    const /** @type {?} */ scrollLeft = getScroll(element, 'left');\n    const /** @type {?} */ modifier = subtract ? -1 : 1;\n    rect.top += scrollTop * modifier;\n    rect.bottom += scrollTop * modifier;\n    rect.left += scrollLeft * modifier;\n    rect.right += scrollLeft * modifier;\n    return rect;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} children\n * @param {?} parent\n * @param {?=} fixedPosition\n * @return {?}\n */\nfunction getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n    const /** @type {?} */ isIE10 = isIE(10);\n    const /** @type {?} */ isHTML = parent.nodeName === 'HTML';\n    const /** @type {?} */ childrenRect = getBoundingClientRect(children);\n    const /** @type {?} */ parentRect = getBoundingClientRect(parent);\n    const /** @type {?} */ scrollParent = getScrollParent(children);\n    const /** @type {?} */ styles = getStyleComputedProperty(parent);\n    const /** @type {?} */ borderTopWidth = parseFloat(styles.borderTopWidth);\n    const /** @type {?} */ borderLeftWidth = parseFloat(styles.borderLeftWidth);\n    // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n    if (fixedPosition && isHTML) {\n        parentRect.top = Math.max(parentRect.top, 0);\n        parentRect.left = Math.max(parentRect.left, 0);\n    }\n    let /** @type {?} */ offsets = getClientRect({\n        top: childrenRect.top - parentRect.top - borderTopWidth,\n        left: childrenRect.left - parentRect.left - borderLeftWidth,\n        width: childrenRect.width,\n        height: childrenRect.height\n    });\n    offsets.marginTop = 0;\n    offsets.marginLeft = 0;\n    // Subtract margins of documentElement in case it's being used as parent\n    // we do this only on HTML because it's the only element that behaves\n    // differently when margins are applied to it. The margins are included in\n    // the box of the documentElement, in the other cases not.\n    if (!isIE10 && isHTML) {\n        const /** @type {?} */ marginTop = parseFloat(styles.marginTop);\n        const /** @type {?} */ marginLeft = parseFloat(styles.marginLeft);\n        offsets.top -= borderTopWidth - marginTop;\n        offsets.bottom -= borderTopWidth - marginTop;\n        offsets.left -= borderLeftWidth - marginLeft;\n        offsets.right -= borderLeftWidth - marginLeft;\n        // Attach marginTop and marginLeft because in some circumstances we may need them\n        offsets.marginTop = marginTop;\n        offsets.marginLeft = marginLeft;\n    }\n    if (isIE10 && !fixedPosition\n        ? parent.contains(scrollParent)\n        : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n        offsets = includeScroll(offsets, parent);\n    }\n    return offsets;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @param {?=} excludeScroll\n * @return {?}\n */\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n    const /** @type {?} */ html = element.ownerDocument.documentElement;\n    const /** @type {?} */ relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n    const /** @type {?} */ width = Math.max(html.clientWidth, window.innerWidth || 0);\n    const /** @type {?} */ height = Math.max(html.clientHeight, window.innerHeight || 0);\n    const /** @type {?} */ scrollTop = !excludeScroll ? getScroll(html) : 0;\n    const /** @type {?} */ scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n    const /** @type {?} */ offset = {\n        top: scrollTop - Number(relativeOffset.top) + Number(relativeOffset.marginTop),\n        left: scrollLeft - Number(relativeOffset.left) + Number(relativeOffset.marginLeft),\n        width,\n        height\n    };\n    return getClientRect(offset);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction isFixed(element) {\n    const /** @type {?} */ nodeName = element.nodeName;\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n        return false;\n    }\n    if (getStyleComputedProperty(element, 'position') === 'fixed') {\n        return true;\n    }\n    return isFixed(getParentNode(element));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @return {?}\n */\nfunction getFixedPositionOffsetParent(element) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element || !element.parentElement || isIE()) {\n        return document.documentElement;\n    }\n    let /** @type {?} */ el = element.parentElement;\n    while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n        el = el.parentElement;\n    }\n    return el || document.documentElement;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} padding\n * @param {?=} boundariesElement\n * @param {?=} fixedPosition\n * @return {?}\n */\nfunction getBoundaries(target, host, padding = 0, boundariesElement, fixedPosition = false) {\n    // NOTE: 1 DOM access here\n    let /** @type {?} */ boundaries = { top: 0, left: 0 };\n    const /** @type {?} */ offsetParent = fixedPosition ? getFixedPositionOffsetParent(target) : findCommonOffsetParent(target, host);\n    // Handle viewport case\n    if (boundariesElement === 'viewport') {\n        boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n    }\n    else {\n        // Handle other cases based on DOM element used as boundaries\n        let /** @type {?} */ boundariesNode;\n        if (boundariesElement === 'scrollParent') {\n            boundariesNode = getScrollParent(getParentNode(host));\n            if (boundariesNode.nodeName === 'BODY') {\n                boundariesNode = target.ownerDocument.documentElement;\n            }\n        }\n        else if (boundariesElement === 'window') {\n            boundariesNode = target.ownerDocument.documentElement;\n        }\n        else {\n            boundariesNode = boundariesElement;\n        }\n        const /** @type {?} */ offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n        // In case of HTML, we need a different computation\n        if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n            const { height, width } = getWindowSizes(target.ownerDocument);\n            boundaries.top += offsets.top - offsets.marginTop;\n            boundaries.bottom = Number(height) + Number(offsets.top);\n            boundaries.left += offsets.left - offsets.marginLeft;\n            boundaries.right = Number(width) + Number(offsets.left);\n        }\n        else {\n            // for all the other DOM elements, this one is good\n            boundaries = offsets;\n        }\n    }\n    // Add paddings\n    boundaries.left += padding;\n    boundaries.top += padding;\n    boundaries.right -= padding;\n    boundaries.bottom -= padding;\n    return boundaries;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getArea({ width, height }) {\n    return width * height;\n}\n/**\n * @param {?} placement\n * @param {?} refRect\n * @param {?} target\n * @param {?} host\n * @param {?} boundariesElement\n * @param {?=} padding\n * @return {?}\n */\nfunction computeAutoPlacement(placement, refRect, target, host, boundariesElement, padding = 0) {\n    if (placement.indexOf('auto') === -1) {\n        return placement;\n    }\n    if (placement.indexOf('auto') !== -1\n        && (placement.indexOf('left') !== -1\n            || placement.indexOf('right') !== -1\n            || placement.indexOf('top') !== -1\n            || placement.indexOf('bottom') !== -1)) {\n        return placement.split(' ')[1] || '';\n    }\n    const /** @type {?} */ boundaries = getBoundaries(target, host, padding, boundariesElement);\n    const /** @type {?} */ rects = {\n        top: {\n            width: boundaries.width,\n            height: refRect.top - boundaries.top\n        },\n        right: {\n            width: boundaries.right - refRect.right,\n            height: boundaries.height\n        },\n        bottom: {\n            width: boundaries.width,\n            height: boundaries.bottom - refRect.bottom\n        },\n        left: {\n            width: refRect.left - boundaries.left,\n            height: boundaries.height\n        }\n    };\n    const /** @type {?} */ sortedAreas = Object.keys(rects)\n        .map(key => (Object.assign({ key }, rects[key], { area: getArea(rects[key]) })))\n        .sort((a, b) => b.area - a.area);\n    const /** @type {?} */ filteredAreas = sortedAreas.filter(({ width, height }) => width >= target.clientWidth && height >= target.clientHeight);\n    const /** @type {?} */ computedPlacement = filteredAreas.length > 0\n        ? filteredAreas[0].key\n        : sortedAreas[0].key;\n    const /** @type {?} */ variation = placement.split(' ')[1];\n    target.className = target.className.replace(/auto/g, computedPlacement);\n    return computedPlacement + (variation ? `-${variation}` : '');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @return {?}\n */\nfunction getOffsets(data) {\n    return {\n        width: data.offsets.target.width,\n        height: data.offsets.target.height,\n        left: Math.floor(data.offsets.target.left),\n        top: Math.round(data.offsets.target.top),\n        bottom: Math.round(data.offsets.target.bottom),\n        right: Math.floor(data.offsets.target.right)\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Get the opposite placement of the given one\n * @param {?} placement\n * @return {?}\n */\nfunction getOppositePlacement(placement) {\n    const /** @type {?} */ hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n    return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Get the opposite placement variation of the given one\n * @param {?} variation\n * @return {?}\n */\nfunction getOppositeVariation(variation) {\n    if (variation === 'right') {\n        return 'left';\n    }\n    else if (variation === 'left') {\n        return 'right';\n    }\n    return variation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @param {?} element\n * @return {?}\n */\nfunction getOuterSizes(element) {\n    const /** @type {?} */ window = element.ownerDocument.defaultView;\n    const /** @type {?} */ styles = window.getComputedStyle(element);\n    const /** @type {?} */ x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n    const /** @type {?} */ y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n    return {\n        width: Number(element.offsetWidth) + y,\n        height: Number(element.offsetHeight) + x\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} fixedPosition\n * @return {?}\n */\nfunction getReferenceOffsets(target, host, fixedPosition = null) {\n    const /** @type {?} */ commonOffsetParent = fixedPosition\n        ? getFixedPositionOffsetParent(target)\n        : findCommonOffsetParent(target, host);\n    return getOffsetRectRelativeToArbitraryNode(host, commonOffsetParent, fixedPosition);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} target\n * @param {?} hostOffsets\n * @param {?} position\n * @return {?}\n */\nfunction getTargetOffsets(target, hostOffsets, position) {\n    const /** @type {?} */ placement = position.split(' ')[0];\n    // Get target node sizes\n    const /** @type {?} */ targetRect = getOuterSizes(target);\n    // Add position, width and height to our offsets object\n    const /** @type {?} */ targetOffsets = {\n        width: targetRect.width,\n        height: targetRect.height\n    };\n    // depending by the target placement we have to compute its offsets slightly differently\n    const /** @type {?} */ isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n    const /** @type {?} */ mainSide = isHoriz ? 'top' : 'left';\n    const /** @type {?} */ secondarySide = isHoriz ? 'left' : 'top';\n    const /** @type {?} */ measurement = isHoriz ? 'height' : 'width';\n    const /** @type {?} */ secondaryMeasurement = !isHoriz ? 'height' : 'width';\n    targetOffsets[mainSide] =\n        hostOffsets[mainSide] +\n            hostOffsets[measurement] / 2 -\n            targetRect[measurement] / 2;\n    targetOffsets[secondarySide] = placement === secondarySide\n        ? hostOffsets[secondarySide] - targetRect[secondaryMeasurement]\n        : hostOffsets[getOppositePlacement(secondarySide)];\n    return targetOffsets;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Tells if a given input is a number\n * @param {?} n\n * @return {?}\n */\nfunction isNumeric(n) {\n    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @param {?=} renderer\n * @return {?}\n */\nfunction setAllStyles$$1(data, renderer) {\n    const /** @type {?} */ target = data.instance.target;\n    const /** @type {?} */ offsets = getOffsets(data);\n    setStyles(target, {\n        'will-change': 'transform',\n        top: '0px',\n        left: '0px',\n        transform: `translate3d(${offsets.left}px, ${offsets.top}px, 0px)`\n    }, renderer);\n    if (data.instance.arrow) {\n        setStyles(data.instance.arrow, data.offsets.arrow, renderer);\n    }\n    if (data.placementAuto) {\n        if (renderer) {\n            renderer.setAttribute(target, 'class', target.className.replace(/bs-popover-auto/g, `bs-popover-${data.placement}`));\n            renderer.setAttribute(target, 'class', target.className.replace(/bs-tooltip-auto/g, `bs-tooltip-${data.placement}`));\n            renderer.setAttribute(target, 'class', target.className.replace(/\\sauto/g, `\\s${data.placement}`));\n            if (target.className.match(/popover/g)) {\n                renderer.addClass(target, 'popover-auto');\n            }\n            if (target.className.match(/tooltip/g)) {\n                renderer.addClass(target, 'tooltip-auto');\n            }\n        }\n        else {\n            target.className = target.className.replace(/bs-popover-auto/g, `bs-popover-${data.placement}`);\n            target.className = target.className.replace(/bs-tooltip-auto/g, `bs-tooltip-${data.placement}`);\n            target.className = target.className.replace(/\\sauto/g, `\\s${data.placement}`);\n            if (target.className.match(/popover/g)) {\n                target.classList.add('popover-auto');\n            }\n            if (target.className.match(/tooltip/g)) {\n                target.classList.add('tooltip-auto');\n            }\n        }\n    }\n    if (renderer) {\n        renderer.setAttribute(target, 'class', target.className.replace(/left|right|top|bottom/g, `${data.placement}`));\n    }\n    else {\n        target.className = target.className.replace(/left|right|top|bottom/g, `${data.placement}`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} element\n * @param {?} styles\n * @param {?=} renderer\n * @return {?}\n */\nfunction setStyles(element, styles, renderer) {\n    Object.keys(styles).forEach((prop) => {\n        let /** @type {?} */ unit = '';\n        // add unit if the value is numeric and is one of the following\n        if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 &&\n            isNumeric(styles[prop])) {\n            unit = 'px';\n        }\n        if (renderer) {\n            renderer.setStyle(element, prop, `${String(styles[prop])}${unit}`);\n            return;\n        }\n        element.style[prop] = String(styles[prop]) + unit;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @return {?}\n */\nfunction arrow(data) {\n    let /** @type {?} */ targetOffsets = data.offsets.target;\n    // if arrowElement is a string, suppose it's a CSS selector\n    const /** @type {?} */ arrowElement = data.instance.target.querySelector('.arrow');\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n        return data;\n    }\n    const /** @type {?} */ isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n    const /** @type {?} */ len = isVertical ? 'height' : 'width';\n    const /** @type {?} */ sideCapitalized = isVertical ? 'Top' : 'Left';\n    const /** @type {?} */ side = sideCapitalized.toLowerCase();\n    const /** @type {?} */ altSide = isVertical ? 'left' : 'top';\n    const /** @type {?} */ opSide = isVertical ? 'bottom' : 'right';\n    const /** @type {?} */ arrowElementSize = getOuterSizes(arrowElement)[len];\n    // top/left side\n    if (data.offsets.host[opSide] - arrowElementSize < targetOffsets[side]) {\n        targetOffsets[side] -=\n            targetOffsets[side] - (data.offsets.host[opSide] - arrowElementSize);\n    }\n    // bottom/right side\n    if (Number(data.offsets.host[side]) + Number(arrowElementSize) > targetOffsets[opSide]) {\n        targetOffsets[side] +=\n            Number(data.offsets.host[side]) + Number(arrowElementSize) - Number(targetOffsets[opSide]);\n    }\n    targetOffsets = getClientRect(targetOffsets);\n    // compute center of the target\n    const /** @type {?} */ center = Number(data.offsets.host[side]) + Number(data.offsets.host[len] / 2 - arrowElementSize / 2);\n    // Compute the sideValue using the updated target offsets\n    // take target margin in account because we don't have this info available\n    const /** @type {?} */ css = getStyleComputedProperty(data.instance.target);\n    const /** @type {?} */ targetMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n    const /** @type {?} */ targetBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n    let /** @type {?} */ sideValue = center - targetOffsets[side] - targetMarginSide - targetBorderSide;\n    // prevent arrowElement from being placed not contiguously to its target\n    sideValue = Math.max(Math.min(targetOffsets[len] - arrowElementSize, sideValue), 0);\n    data.offsets.arrow = {\n        [side]: Math.round(sideValue),\n        [altSide]: '' // make sure to unset any eventual altSide value from the DOM node\n    };\n    data.instance.arrow = arrowElement;\n    return data;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @return {?}\n */\nfunction flip(data) {\n    data.offsets.target = getClientRect(data.offsets.target);\n    const /** @type {?} */ boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n    'viewport', false // positionFixed\n    );\n    let /** @type {?} */ placement = data.placement.split(' ')[0];\n    let /** @type {?} */ variation = data.placement.split(' ')[1] || '';\n    const /** @type {?} */ adaptivePosition = variation\n        ? getOppositePlacement(placement)\n        : computeAutoPlacement('auto', data.offsets.host, data.instance.target, data.instance.host, 'viewport', 0);\n    const /** @type {?} */ flipOrder = [placement, adaptivePosition];\n    /* tslint:disable-next-line: cyclomatic-complexity */\n    flipOrder.forEach((step, index) => {\n        if (placement !== step || flipOrder.length === index + 1) {\n            return data;\n        }\n        placement = data.placement.split(' ')[0];\n        // using floor because the host offsets may contain decimals we are not going to consider here\n        const /** @type {?} */ overlapsRef = (placement === 'left' &&\n            Math.floor(data.offsets.target.right) > Math.floor(data.offsets.host.left)) ||\n            (placement === 'right' &&\n                Math.floor(data.offsets.target.left) < Math.floor(data.offsets.host.right)) ||\n            (placement === 'top' &&\n                Math.floor(data.offsets.target.bottom) > Math.floor(data.offsets.host.top)) ||\n            (placement === 'bottom' &&\n                Math.floor(data.offsets.target.top) < Math.floor(data.offsets.host.bottom));\n        const /** @type {?} */ overflowsLeft = Math.floor(data.offsets.target.left) < Math.floor(boundaries.left);\n        const /** @type {?} */ overflowsRight = Math.floor(data.offsets.target.right) > Math.floor(boundaries.right);\n        const /** @type {?} */ overflowsTop = Math.floor(data.offsets.target.top) < Math.floor(boundaries.top);\n        const /** @type {?} */ overflowsBottom = Math.floor(data.offsets.target.bottom) > Math.floor(boundaries.bottom);\n        const /** @type {?} */ overflowsBoundaries = (placement === 'left' && overflowsLeft) ||\n            (placement === 'right' && overflowsRight) ||\n            (placement === 'top' && overflowsTop) ||\n            (placement === 'bottom' && overflowsBottom);\n        // flip the variation if required\n        const /** @type {?} */ isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n        const /** @type {?} */ flippedVariation = ((isVertical && variation === 'left' && overflowsLeft) ||\n            (isVertical && variation === 'right' && overflowsRight) ||\n            (!isVertical && variation === 'left' && overflowsTop) ||\n            (!isVertical && variation === 'right' && overflowsBottom));\n        if (overlapsRef || overflowsBoundaries || flippedVariation) {\n            // this boolean to detect any flip loop\n            if (overlapsRef || overflowsBoundaries) {\n                placement = flipOrder[index + 1];\n            }\n            if (flippedVariation) {\n                variation = getOppositeVariation(variation);\n            }\n            data.placement = placement + (variation ? ` ${variation}` : '');\n            data.offsets.target = Object.assign({}, data.offsets.target, getTargetOffsets(data.instance.target, data.offsets.host, data.placement));\n        }\n    });\n    return data;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} targetElement\n * @param {?} hostElement\n * @param {?} position\n * @return {?}\n */\nfunction initData(targetElement, hostElement, position) {\n    const /** @type {?} */ hostElPosition = getReferenceOffsets(targetElement, hostElement);\n    const /** @type {?} */ targetOffset = getTargetOffsets(targetElement, hostElPosition, position);\n    const /** @type {?} */ placement = computeAutoPlacement(position, hostElPosition, targetElement, hostElement, 'viewport', 0);\n    const /** @type {?} */ placementAuto = position.indexOf('auto') !== -1;\n    return {\n        instance: {\n            target: targetElement,\n            host: hostElement,\n            arrow: null\n        },\n        offsets: {\n            target: targetOffset,\n            host: hostElPosition,\n            arrow: null\n        },\n        positionFixed: false,\n        placement,\n        placementAuto\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @return {?}\n */\nfunction preventOverflow(data) {\n    // NOTE: DOM access here\n    // resets the targetOffsets's position so that the document size can be calculated excluding\n    // the size of the targetOffsets element itself\n    const /** @type {?} */ transformProp = 'transform';\n    const /** @type {?} */ targetStyles = data.instance.target.style; // assignment to help minification\n    const { top, left, [transformProp]: transform } = targetStyles;\n    targetStyles.top = '';\n    targetStyles.left = '';\n    targetStyles[transformProp] = '';\n    const /** @type {?} */ boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n    'scrollParent', false // positionFixed\n    );\n    // NOTE: DOM access here\n    // restores the original style properties after the offsets have been computed\n    targetStyles.top = top;\n    targetStyles.left = left;\n    targetStyles[transformProp] = transform;\n    const /** @type {?} */ order = ['left', 'right', 'top', 'bottom'];\n    const /** @type {?} */ check = {\n        /**\n         * @param {?} placement\n         * @return {?}\n         */\n        primary(placement) {\n            let /** @type {?} */ value = data.offsets.target[placement];\n            if (data.offsets.target[placement] < boundaries[placement] &&\n                !false // options.escapeWithReference\n            ) {\n                value = Math.max(data.offsets.target[placement], boundaries[placement]);\n            }\n            return { [placement]: value };\n        },\n        /**\n         * @param {?} placement\n         * @return {?}\n         */\n        secondary(placement) {\n            const /** @type {?} */ mainSide = placement === 'right' ? 'left' : 'top';\n            let /** @type {?} */ value = data.offsets.target[mainSide];\n            if (data.offsets.target[placement] > boundaries[placement] &&\n                !false // escapeWithReference\n            ) {\n                value = Math.min(data.offsets.target[mainSide], boundaries[placement] -\n                    (placement === 'right' ? data.offsets.target.width : data.offsets.target.height));\n            }\n            return { [mainSide]: value };\n        }\n    };\n    let /** @type {?} */ side;\n    order.forEach(placement => {\n        side = ['left', 'top']\n            .indexOf(placement) !== -1\n            ? 'primary'\n            : 'secondary';\n        data.offsets.target = Object.assign({}, data.offsets.target, check[side](placement));\n    });\n    return data;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} data\n * @return {?}\n */\nfunction shift(data) {\n    const /** @type {?} */ placement = data.placement;\n    const /** @type {?} */ basePlacement = placement.split(' ')[0];\n    const /** @type {?} */ shiftvariation = placement.split(' ')[1];\n    if (shiftvariation) {\n        const { host, target } = data.offsets;\n        const /** @type {?} */ isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n        const /** @type {?} */ side = isVertical ? 'left' : 'top';\n        const /** @type {?} */ measurement = isVertical ? 'width' : 'height';\n        const /** @type {?} */ shiftOffsets = {\n            left: { [side]: host[side] },\n            right: {\n                [side]: host[side] + host[measurement] - host[measurement]\n            }\n        };\n        data.offsets.target = Object.assign({}, target, shiftOffsets[shiftvariation]);\n    }\n    return data;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Positioning {\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n    position(hostElement, targetElement, round = true) {\n        return this.offset(hostElement, targetElement, false);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n    offset(hostElement, targetElement, round = true) {\n        return getReferenceOffsets(targetElement, hostElement);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?} position\n     * @param {?=} appendToBody\n     * @return {?}\n     */\n    positionElements(hostElement, targetElement, position, appendToBody) {\n        const /** @type {?} */ chainOfModifiers = [flip, shift, preventOverflow, arrow];\n        return chainOfModifiers.reduce((modifiedData, modifier) => modifier(modifiedData), initData(targetElement, hostElement, position));\n    }\n}\nconst /** @type {?} */ positionService = new Positioning();\n/**\n * @param {?} hostElement\n * @param {?} targetElement\n * @param {?} placement\n * @param {?=} appendToBody\n * @param {?=} renderer\n * @return {?}\n */\nfunction positionElements(hostElement, targetElement, placement, appendToBody, renderer) {\n    const /** @type {?} */ data = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n    setAllStyles$$1(data, renderer);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass PositioningService {\n    /**\n     * @param {?} rendererFactory\n     */\n    constructor(rendererFactory) {\n        this.update$$ = new Subject();\n        this.events$ = merge(fromEvent(window, 'scroll'), fromEvent(window, 'resize'), of(0, animationFrameScheduler), this.update$$);\n        this.positionElements = new Map();\n        this.events$\n            .subscribe(() => {\n            this.positionElements\n                .forEach((positionElement) => {\n                positionElements(_getHtmlElement(positionElement.target), _getHtmlElement(positionElement.element), positionElement.attachment, positionElement.appendToBody, rendererFactory.createRenderer(null, null));\n            });\n        });\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    position(options) {\n        this.addPositionElement(options);\n        this.update$$.next();\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    addPositionElement(options) {\n        this.positionElements.set(_getHtmlElement(options.element), options);\n    }\n    /**\n     * @param {?} elRef\n     * @return {?}\n     */\n    deletePositionElement(elRef) {\n        this.positionElements.delete(_getHtmlElement(elRef));\n    }\n}\nPositioningService.Éµfac = function PositioningService_Factory(t) { return new (t || PositioningService)(Éµngcc0.ÉµÉµinject(Éµngcc0.RendererFactory2)); };\nPositioningService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: PositioningService, factory: PositioningService.Éµfac });\n/** @nocollapse */\nPositioningService.ctorParameters = () => [\n    { type: RendererFactory2, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PositioningService, [{\n        type: Injectable\n    }], function () { return [{ type: Éµngcc0.RendererFactory2 }]; }, null); })();\n/**\n * @param {?} element\n * @return {?}\n */\nfunction _getHtmlElement(element) {\n    // it means that we got a selector\n    if (typeof element === 'string') {\n        return document.querySelector(element);\n    }\n    if (element instanceof ElementRef) {\n        return element.nativeElement;\n    }\n    return element;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { positionElements, Positioning, PositioningService };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"metadata":{},"sourceType":"module"}