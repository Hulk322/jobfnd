{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isDevMode } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\n\nvar Trigger = /*#__PURE__*/function () {\n  /**\n   * @param {?} open\n   * @param {?=} close\n   */\n  function Trigger(open, close) {\n    _classCallCheck(this, Trigger);\n\n    this.open = open;\n    this.close = close || open;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Trigger, [{\n    key: \"isManual\",\n    value: function isManual() {\n      return this.open === 'manual' || this.close === 'manual';\n    }\n  }]);\n\n  return Trigger;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nDEFAULT_ALIASES = {\n  hover: ['mouseover', 'mouseout'],\n  focus: ['focusin', 'focusout']\n};\n/**\n * @param {?} triggers\n * @param {?=} aliases\n * @return {?}\n */\n\nfunction parseTriggers(triggers) {\n  var aliases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ALIASES;\n  var\n  /** @type {?} */\n  trimmedTriggers = (triggers || '').trim();\n\n  if (trimmedTriggers.length === 0) {\n    return [];\n  }\n\n  var\n  /** @type {?} */\n  parsedTriggers = trimmedTriggers.split(/\\s+/).map(function (trigger) {\n    return trigger.split(':');\n  }).map(function (triggerPair) {\n    var\n    /** @type {?} */\n    alias = aliases[triggerPair[0]] || triggerPair;\n    return new Trigger(alias[0], alias[1]);\n  });\n  var\n  /** @type {?} */\n  manualTriggers = parsedTriggers.filter(function (triggerPair) {\n    return triggerPair.isManual();\n  });\n\n  if (manualTriggers.length > 1) {\n    throw new Error('Triggers parse error: only one manual trigger is allowed');\n  }\n\n  if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n    throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\n  }\n\n  return parsedTriggers;\n}\n/**\n * @param {?} renderer\n * @param {?} target\n * @param {?} triggers\n * @param {?} showFn\n * @param {?} hideFn\n * @param {?} toggleFn\n * @return {?}\n */\n\n\nfunction listenToTriggers(renderer,\n/* tslint:disable-next-line: no-any */\n\n/* tslint:disable-next-line: no-any */\ntarget, triggers, showFn, hideFn, toggleFn) {\n  var\n  /** @type {?} */\n  parsedTriggers = parseTriggers(triggers);\n  /* tslint:disable-next-line: no-any */\n\n  var\n  /** @type {?} */\n  listeners = [];\n\n  if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n    return Function.prototype;\n  }\n\n  parsedTriggers.forEach(function (trigger) {\n    if (trigger.open === trigger.close) {\n      listeners.push(renderer.listen(target, trigger.open, toggleFn));\n      return;\n    }\n\n    listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));\n  });\n  return function () {\n    listeners.forEach(function (unsubscribeFn) {\n      return unsubscribeFn();\n    });\n  };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\n\n\nfunction listenToTriggersV2(renderer, options) {\n  var\n  /** @type {?} */\n  parsedTriggers = parseTriggers(options.triggers);\n  var\n  /** @type {?} */\n  target = options.target; // do nothing\n\n  if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n    return Function.prototype;\n  } // all listeners\n\n  /* tslint:disable-next-line: no-any */\n\n\n  var\n  /** @type {?} */\n  listeners = []; // lazy listeners registration\n\n  var\n  /** @type {?} */\n  _registerHide = [];\n\n  var\n  /** @type {?} */\n  registerHide = function registerHide() {\n    // add hide listeners to unregister array\n    _registerHide.forEach(function (fn) {\n      return listeners.push(fn());\n    }); // register hide events only once\n\n\n    _registerHide.length = 0;\n  }; // register open\\close\\toggle listeners\n\n\n  parsedTriggers.forEach(function (trigger) {\n    var\n    /** @type {?} */\n    useToggle = trigger.open === trigger.close;\n    var\n    /** @type {?} */\n    showFn = useToggle ? options.toggle : options.show;\n\n    if (!useToggle) {\n      _registerHide.push(function () {\n        return renderer.listen(target, trigger.close, options.hide);\n      });\n    }\n\n    listeners.push(renderer.listen(target, trigger.open, function () {\n      return showFn(registerHide);\n    }));\n  });\n  return function () {\n    listeners.forEach(function (unsubscribeFn) {\n      return unsubscribeFn();\n    });\n  };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\n\n\nfunction registerOutsideClick(renderer, options) {\n  if (!options.outsideClick) {\n    return Function.prototype;\n  }\n  /* tslint:disable-next-line: no-any */\n\n\n  return renderer.listen('document', 'click', function (event) {\n    if (options.target && options.target.contains(event.target)) {\n      return undefined;\n    }\n\n    if (options.targets && options.targets.some(function (target) {\n      return target.contains(event.target);\n    })) {\n      return undefined;\n    }\n\n    options.hide();\n  });\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\n\n\nfunction registerEscClick(renderer, options) {\n  if (!options.outsideEsc) {\n    return Function.prototype;\n  }\n\n  return renderer.listen('document', 'keyup.esc', function (event) {\n    if (options.target && options.target.contains(event.target)) {\n      return undefined;\n    }\n\n    if (options.targets && options.targets.some(function (target) {\n      return target.contains(event.target);\n    })) {\n      return undefined;\n    }\n\n    options.hide();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * JS version of browser APIs. This library can only run in the browser.\n */\n\n\nvar\n/** @type {?} */\nwin = typeof window !== 'undefined' && window ||\n/** @type {?} */\n{};\nvar\n/** @type {?} */\ndocument$1 = win.document;\nvar\n/** @type {?} */\nlocation = win.location;\nvar\n/** @type {?} */\ngc = win.gc ? function () {\n  return win.gc();\n} : function () {\n  return null;\n};\nvar\n/** @type {?} */\nperformance = win.performance ? win.performance : null;\nvar\n/** @type {?} */\nEvent = win.Event;\nvar\n/** @type {?} */\nMouseEvent = win.MouseEvent;\nvar\n/** @type {?} */\nKeyboardEvent = win.KeyboardEvent;\nvar\n/** @type {?} */\nEventTarget = win.EventTarget;\nvar\n/** @type {?} */\nHistory = win.History;\nvar\n/** @type {?} */\nLocation = win.Location;\nvar\n/** @type {?} */\nEventListener = win.EventListener;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\nguessedVersion;\n/**\n * @return {?}\n */\n\nfunction _guessBsVersion() {\n  if (typeof document === 'undefined') {\n    return null;\n  }\n\n  var\n  /** @type {?} */\n  spanEl = document.createElement('span');\n  spanEl.innerText = 'test bs version';\n  document.body.appendChild(spanEl);\n  spanEl.classList.add('d-none');\n  var\n  /** @type {?} */\n  rect = spanEl.getBoundingClientRect();\n  document.body.removeChild(spanEl);\n\n  if (!rect) {\n    return 'bs3';\n  }\n\n  return rect.top === 0 ? 'bs4' : 'bs3';\n}\n/**\n * @param {?} theme\n * @return {?}\n */\n\n\nfunction setTheme(theme) {\n  guessedVersion = theme;\n}\n/**\n * @return {?}\n */\n\n\nfunction isBs3() {\n  if (typeof win === 'undefined') {\n    return true;\n  }\n\n  if (typeof win.__theme === 'undefined') {\n    if (guessedVersion) {\n      return guessedVersion === 'bs3';\n    }\n\n    guessedVersion = _guessBsVersion();\n    return guessedVersion === 'bs3';\n  }\n\n  return win.__theme !== 'bs4';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar LinkedList = /*#__PURE__*/function () {\n  function LinkedList() {\n    _classCallCheck(this, LinkedList);\n\n    this.length = 0;\n    this.asArray = [];\n  }\n  /**\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _createClass(LinkedList, [{\n    key: \"get\",\n    value: function get(position) {\n      if (this.length === 0 || position < 0 || position >= this.length) {\n        return void 0;\n      }\n\n      var\n      /** @type {?} */\n      current = this.head;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < position; index++) {\n        current = current.next;\n      }\n\n      return current.value;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n\n      if (position < 0 || position > this.length) {\n        throw new Error('Position is out of the list');\n      }\n      /* tslint:disable-next-line: no-any*/\n\n\n      var\n      /** @type {?} */\n      node = {\n        value: value,\n        next: undefined,\n        previous: undefined\n      };\n\n      if (this.length === 0) {\n        this.head = node;\n        this.tail = node;\n        this.current = node;\n      } else {\n        if (position === 0) {\n          // first node\n          node.next = this.head;\n          this.head.previous = node;\n          this.head = node;\n        } else if (position === this.length) {\n          // last node\n          this.tail.next = node;\n          node.previous = this.tail;\n          this.tail = node;\n        } else {\n          // node in middle\n          var\n          /** @type {?} */\n          currentPreviousNode = this.getNode(position - 1);\n          var\n          /** @type {?} */\n          currentNextNode = currentPreviousNode.next;\n          currentPreviousNode.next = node;\n          currentNextNode.previous = node;\n          node.previous = currentPreviousNode;\n          node.next = currentNextNode;\n        }\n      }\n\n      this.length++;\n      this.createInternalArrayRepresentation();\n    }\n    /**\n     * @param {?=} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.length === 0 || position < 0 || position >= this.length) {\n        throw new Error('Position is out of the list');\n      }\n\n      if (position === 0) {\n        // first node\n        this.head = this.head.next;\n\n        if (this.head) {\n          // there is no second node\n          this.head.previous = undefined;\n        } else {\n          // there is no second node\n          this.tail = undefined;\n        }\n      } else if (position === this.length - 1) {\n        // last node\n        this.tail = this.tail.previous;\n        this.tail.next = undefined;\n      } else {\n        // middle node\n        var\n        /** @type {?} */\n        removedNode = this.getNode(position);\n        removedNode.next.previous = removedNode.previous;\n        removedNode.previous.next = removedNode.next;\n      }\n\n      this.length--;\n      this.createInternalArrayRepresentation();\n    }\n    /**\n     * @param {?} position\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(position, value) {\n      if (this.length === 0 || position < 0 || position >= this.length) {\n        throw new Error('Position is out of the list');\n      }\n\n      var\n      /** @type {?} */\n      node = this.getNode(position);\n      node.value = value;\n      this.createInternalArrayRepresentation();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.asArray;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function findAll(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n      /* tslint:disable-next-line: no-any*/\n\n      var\n      /** @type {?} */\n      result = [];\n\n      for (var\n      /** @type {?} */\n      index = 0; index < this.length; index++) {\n        if (fn(current.value, index)) {\n          result.push({\n            index: index,\n            value: current.value\n          });\n        }\n\n        current = current.next;\n      }\n\n      return result;\n    }\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"push\",\n    value: function push() {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      /* tslint:disable-next-line: no-any*/\n      args.forEach(function (arg) {\n        _this.add(arg);\n      });\n      return this.length;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      last = this.tail;\n      this.remove(this.length - 1);\n      return last.value;\n    }\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift() {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      args.reverse();\n      /* tslint:disable-next-line: no-any*/\n\n      args.forEach(function (arg) {\n        _this2.add(arg, 0);\n      });\n      return this.length;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      lastItem = this.head.value;\n      this.remove();\n      return lastItem;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < this.length; index++) {\n        fn(current.value, index);\n        current = current.next;\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(value) {\n      var\n      /** @type {?} */\n      current = this.head;\n      var\n      /** @type {?} */\n      position = 0;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < this.length; index++) {\n        if (current.value === value) {\n          position = index;\n          break;\n        }\n\n        current = current.next;\n      }\n\n      return position;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"some\",\n    value: function some(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n      var\n      /** @type {?} */\n      result = false;\n\n      while (current && !result) {\n        if (fn(current.value)) {\n          result = true;\n          break;\n        }\n\n        current = current.next;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"every\",\n    value: function every(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n      var\n      /** @type {?} */\n      result = true;\n\n      while (current && result) {\n        if (!fn(current.value)) {\n          result = false;\n        }\n\n        current = current.next;\n      }\n\n      return result;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '[Linked List]';\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n      var\n      /** @type {?} */\n      result;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < this.length; index++) {\n        if (fn(current.value, index)) {\n          result = current.value;\n          break;\n        }\n\n        current = current.next;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"findIndex\",\n    value: function findIndex(fn) {\n      var\n      /** @type {?} */\n      current = this.head;\n      var\n      /** @type {?} */\n      result;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < this.length; index++) {\n        if (fn(current.value, index)) {\n          result = index;\n          break;\n        }\n\n        current = current.next;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNode\",\n    value: function getNode(position) {\n      if (this.length === 0 || position < 0 || position >= this.length) {\n        throw new Error('Position is out of the list');\n      }\n\n      var\n      /** @type {?} */\n      current = this.head;\n\n      for (var\n      /** @type {?} */\n      index = 0; index < position; index++) {\n        current = current.next;\n      }\n\n      return current;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"createInternalArrayRepresentation\",\n    value: function createInternalArrayRepresentation() {\n      /* tslint:disable-next-line: no-any*/\n      var\n      /** @type {?} */\n      outArray = [];\n      var\n      /** @type {?} */\n      current = this.head;\n\n      while (current) {\n        outArray.push(current.value);\n        current = current.next;\n      }\n\n      this.asArray = outArray;\n    }\n  }]);\n\n  return LinkedList;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?=} defaultValue\n * @return {?}\n */\n\n\nfunction OnChange(defaultValue) {\n  var\n  /** @type {?} */\n  sufix = 'Change';\n  /* tslint:disable-next-line: no-any */\n\n  return function OnChangeHandler(target, propertyKey) {\n    var\n    /** @type {?} */\n    _key = \" __\".concat(propertyKey, \"Value\");\n\n    Object.defineProperty(target, propertyKey, {\n      /**\n       * @return {?}\n       */\n      get: function get() {\n        return this[_key];\n      },\n\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      set: function set(value) {\n        var\n        /** @type {?} */\n        prevValue = this[_key];\n        this[_key] = value;\n\n        if (prevValue !== value && this[propertyKey + sufix]) {\n          this[propertyKey + sufix].emit(value);\n        }\n      }\n    });\n  };\n}\n/* tslint:enable */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"reflow\",\n    value:\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    function reflow(element) {\n      /* tslint:disable-next-line: no-any */\n      (function (bs) {\n        return bs;\n      })(element.offsetHeight);\n    }\n    /**\n     * @param {?} elem\n     * @return {?}\n     */\n\n  }, {\n    key: \"getStyles\",\n    value: function getStyles(elem) {\n      // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n      // IE throws on elements created in popups\n      // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n      var\n      /** @type {?} */\n      view = elem.ownerDocument.defaultView;\n\n      if (!view || !view.opener) {\n        view = win;\n      }\n\n      return view.getComputedStyle(elem);\n    }\n  }]);\n\n  return Utils;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\n_messagesHash = {};\n\nvar\n/** @type {?} */\n_hideMsg = typeof console === 'undefined' || !('warn' in console);\n/**\n * @param {?} msg\n * @return {?}\n */\n\n\nfunction warnOnce(msg) {\n  if (!isDevMode() || _hideMsg || msg in _messagesHash) {\n    return;\n  }\n\n  _messagesHash[msg] = true;\n  /*tslint:disable-next-line*/\n\n  console.warn(msg);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { isBs3, LinkedList, listenToTriggersV2, registerOutsideClick, registerEscClick, OnChange, setTheme, Trigger, Utils, win as window, document$1 as document, warnOnce, parseTriggers, listenToTriggers }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ngx-bootstrap/__ivy_ngcc__/utils/fesm2015/ngx-bootstrap-utils.js"],"names":["isDevMode","Trigger","open","close","DEFAULT_ALIASES","hover","focus","parseTriggers","triggers","aliases","trimmedTriggers","trim","length","parsedTriggers","split","map","trigger","triggerPair","alias","manualTriggers","filter","isManual","Error","listenToTriggers","renderer","target","showFn","hideFn","toggleFn","listeners","Function","prototype","forEach","push","listen","unsubscribeFn","listenToTriggersV2","options","_registerHide","registerHide","fn","useToggle","toggle","show","hide","registerOutsideClick","outsideClick","event","contains","undefined","targets","some","registerEscClick","outsideEsc","win","window","document$1","document","location","gc","performance","Event","MouseEvent","KeyboardEvent","EventTarget","History","Location","EventListener","guessedVersion","_guessBsVersion","spanEl","createElement","innerText","body","appendChild","classList","add","rect","getBoundingClientRect","removeChild","top","setTheme","theme","isBs3","__theme","LinkedList","asArray","position","current","head","index","next","value","node","previous","tail","currentPreviousNode","getNode","currentNextNode","createInternalArrayRepresentation","removedNode","result","args","arg","last","remove","reverse","lastItem","outArray","OnChange","defaultValue","sufix","OnChangeHandler","propertyKey","_key","Object","defineProperty","get","set","prevValue","emit","Utils","element","bs","offsetHeight","elem","view","ownerDocument","defaultView","opener","getComputedStyle","_messagesHash","_hideMsg","console","warnOnce","msg","warn"],"mappings":"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","sourcesContent":["import { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\nclass Trigger {\n    /**\n     * @param {?} open\n     * @param {?=} close\n     */\n    constructor(open, close) {\n        this.open = open;\n        this.close = close || open;\n    }\n    /**\n     * @return {?}\n     */\n    isManual() {\n        return this.open === 'manual' || this.close === 'manual';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ DEFAULT_ALIASES = {\n    hover: ['mouseover', 'mouseout'],\n    focus: ['focusin', 'focusout']\n};\n/**\n * @param {?} triggers\n * @param {?=} aliases\n * @return {?}\n */\nfunction parseTriggers(triggers, aliases = DEFAULT_ALIASES) {\n    const /** @type {?} */ trimmedTriggers = (triggers || '').trim();\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n    const /** @type {?} */ parsedTriggers = trimmedTriggers\n        .split(/\\s+/)\n        .map((trigger) => trigger.split(':'))\n        .map((triggerPair) => {\n        const /** @type {?} */ alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n    const /** @type {?} */ manualTriggers = parsedTriggers.filter((triggerPair) => triggerPair.isManual());\n    if (manualTriggers.length > 1) {\n        throw new Error('Triggers parse error: only one manual trigger is allowed');\n    }\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\n    }\n    return parsedTriggers;\n}\n/**\n * @param {?} renderer\n * @param {?} target\n * @param {?} triggers\n * @param {?} showFn\n * @param {?} hideFn\n * @param {?} toggleFn\n * @return {?}\n */\nfunction listenToTriggers(renderer, /* tslint:disable-next-line: no-any */\n/* tslint:disable-next-line: no-any */\ntarget, triggers, showFn, hideFn, toggleFn) {\n    const /** @type {?} */ parsedTriggers = parseTriggers(triggers);\n    /* tslint:disable-next-line: no-any */\n    const /** @type {?} */ listeners = [];\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    parsedTriggers.forEach((trigger) => {\n        if (trigger.open === trigger.close) {\n            listeners.push(renderer.listen(target, trigger.open, toggleFn));\n            return;\n        }\n        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));\n    });\n    return () => {\n        listeners.forEach((unsubscribeFn) => unsubscribeFn());\n    };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\nfunction listenToTriggersV2(renderer, options) {\n    const /** @type {?} */ parsedTriggers = parseTriggers(options.triggers);\n    const /** @type {?} */ target = options.target;\n    // do nothing\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    // all listeners\n    /* tslint:disable-next-line: no-any */\n    const /** @type {?} */ listeners = [];\n    // lazy listeners registration\n    const /** @type {?} */ _registerHide = [];\n    const /** @type {?} */ registerHide = () => {\n        // add hide listeners to unregister array\n        _registerHide.forEach((fn) => listeners.push(fn()));\n        // register hide events only once\n        _registerHide.length = 0;\n    };\n    // register open\\close\\toggle listeners\n    parsedTriggers.forEach((trigger) => {\n        const /** @type {?} */ useToggle = trigger.open === trigger.close;\n        const /** @type {?} */ showFn = useToggle ? options.toggle : options.show;\n        if (!useToggle) {\n            _registerHide.push(() => renderer.listen(target, trigger.close, options.hide));\n        }\n        listeners.push(renderer.listen(target, trigger.open, () => showFn(registerHide)));\n    });\n    return () => {\n        listeners.forEach((unsubscribeFn) => unsubscribeFn());\n    };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\nfunction registerOutsideClick(renderer, options) {\n    if (!options.outsideClick) {\n        return Function.prototype;\n    }\n    /* tslint:disable-next-line: no-any */\n    return renderer.listen('document', 'click', (event) => {\n        if (options.target && options.target.contains(event.target)) {\n            return undefined;\n        }\n        if (options.targets &&\n            options.targets.some(target => target.contains(event.target))) {\n            return undefined;\n        }\n        options.hide();\n    });\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\nfunction registerEscClick(renderer, options) {\n    if (!options.outsideEsc) {\n        return Function.prototype;\n    }\n    return renderer.listen('document', 'keyup.esc', (event) => {\n        if (options.target && options.target.contains(event.target)) {\n            return undefined;\n        }\n        if (options.targets &&\n            options.targets.some(target => target.contains(event.target))) {\n            return undefined;\n        }\n        options.hide();\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * JS version of browser APIs. This library can only run in the browser.\n */\nconst /** @type {?} */ win = (typeof window !== 'undefined' && window) || /** @type {?} */ ({});\nconst /** @type {?} */ document$1 = win.document;\nconst /** @type {?} */ location = win.location;\nconst /** @type {?} */ gc = win.gc ? () => win.gc() : () => null;\nconst /** @type {?} */ performance = win.performance ? win.performance : null;\nconst /** @type {?} */ Event = win.Event;\nconst /** @type {?} */ MouseEvent = win.MouseEvent;\nconst /** @type {?} */ KeyboardEvent = win.KeyboardEvent;\nconst /** @type {?} */ EventTarget = win.EventTarget;\nconst /** @type {?} */ History = win.History;\nconst /** @type {?} */ Location = win.Location;\nconst /** @type {?} */ EventListener = win.EventListener;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet /** @type {?} */ guessedVersion;\n/**\n * @return {?}\n */\nfunction _guessBsVersion() {\n    if (typeof document === 'undefined') {\n        return null;\n    }\n    const /** @type {?} */ spanEl = document.createElement('span');\n    spanEl.innerText = 'test bs version';\n    document.body.appendChild(spanEl);\n    spanEl.classList.add('d-none');\n    const /** @type {?} */ rect = spanEl.getBoundingClientRect();\n    document.body.removeChild(spanEl);\n    if (!rect) {\n        return 'bs3';\n    }\n    return rect.top === 0 ? 'bs4' : 'bs3';\n}\n/**\n * @param {?} theme\n * @return {?}\n */\nfunction setTheme(theme) {\n    guessedVersion = theme;\n}\n/**\n * @return {?}\n */\nfunction isBs3() {\n    if (typeof win === 'undefined') {\n        return true;\n    }\n    if (typeof win.__theme === 'undefined') {\n        if (guessedVersion) {\n            return guessedVersion === 'bs3';\n        }\n        guessedVersion = _guessBsVersion();\n        return guessedVersion === 'bs3';\n    }\n    return win.__theme !== 'bs4';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n */\nclass LinkedList {\n    constructor() {\n        this.length = 0;\n        this.asArray = [];\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    get(position) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            return void 0;\n        }\n        let /** @type {?} */ current = this.head;\n        for (let /** @type {?} */ index = 0; index < position; index++) {\n            current = current.next;\n        }\n        return current.value;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} position\n     * @return {?}\n     */\n    add(value, position = this.length) {\n        if (position < 0 || position > this.length) {\n            throw new Error('Position is out of the list');\n        }\n        /* tslint:disable-next-line: no-any*/\n        const /** @type {?} */ node = {\n            value,\n            next: undefined,\n            previous: undefined\n        };\n        if (this.length === 0) {\n            this.head = node;\n            this.tail = node;\n            this.current = node;\n        }\n        else {\n            if (position === 0) {\n                // first node\n                node.next = this.head;\n                this.head.previous = node;\n                this.head = node;\n            }\n            else if (position === this.length) {\n                // last node\n                this.tail.next = node;\n                node.previous = this.tail;\n                this.tail = node;\n            }\n            else {\n                // node in middle\n                const /** @type {?} */ currentPreviousNode = this.getNode(position - 1);\n                const /** @type {?} */ currentNextNode = currentPreviousNode.next;\n                currentPreviousNode.next = node;\n                currentNextNode.previous = node;\n                node.previous = currentPreviousNode;\n                node.next = currentNextNode;\n            }\n        }\n        this.length++;\n        this.createInternalArrayRepresentation();\n    }\n    /**\n     * @param {?=} position\n     * @return {?}\n     */\n    remove(position = 0) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        if (position === 0) {\n            // first node\n            this.head = this.head.next;\n            if (this.head) {\n                // there is no second node\n                this.head.previous = undefined;\n            }\n            else {\n                // there is no second node\n                this.tail = undefined;\n            }\n        }\n        else if (position === this.length - 1) {\n            // last node\n            this.tail = this.tail.previous;\n            this.tail.next = undefined;\n        }\n        else {\n            // middle node\n            const /** @type {?} */ removedNode = this.getNode(position);\n            removedNode.next.previous = removedNode.previous;\n            removedNode.previous.next = removedNode.next;\n        }\n        this.length--;\n        this.createInternalArrayRepresentation();\n    }\n    /**\n     * @param {?} position\n     * @param {?} value\n     * @return {?}\n     */\n    set(position, value) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        const /** @type {?} */ node = this.getNode(position);\n        node.value = value;\n        this.createInternalArrayRepresentation();\n    }\n    /**\n     * @return {?}\n     */\n    toArray() {\n        return this.asArray;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    findAll(fn) {\n        let /** @type {?} */ current = this.head;\n        /* tslint:disable-next-line: no-any*/\n        const /** @type {?} */ result = [];\n        for (let /** @type {?} */ index = 0; index < this.length; index++) {\n            if (fn(current.value, index)) {\n                result.push({ index, value: current.value });\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    push(...args) {\n        /* tslint:disable-next-line: no-any*/\n        args.forEach((arg) => {\n            this.add(arg);\n        });\n        return this.length;\n    }\n    /**\n     * @return {?}\n     */\n    pop() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        const /** @type {?} */ last = this.tail;\n        this.remove(this.length - 1);\n        return last.value;\n    }\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    unshift(...args) {\n        args.reverse();\n        /* tslint:disable-next-line: no-any*/\n        args.forEach((arg) => {\n            this.add(arg, 0);\n        });\n        return this.length;\n    }\n    /**\n     * @return {?}\n     */\n    shift() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        const /** @type {?} */ lastItem = this.head.value;\n        this.remove();\n        return lastItem;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        let /** @type {?} */ current = this.head;\n        for (let /** @type {?} */ index = 0; index < this.length; index++) {\n            fn(current.value, index);\n            current = current.next;\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    indexOf(value) {\n        let /** @type {?} */ current = this.head;\n        let /** @type {?} */ position = 0;\n        for (let /** @type {?} */ index = 0; index < this.length; index++) {\n            if (current.value === value) {\n                position = index;\n                break;\n            }\n            current = current.next;\n        }\n        return position;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        let /** @type {?} */ current = this.head;\n        let /** @type {?} */ result = false;\n        while (current && !result) {\n            if (fn(current.value)) {\n                result = true;\n                break;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    every(fn) {\n        let /** @type {?} */ current = this.head;\n        let /** @type {?} */ result = true;\n        while (current && result) {\n            if (!fn(current.value)) {\n                result = false;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return '[Linked List]';\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        let /** @type {?} */ current = this.head;\n        let /** @type {?} */ result;\n        for (let /** @type {?} */ index = 0; index < this.length; index++) {\n            if (fn(current.value, index)) {\n                result = current.value;\n                break;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    findIndex(fn) {\n        let /** @type {?} */ current = this.head;\n        let /** @type {?} */ result;\n        for (let /** @type {?} */ index = 0; index < this.length; index++) {\n            if (fn(current.value, index)) {\n                result = index;\n                break;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    getNode(position) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        let /** @type {?} */ current = this.head;\n        for (let /** @type {?} */ index = 0; index < position; index++) {\n            current = current.next;\n        }\n        return current;\n    }\n    /**\n     * @return {?}\n     */\n    createInternalArrayRepresentation() {\n        /* tslint:disable-next-line: no-any*/\n        const /** @type {?} */ outArray = [];\n        let /** @type {?} */ current = this.head;\n        while (current) {\n            outArray.push(current.value);\n            current = current.next;\n        }\n        this.asArray = outArray;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} defaultValue\n * @return {?}\n */\nfunction OnChange(defaultValue) {\n    const /** @type {?} */ sufix = 'Change';\n    /* tslint:disable-next-line: no-any */\n    return function OnChangeHandler(target, propertyKey) {\n        const /** @type {?} */ _key = ` __${propertyKey}Value`;\n        Object.defineProperty(target, propertyKey, {\n            /**\n             * @return {?}\n             */\n            get() {\n                return this[_key];\n            },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set(value) {\n                const /** @type {?} */ prevValue = this[_key];\n                this[_key] = value;\n                if (prevValue !== value && this[propertyKey + sufix]) {\n                    this[propertyKey + sufix].emit(value);\n                }\n            }\n        });\n    };\n}\n/* tslint:enable */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Utils {\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    static reflow(element) {\n        /* tslint:disable-next-line: no-any */\n        ((bs) => bs)(element.offsetHeight);\n    }\n    /**\n     * @param {?} elem\n     * @return {?}\n     */\n    static getStyles(elem) {\n        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n        // IE throws on elements created in popups\n        // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n        let /** @type {?} */ view = elem.ownerDocument.defaultView;\n        if (!view || !view.opener) {\n            view = win;\n        }\n        return view.getComputedStyle(elem);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ _messagesHash = {};\nconst /** @type {?} */ _hideMsg = typeof console === 'undefined' || !('warn' in console);\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction warnOnce(msg) {\n    if (!isDevMode() || _hideMsg || msg in _messagesHash) {\n        return;\n    }\n    _messagesHash[msg] = true;\n    /*tslint:disable-next-line*/\n    console.warn(msg);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { isBs3, LinkedList, listenToTriggersV2, registerOutsideClick, registerEscClick, OnChange, setTheme, Trigger, Utils, win as window, document$1 as document, warnOnce, parseTriggers, listenToTriggers };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"metadata":{},"sourceType":"module"}