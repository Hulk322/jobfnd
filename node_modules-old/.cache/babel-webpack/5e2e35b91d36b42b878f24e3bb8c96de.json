{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/job_board_fnd/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} n\n * @param {?} x\n * @return {?}\n */\nfunction mod(n, x) {\n  return (n % x + x) % x;\n}\n/**\n * @param {?} num\n * @return {?}\n */\n\n\nfunction absFloor(num) {\n  return num < 0 ? Math.ceil(num) || 0 : Math.floor(num);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction isString(str) {\n  return typeof str === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDate(value) {\n  return value instanceof Date || Object.prototype.toString.call(value) === '[object Date]';\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction isDateValid(date) {\n  return date && date.getTime && !isNaN(date.getTime());\n}\n/**\n * @param {?} fn\n * @return {?}\n */\n\n\nfunction isFunction(fn) {\n  return fn instanceof Function || Object.prototype.toString.call(fn) === '[object Function]';\n}\n/**\n * @param {?=} value\n * @return {?}\n */\n\n\nfunction isNumber(value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n/**\n * @template T\n * @param {?=} input\n * @return {?}\n */\n\n\nfunction isArray(input) {\n  return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n}\n/**\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction hasOwnProp(a\n/*object*/\n, b) {\n  return Object.prototype.hasOwnProperty.call(a, b);\n}\n/**\n * @template T\n * @param {?} input\n * @return {?}\n */\n\n\nfunction isObject(input\n/*object*/\n) {\n  // IE8 will treat undefined and null as object if it wasn't for\n  // input != null\n  return input != null && Object.prototype.toString.call(input) === '[object Object]';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isObjectEmpty(obj) {\n  if (Object.getOwnPropertyNames) {\n    return Object.getOwnPropertyNames(obj).length === 0;\n  }\n\n  var\n  /** @type {?} */\n  k;\n\n  for (k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction isUndefined(input) {\n  return input === void 0;\n}\n/**\n * @template T\n * @param {?} argumentForCoercion\n * @return {?}\n */\n\n\nfunction toInt(argumentForCoercion) {\n  var\n  /** @type {?} */\n  coercedNumber = +argumentForCoercion;\n  var\n  /** @type {?} */\n  value = 0;\n\n  if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n    value = absFloor(coercedNumber);\n  }\n\n  return value;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\naliases = {};\nvar\n/** @type {?} */\n_mapUnits = {\n  date: 'day',\n  hour: 'hours',\n  minute: 'minutes',\n  second: 'seconds',\n  millisecond: 'milliseconds'\n};\n/**\n * @param {?} unit\n * @param {?} shorthand\n * @return {?}\n */\n\nfunction addUnitAlias(unit, shorthand) {\n  var\n  /** @type {?} */\n  lowerCase = unit.toLowerCase();\n  var\n  /** @type {?} */\n  _unit = unit;\n\n  if (lowerCase in _mapUnits) {\n    _unit = _mapUnits[lowerCase];\n  }\n\n  aliases[lowerCase] = aliases[\"\".concat(lowerCase, \"s\")] = aliases[shorthand] = _unit;\n}\n/**\n * @param {?} units\n * @return {?}\n */\n\n\nfunction normalizeUnits(units) {\n  return isString(units) ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n}\n/**\n * @param {?} inputObject\n * @return {?}\n */\n\n\nfunction normalizeObjectUnits(inputObject) {\n  var\n  /** @type {?} */\n  normalizedInput = {};\n  var\n  /** @type {?} */\n  normalizedProp;\n  var\n  /** @type {?} */\n  prop;\n\n  for (prop in inputObject) {\n    if (hasOwnProp(inputObject, prop)) {\n      normalizedProp = normalizeUnits(prop);\n\n      if (normalizedProp) {\n        normalizedInput[normalizedProp] = inputObject[prop];\n      }\n    }\n  }\n\n  return (\n    /** @type {?} */\n    normalizedInput\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// place in new Date([array])\n\n\nvar\n/** @type {?} */\nYEAR = 0;\nvar\n/** @type {?} */\nMONTH = 1;\nvar\n/** @type {?} */\nDATE = 2;\nvar\n/** @type {?} */\nHOUR = 3;\nvar\n/** @type {?} */\nMINUTE = 4;\nvar\n/** @type {?} */\nSECOND = 5;\nvar\n/** @type {?} */\nMILLISECOND = 6;\nvar\n/** @type {?} */\nWEEK = 7;\nvar\n/** @type {?} */\nWEEKDAY = 8;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} num\n * @param {?} targetLength\n * @param {?=} forceSign\n * @return {?}\n */\n\nfunction zeroFill(num, targetLength, forceSign) {\n  var\n  /** @type {?} */\n  absNumber = \"\".concat(Math.abs(num));\n  var\n  /** @type {?} */\n  zerosToFill = targetLength - absNumber.length;\n  var\n  /** @type {?} */\n  sign = num >= 0;\n\n  var\n  /** @type {?} */\n  _sign = sign ? forceSign ? '+' : '' : '-'; // todo: this is crazy slow\n\n\n  var\n  /** @type {?} */\n  _zeros = Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1);\n\n  return _sign + _zeros + absNumber;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nformatFunctions = {};\nvar\n/** @type {?} */\nformatTokenFunctions = {}; // tslint:disable-next-line\n\nvar\n/** @type {?} */\nformattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n/**\n * @param {?} token\n * @param {?} padded\n * @param {?} ordinal\n * @param {?} callback\n * @return {?}\n */\n\nfunction addFormatToken(token, padded, ordinal, callback) {\n  if (token) {\n    formatTokenFunctions[token] = callback;\n  }\n\n  if (padded) {\n    formatTokenFunctions[padded[0]] = function () {\n      return zeroFill(callback.apply(null, arguments), padded[1], padded[2]);\n    };\n  }\n\n  if (ordinal) {\n    formatTokenFunctions[ordinal] = function (date, opts) {\n      return opts.locale.ordinal(callback.apply(null, arguments), token);\n    };\n  }\n}\n/**\n * @param {?} format\n * @return {?}\n */\n\n\nfunction makeFormatFunction(format) {\n  var\n  /** @type {?} */\n  array = format.match(formattingTokens);\n  var\n  /** @type {?} */\n  length = array.length;\n  var\n  /** @type {?} */\n  formatArr = new Array(length);\n\n  for (var\n  /** @type {?} */\n  i = 0; i < length; i++) {\n    formatArr[i] = formatTokenFunctions[array[i]] ? formatTokenFunctions[array[i]] : removeFormattingTokens(array[i]);\n  }\n\n  return function (date, locale, isUTC) {\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var\n    /** @type {?} */\n    output = '';\n\n    for (var\n    /** @type {?} */\n    j = 0; j < length; j++) {\n      output += isFunction(formatArr[j]) ?\n      /** @type {?} */\n      formatArr[j].call(null, date, {\n        format: format,\n        locale: locale,\n        isUTC: isUTC,\n        offset: offset\n      }) : formatArr[j];\n    }\n\n    return output;\n  };\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction removeFormattingTokens(input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|\\]$/g, '');\n  }\n\n  return input.replace(/\\\\/g, '');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?=} y\n * @param {?=} m\n * @param {?=} d\n * @return {?}\n */\n\n\nfunction createUTCDate(y, m, d) {\n  var\n  /** @type {?} */\n  date = new Date(Date.UTC.apply(null, arguments)); // the Date.UTC function remaps years 0-99 to 1900-1999\n\n  if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n    date.setUTCFullYear(y);\n  }\n\n  return date;\n}\n/**\n * @param {?=} y\n * @param {?=} m\n * @param {?=} d\n * @param {?=} h\n * @param {?=} M\n * @param {?=} s\n * @param {?=} ms\n * @return {?}\n */\n\n\nfunction createDate(y) {\n  var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var d = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var M = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var\n  /** @type {?} */\n  date = new Date(y, m, d, h, M, s, ms); // the date constructor remaps years 0-99 to 1900-1999\n\n  if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n    date.setFullYear(y);\n  }\n\n  return date;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getHours(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCHours() : date.getHours();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getMinutes(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCMinutes() : date.getMinutes();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getSeconds(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCSeconds() : date.getSeconds();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getMilliseconds(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCMilliseconds() : date.getMilliseconds();\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction getTime(date) {\n  return date.getTime();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getDay(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCDay() : date.getDay();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getDate(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCDate() : date.getDate();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getMonth(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCMonth() : date.getMonth();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getFullYear(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return isUTC ? date.getUTCFullYear() : date.getFullYear();\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction unix(date) {\n  return Math.floor(date.valueOf() / 1000);\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction getFirstDayOfMonth(date) {\n  return createDate(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes(), date.getSeconds());\n}\n/**\n * @param {?} date\n * @param {?} firstDayOfWeek\n * @return {?}\n */\n\n\nfunction isFirstDayOfWeek(date, firstDayOfWeek) {\n  return date.getDay() === firstDayOfWeek;\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\n\n\nfunction isSameMonth(date1, date2) {\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  return isSameYear(date1, date2) && getMonth(date1) === getMonth(date2);\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\n\n\nfunction isSameYear(date1, date2) {\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  return getFullYear(date1) === getFullYear(date2);\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\n\n\nfunction isSameDay(date1, date2) {\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  return isSameYear(date1, date2) && isSameMonth(date1, date2) && getDate(date1) === getDate(date2);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nmatch1 = /\\d/; //       0 - 9\n\nvar\n/** @type {?} */\nmatch2 = /\\d\\d/; //      00 - 99\n\nvar\n/** @type {?} */\nmatch3 = /\\d{3}/; //     000 - 999\n\nvar\n/** @type {?} */\nmatch4 = /\\d{4}/; //    0000 - 9999\n\nvar\n/** @type {?} */\nmatch6 = /[+-]?\\d{6}/; // -999999 - 999999\n\nvar\n/** @type {?} */\nmatch1to2 = /\\d\\d?/; //       0 - 99\n\nvar\n/** @type {?} */\nmatch3to4 = /\\d\\d\\d\\d?/; //     999 - 9999\n\nvar\n/** @type {?} */\nmatch5to6 = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n\nvar\n/** @type {?} */\nmatch1to3 = /\\d{1,3}/; //       0 - 999\n\nvar\n/** @type {?} */\nmatch1to4 = /\\d{1,4}/; //       0 - 9999\n\nvar\n/** @type {?} */\nmatch1to6 = /[+-]?\\d{1,6}/; // -999999 - 999999\n\nvar\n/** @type {?} */\nmatchUnsigned = /\\d+/; //       0 - inf\n\nvar\n/** @type {?} */\nmatchSigned = /[+-]?\\d+/; //    -inf - inf\n\nvar\n/** @type {?} */\nmatchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\nvar\n/** @type {?} */\nmatchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n// any word (or two) characters or numbers including two/three word month in arabic.\n// includes scottish gaelic two word and hyphenated months\n// tslint:disable-next-line\n\nvar\n/** @type {?} */\nmatchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\nvar\n/** @type {?} */\nregexes = {};\n/**\n * @param {?} token\n * @param {?} regex\n * @param {?=} strictRegex\n * @return {?}\n */\n\nfunction addRegexToken(token, regex, strictRegex) {\n  if (isFunction(regex)) {\n    regexes[token] = regex;\n    return;\n  }\n\n  regexes[token] = function (isStrict, locale) {\n    return isStrict && strictRegex ? strictRegex : regex;\n  };\n}\n/**\n * @param {?} token\n * @param {?} locale\n * @return {?}\n */\n\n\nfunction getParseRegexForToken(token, locale) {\n  var\n  /** @type {?} */\n  _strict = false;\n\n  if (!hasOwnProp(regexes, token)) {\n    return new RegExp(unescapeFormat(token));\n  }\n\n  return regexes[token](_strict, locale);\n}\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction unescapeFormat(str) {\n  // tslint:disable-next-line\n  return regexEscape(str.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n    return p1 || p2 || p3 || p4;\n  }));\n}\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction regexEscape(str) {\n  return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\ntokens = {};\n/**\n * @param {?} token\n * @param {?} callback\n * @return {?}\n */\n\nfunction addParseToken(token, callback) {\n  var\n  /** @type {?} */\n  _token = isString(token) ? [token] : token;\n\n  var\n  /** @type {?} */\n  func = callback;\n\n  if (isNumber(callback)) {\n    func = function func(input, array, config) {\n      array[callback] = toInt(input);\n      return config;\n    };\n  }\n\n  if (isArray(_token) && isFunction(func)) {\n    var\n    /** @type {?} */\n    i;\n\n    for (i = 0; i < _token.length; i++) {\n      tokens[_token[i]] = func;\n    }\n  }\n}\n/**\n * @param {?} token\n * @param {?} callback\n * @return {?}\n */\n\n\nfunction addWeekParseToken(token, callback) {\n  addParseToken(token, function (input, array, config, _token) {\n    config._w = config._w || {};\n    return callback(input, config._w, config, _token);\n  });\n}\n/**\n * @param {?} token\n * @param {?} input\n * @param {?} config\n * @return {?}\n */\n\n\nfunction addTimeToArrayFromToken(token, input, config) {\n  if (input != null && hasOwnProp(tokens, token)) {\n    tokens[token](input, config._a, config, token);\n  }\n\n  return config;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/*\nexport function getPrioritizedUnits(unitsObj) {\n  const units = [];\n  let unit;\n  for (unit in unitsObj) {\n    if (unitsObj.hasOwnProperty(unit)) {\n      units.push({ unit, priority: priorities[unit] });\n    }\n  }\n  units.sort(function (a, b) {\n    return a.priority - b.priority;\n  });\n\n  return units;\n}\n*/\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initDayOfMonth() {\n  // FORMATTING\n  addFormatToken('D', ['DD', 2, false], 'Do', function (date, opts) {\n    return getDate(date, opts.isUTC).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('date', 'D'); // PARSING\n\n  addRegexToken('D', match1to2);\n  addRegexToken('DD', match1to2, match2);\n  addRegexToken('Do', function (isStrict, locale) {\n    return locale._dayOfMonthOrdinalParse || locale._ordinalParse;\n  });\n  addParseToken(['D', 'DD'], DATE);\n  addParseToken('Do', function (input, array, config) {\n    array[DATE] = toInt(input.match(match1to2)[0]);\n    return config;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction defaultParsingFlags() {\n  // We need to deep clone this object.\n  return {\n    empty: false,\n    unusedTokens: [],\n    unusedInput: [],\n    overflow: -2,\n    charsLeftOver: 0,\n    nullInput: false,\n    invalidMonth: null,\n    invalidFormat: false,\n    userInvalidated: false,\n    iso: false,\n    parsedDateParts: [],\n    meridiem: null,\n    rfc2822: false,\n    weekdayMismatch: false\n  };\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction getParsingFlags(config) {\n  if (config._pf == null) {\n    config._pf = defaultParsingFlags();\n  }\n\n  return config._pf;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @param {?} opts\n * @return {?}\n */\n\n\nfunction getYear(date, opts) {\n  return getFullYear(date, opts.isUTC).toString();\n}\n/**\n * @return {?}\n */\n\n\nfunction initYear() {\n  addFormatToken('Y', null, null, function (date, opts) {\n    var\n    /** @type {?} */\n    y = getFullYear(date, opts.isUTC);\n    return y <= 9999 ? y.toString(10) : \"+\".concat(y);\n  });\n  addFormatToken(null, ['YY', 2, false], null, function (date, opts) {\n    return (getFullYear(date, opts.isUTC) % 100).toString(10);\n  });\n  addFormatToken(null, ['YYYY', 4, false], null, getYear);\n  addFormatToken(null, ['YYYYY', 5, false], null, getYear);\n  addFormatToken(null, ['YYYYYY', 6, true], null, getYear); // ALIASES\n\n  addUnitAlias('year', 'y'); // PARSING\n\n  addRegexToken('Y', matchSigned);\n  addRegexToken('YY', match1to2, match2);\n  addRegexToken('YYYY', match1to4, match4);\n  addRegexToken('YYYYY', match1to6, match6);\n  addRegexToken('YYYYYY', match1to6, match6);\n  addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n  addParseToken('YYYY', function (input, array, config) {\n    array[YEAR] = input.length === 2 ? parseTwoDigitYear(input) : toInt(input);\n    return config;\n  });\n  addParseToken('YY', function (input, array, config) {\n    array[YEAR] = parseTwoDigitYear(input);\n    return config;\n  });\n  addParseToken('Y', function (input, array, config) {\n    array[YEAR] = parseInt(input, 10);\n    return config;\n  });\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction parseTwoDigitYear(input) {\n  return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n}\n/**\n * @param {?} year\n * @return {?}\n */\n\n\nfunction daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n/**\n * @param {?} year\n * @return {?}\n */\n\n\nfunction isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} year\n * @param {?} month\n * @return {?}\n */\n\n\nfunction daysInMonth$1(year, month) {\n  if (isNaN(year) || isNaN(month)) {\n    return NaN;\n  }\n\n  var\n  /** @type {?} */\n  modMonth = mod(month, 12);\n\n  var\n  /** @type {?} */\n  _year = year + (month - modMonth) / 12;\n\n  return modMonth === 1 ? isLeapYear(_year) ? 29 : 28 : 31 - modMonth % 7 % 2;\n}\n/**\n * @return {?}\n */\n\n\nfunction initMonth() {\n  // FORMATTING\n  addFormatToken('M', ['MM', 2, false], 'Mo', function (date, opts) {\n    return (getMonth(date, opts.isUTC) + 1).toString(10);\n  });\n  addFormatToken('MMM', null, null, function (date, opts) {\n    return opts.locale.monthsShort(date, opts.format, opts.isUTC);\n  });\n  addFormatToken('MMMM', null, null, function (date, opts) {\n    return opts.locale.months(date, opts.format, opts.isUTC);\n  }); // ALIASES\n\n  addUnitAlias('month', 'M'); // PARSING\n\n  addRegexToken('M', match1to2);\n  addRegexToken('MM', match1to2, match2);\n  addRegexToken('MMM', function (isStrict, locale) {\n    return locale.monthsShortRegex(isStrict);\n  });\n  addRegexToken('MMMM', function (isStrict, locale) {\n    return locale.monthsRegex(isStrict);\n  });\n  addParseToken(['M', 'MM'], function (input, array, config) {\n    array[MONTH] = toInt(input) - 1;\n    return config;\n  });\n  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n    var\n    /** @type {?} */\n    month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.\n\n\n    if (month != null) {\n      array[MONTH] = month;\n    } else {\n      getParsingFlags(config).invalidMonth = !!input;\n    }\n\n    return config;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\ndefaultTimeUnit = {\n  year: 0,\n  month: 0,\n  day: 0,\n  hour: 0,\n  minute: 0,\n  seconds: 0\n};\n/**\n * @param {?} date\n * @param {?} unit\n * @return {?}\n */\n\nfunction shiftDate(date, unit) {\n  var\n  /** @type {?} */\n  _unit = Object.assign({}, defaultTimeUnit, unit);\n\n  var\n  /** @type {?} */\n  year = date.getFullYear() + (_unit.year || 0);\n  var\n  /** @type {?} */\n  month = date.getMonth() + (_unit.month || 0);\n  var\n  /** @type {?} */\n  day = date.getDate() + (_unit.day || 0);\n\n  if (_unit.month && !_unit.day) {\n    day = Math.min(day, daysInMonth$1(year, month));\n  }\n\n  return createDate(year, month, day, date.getHours() + (_unit.hour || 0), date.getMinutes() + (_unit.minute || 0), date.getSeconds() + (_unit.seconds || 0));\n}\n/**\n * @param {?} date\n * @param {?} unit\n * @return {?}\n */\n\n\nfunction setFullDate(date, unit) {\n  return createDate(getNum(date.getFullYear(), unit.year), getNum(date.getMonth(), unit.month), getNum(date.getDate(), unit.day), getNum(date.getHours(), unit.hour), getNum(date.getMinutes(), unit.minute), getNum(date.getSeconds(), unit.seconds), getNum(date.getMilliseconds(), unit.milliseconds));\n}\n/**\n * @param {?} def\n * @param {?=} num\n * @return {?}\n */\n\n\nfunction getNum(def, num) {\n  return isNumber(num) ? num : def;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setMonth(date, value, isUTC) {\n  var\n  /** @type {?} */\n  dayOfMonth = Math.min(getDate(date), daysInMonth$1(getFullYear(date), value));\n  isUTC ? date.setUTCMonth(value, dayOfMonth) : date.setMonth(value, dayOfMonth);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setHours(date, value, isUTC) {\n  isUTC ? date.setUTCHours(value) : date.setHours(value);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setMinutes(date, value, isUTC) {\n  isUTC ? date.setUTCMinutes(value) : date.setMinutes(value);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setSeconds(date, value, isUTC) {\n  isUTC ? date.setUTCSeconds(value) : date.setSeconds(value);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setMilliseconds(date, value, isUTC) {\n  isUTC ? date.setUTCMilliseconds(value) : date.setMilliseconds(value);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setDate(date, value, isUTC) {\n  isUTC ? date.setUTCDate(value) : date.setDate(value);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @return {?}\n */\n\n\nfunction setTime(date, value) {\n  date.setTime(value);\n  return date;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction cloneDate(date) {\n  return new Date(date.getTime());\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @param {?} unit\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction startOf(date, unit, isUTC) {\n  var\n  /** @type {?} */\n  _date = cloneDate(date); // the following switch intentionally omits break keywords\n  // to utilize falling through the cases.\n\n\n  switch (unit) {\n    case 'year':\n      setMonth(_date, 0, isUTC);\n\n    /* falls through */\n\n    case 'quarter':\n    case 'month':\n      setDate(_date, 1, isUTC);\n\n    /* falls through */\n\n    case 'week':\n    case 'isoWeek':\n    case 'day':\n    case 'date':\n      setHours(_date, 0, isUTC);\n\n    /* falls through */\n\n    case 'hours':\n      setMinutes(_date, 0, isUTC);\n\n    /* falls through */\n\n    case 'minutes':\n      setSeconds(_date, 0, isUTC);\n\n    /* falls through */\n\n    case 'seconds':\n      setMilliseconds(_date, 0, isUTC);\n  } // weeks are a special case\n\n\n  if (unit === 'week') {\n    setLocaleDayOfWeek(_date, 0, {\n      isUTC: isUTC\n    });\n  }\n\n  if (unit === 'isoWeek') {\n    setISODayOfWeek(_date, 1);\n  } // quarters are also special\n\n\n  if (unit === 'quarter') {\n    setMonth(_date, Math.floor(getMonth(_date, isUTC) / 3) * 3, isUTC);\n  }\n\n  return _date;\n}\n/**\n * @param {?} date\n * @param {?} unit\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction endOf(date, unit, isUTC) {\n  var\n  /** @type {?} */\n  _unit = unit; // 'date' is an alias for 'day', so it should be considered as such.\n\n  if (_unit === 'date') {\n    _unit = 'day';\n  }\n\n  var\n  /** @type {?} */\n  start = startOf(date, _unit, isUTC);\n\n  var\n  /** @type {?} */\n  _step = add(start, 1, _unit === 'isoWeek' ? 'week' : _unit, isUTC);\n\n  var\n  /** @type {?} */\n  res = subtract(_step, 1, 'milliseconds', isUTC);\n  return res;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initDayOfYear() {\n  // FORMATTING\n  addFormatToken('DDD', ['DDDD', 3, false], 'DDDo', function (date) {\n    return getDayOfYear(date).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('dayOfYear', 'DDD');\n  addRegexToken('DDD', match1to3);\n  addRegexToken('DDDD', match3);\n  addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n    config._dayOfYear = toInt(input);\n    return config;\n  });\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getDayOfYear(date, isUTC) {\n  var\n  /** @type {?} */\n  date1 = +startOf(date, 'day', isUTC);\n  var\n  /** @type {?} */\n  date2 = +startOf(date, 'year', isUTC);\n  var\n  /** @type {?} */\n  someDate = date1 - date2;\n  var\n  /** @type {?} */\n  oneDay = 1000 * 60 * 60 * 24;\n  return Math.round(someDate / oneDay) + 1;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} year\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\n\n\nfunction firstWeekOffset(year, dow, doy) {\n  // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n  var\n  /** @type {?} */\n  fwd = dow - doy + 7; // first-week day local weekday -- which local weekday is fwd\n\n  var\n  /** @type {?} */\n  fwdlw = (createUTCDate(year, 0, fwd).getUTCDay() - dow + 7) % 7;\n  return -fwdlw + fwd - 1;\n}\n/**\n * @param {?} year\n * @param {?} week\n * @param {?} weekday\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\n\n\nfunction dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n  var\n  /** @type {?} */\n  localWeekday = (7 + weekday - dow) % 7;\n  var\n  /** @type {?} */\n  weekOffset = firstWeekOffset(year, dow, doy);\n  var\n  /** @type {?} */\n  dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;\n  var\n  /** @type {?} */\n  resYear;\n  var\n  /** @type {?} */\n  resDayOfYear;\n\n  if (dayOfYear <= 0) {\n    resYear = year - 1;\n    resDayOfYear = daysInYear(resYear) + dayOfYear;\n  } else if (dayOfYear > daysInYear(year)) {\n    resYear = year + 1;\n    resDayOfYear = dayOfYear - daysInYear(year);\n  } else {\n    resYear = year;\n    resDayOfYear = dayOfYear;\n  }\n\n  return {\n    year: resYear,\n    dayOfYear: resDayOfYear\n  };\n}\n/**\n * @param {?} date\n * @param {?} dow\n * @param {?} doy\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction weekOfYear(date, dow, doy, isUTC) {\n  var\n  /** @type {?} */\n  weekOffset = firstWeekOffset(getFullYear(date, isUTC), dow, doy);\n  var\n  /** @type {?} */\n  week = Math.floor((getDayOfYear(date, isUTC) - weekOffset - 1) / 7) + 1;\n  var\n  /** @type {?} */\n  resWeek;\n  var\n  /** @type {?} */\n  resYear;\n\n  if (week < 1) {\n    resYear = getFullYear(date, isUTC) - 1;\n    resWeek = week + weeksInYear(resYear, dow, doy);\n  } else if (week > weeksInYear(getFullYear(date, isUTC), dow, doy)) {\n    resWeek = week - weeksInYear(getFullYear(date, isUTC), dow, doy);\n    resYear = getFullYear(date, isUTC) + 1;\n  } else {\n    resYear = getFullYear(date, isUTC);\n    resWeek = week;\n  }\n\n  return {\n    week: resWeek,\n    year: resYear\n  };\n}\n/**\n * @param {?} year\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\n\n\nfunction weeksInYear(year, dow, doy) {\n  var\n  /** @type {?} */\n  weekOffset = firstWeekOffset(year, dow, doy);\n  var\n  /** @type {?} */\n  weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nMONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\nvar\n/** @type {?} */\ndefaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nvar\n/** @type {?} */\ndefaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\nvar\n/** @type {?} */\ndefaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\nvar\n/** @type {?} */\ndefaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\nvar\n/** @type {?} */\ndefaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\nvar\n/** @type {?} */\ndefaultLongDateFormat = {\n  LTS: 'h:mm:ss A',\n  LT: 'h:mm A',\n  L: 'MM/DD/YYYY',\n  LL: 'MMMM D, YYYY',\n  LLL: 'MMMM D, YYYY h:mm A',\n  LLLL: 'dddd, MMMM D, YYYY h:mm A'\n};\nvar\n/** @type {?} */\ndefaultOrdinal = '%d';\nvar\n/** @type {?} */\ndefaultDayOfMonthOrdinalParse = /\\d{1,2}/;\nvar\n/** @type {?} */\ndefaultMonthsShortRegex = matchWord;\nvar\n/** @type {?} */\ndefaultMonthsRegex = matchWord;\n\nvar Locale = /*#__PURE__*/function () {\n  /**\n   * @param {?} config\n   */\n  function Locale(config) {\n    _classCallCheck(this, Locale);\n\n    if (!!config) {\n      this.set(config);\n    }\n  }\n  /**\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _createClass(Locale, [{\n    key: \"set\",\n    value: function set(config) {\n      var\n      /** @type {?} */\n      confKey;\n\n      for (confKey in config) {\n        if (!config.hasOwnProperty(confKey)) {\n          continue;\n        }\n\n        var\n        /** @type {?} */\n        prop = config[\n        /** @type {?} */\n        confKey];\n        var\n        /** @type {?} */\n        key =\n        /** @type {?} */\n        isFunction(prop) ? confKey : \"_\".concat(confKey);\n        this[key] =\n        /** @type {?} */\n        prop;\n      }\n\n      this._config = config;\n    }\n    /**\n     * @param {?} key\n     * @param {?} date\n     * @param {?} now\n     * @return {?}\n     */\n\n  }, {\n    key: \"calendar\",\n    value: function calendar(key, date, now) {\n      var\n      /** @type {?} */\n      output = this._calendar[key] || this._calendar[\"sameElse\"];\n      return isFunction(output) ? output.call(null, date, now) : output;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"longDateFormat\",\n    value: function longDateFormat(key) {\n      var\n      /** @type {?} */\n      format = this._longDateFormat[key];\n\n      var\n      /** @type {?} */\n      formatUpper = this._longDateFormat[key.toUpperCase()];\n\n      if (format || !formatUpper) {\n        return format;\n      }\n\n      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n        return val.slice(1);\n      });\n      return this._longDateFormat[key];\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"invalidDate\",\n    get: function get() {\n      return this._invalidDate;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._invalidDate = val;\n    }\n    /**\n     * @param {?} num\n     * @param {?=} token\n     * @return {?}\n     */\n\n  }, {\n    key: \"ordinal\",\n    value: function ordinal(num, token) {\n      return this._ordinal.replace('%d', num.toString(10));\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n\n  }, {\n    key: \"preparse\",\n    value: function preparse(str) {\n      return str;\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n\n  }, {\n    key: \"postformat\",\n    value: function postformat(str) {\n      return str;\n    }\n    /**\n     * @param {?} num\n     * @param {?} withoutSuffix\n     * @param {?} str\n     * @param {?} isFuture\n     * @return {?}\n     */\n\n  }, {\n    key: \"relativeTime\",\n    value: function relativeTime(num, withoutSuffix, str, isFuture) {\n      var\n      /** @type {?} */\n      output = this._relativeTime[str];\n      return isFunction(output) ? output(num, withoutSuffix, str, isFuture) : output.replace(/%d/i, num.toString(10));\n    }\n    /**\n     * @param {?} diff\n     * @param {?} output\n     * @return {?}\n     */\n\n  }, {\n    key: \"pastFuture\",\n    value: function pastFuture(diff, output) {\n      var\n      /** @type {?} */\n      format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n      return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"months\",\n    value: function months(date, format) {\n      var isUTC = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!date) {\n        return isArray(this._months) ? this._months : this._months.standalone;\n      }\n\n      if (isArray(this._months)) {\n        return this._months[getMonth(date, isUTC)];\n      }\n\n      var\n      /** @type {?} */\n      key = (this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone';\n      return this._months[key][getMonth(date, isUTC)];\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"monthsShort\",\n    value: function monthsShort(date, format) {\n      var isUTC = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!date) {\n        return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;\n      }\n\n      if (isArray(this._monthsShort)) {\n        return this._monthsShort[getMonth(date, isUTC)];\n      }\n\n      var\n      /** @type {?} */\n      key = MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone';\n      return this._monthsShort[key][getMonth(date, isUTC)];\n    }\n    /**\n     * @param {?} monthName\n     * @param {?=} format\n     * @param {?=} strict\n     * @return {?}\n     */\n\n  }, {\n    key: \"monthsParse\",\n    value: function monthsParse(monthName, format, strict) {\n      var\n      /** @type {?} */\n      date;\n      var\n      /** @type {?} */\n      regex;\n\n      if (this._monthsParseExact) {\n        return this.handleMonthStrictParse(monthName, format, strict);\n      }\n\n      if (!this._monthsParse) {\n        this._monthsParse = [];\n        this._longMonthsParse = [];\n        this._shortMonthsParse = [];\n      } // TODO: add sorting\n      // Sorting makes sure if one month (or abbr) is a prefix of another\n      // see sorting in computeMonthsParse\n\n\n      var\n      /** @type {?} */\n      i;\n\n      for (i = 0; i < 12; i++) {\n        // make the regex if we don't have it already\n        date = new Date(Date.UTC(2000, i));\n\n        if (strict && !this._longMonthsParse[i]) {\n          var\n          /** @type {?} */\n          _months = this.months(date, '', true).replace('.', '');\n\n          var\n          /** @type {?} */\n          _shortMonths = this.monthsShort(date, '', true).replace('.', '');\n\n          this._longMonthsParse[i] = new RegExp(\"^\".concat(_months, \"$\"), 'i');\n          this._shortMonthsParse[i] = new RegExp(\"^\".concat(_shortMonths, \"$\"), 'i');\n        }\n\n        if (!strict && !this._monthsParse[i]) {\n          regex = \"^\".concat(this.months(date, '', true), \"|^\").concat(this.monthsShort(date, '', true));\n          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        } // test the regex\n\n\n        if (strict && format === 'MMMM' &&\n        /** @type {?} */\n        this._longMonthsParse[i].test(monthName)) {\n          return i;\n        }\n\n        if (strict && format === 'MMM' &&\n        /** @type {?} */\n        this._shortMonthsParse[i].test(monthName)) {\n          return i;\n        }\n\n        if (!strict && this._monthsParse[i].test(monthName)) {\n          return i;\n        }\n      }\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n\n  }, {\n    key: \"monthsRegex\",\n    value: function monthsRegex(isStrict) {\n      if (this._monthsParseExact) {\n        if (!hasOwnProp(this, '_monthsRegex')) {\n          this.computeMonthsParse();\n        }\n\n        if (isStrict) {\n          return this._monthsStrictRegex;\n        }\n\n        return this._monthsRegex;\n      }\n\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        this._monthsRegex = defaultMonthsRegex;\n      }\n\n      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n\n  }, {\n    key: \"monthsShortRegex\",\n    value: function monthsShortRegex(isStrict) {\n      if (this._monthsParseExact) {\n        if (!hasOwnProp(this, '_monthsRegex')) {\n          this.computeMonthsParse();\n        }\n\n        if (isStrict) {\n          return this._monthsShortStrictRegex;\n        }\n\n        return this._monthsShortRegex;\n      }\n\n      if (!hasOwnProp(this, '_monthsShortRegex')) {\n        this._monthsShortRegex = defaultMonthsShortRegex;\n      }\n\n      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n    }\n    /**\n     * Week\n     * @param {?} date\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"week\",\n    value: function week(date, isUTC) {\n      return weekOfYear(date, this._week.dow, this._week.doy, isUTC).week;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"firstDayOfWeek\",\n    value: function firstDayOfWeek() {\n      return this._week.dow;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"firstDayOfYear\",\n    value: function firstDayOfYear() {\n      return this._week.doy;\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdays\",\n    value: function weekdays(date, format, isUTC) {\n      if (!date) {\n        return isArray(this._weekdays) ? this._weekdays : this._weekdays.standalone;\n      }\n\n      if (isArray(this._weekdays)) {\n        return this._weekdays[getDay(date, isUTC)];\n      }\n\n      var\n      /** @type {?} */\n      _key = this._weekdays.isFormat.test(format) ? 'format' : 'standalone';\n\n      return this._weekdays[_key][getDay(date, isUTC)];\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysMin\",\n    value: function weekdaysMin(date, format, isUTC) {\n      return date ? this._weekdaysMin[getDay(date, isUTC)] : this._weekdaysMin;\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysShort\",\n    value: function weekdaysShort(date, format, isUTC) {\n      return date ? this._weekdaysShort[getDay(date, isUTC)] : this._weekdaysShort;\n    }\n    /**\n     * @param {?=} weekdayName\n     * @param {?=} format\n     * @param {?=} strict\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysParse\",\n    value: function weekdaysParse(weekdayName, format, strict) {\n      var\n      /** @type {?} */\n      i;\n      var\n      /** @type {?} */\n      regex;\n\n      if (this._weekdaysParseExact) {\n        return this.handleWeekStrictParse(weekdayName, format, strict);\n      }\n\n      if (!this._weekdaysParse) {\n        this._weekdaysParse = [];\n        this._minWeekdaysParse = [];\n        this._shortWeekdaysParse = [];\n        this._fullWeekdaysParse = [];\n      }\n\n      for (i = 0; i < 7; i++) {\n        // make the regex if we don't have it already\n        // fix: here is the issue\n        var\n        /** @type {?} */\n        date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n\n        if (strict && !this._fullWeekdaysParse[i]) {\n          this._fullWeekdaysParse[i] = new RegExp(\"^\".concat(this.weekdays(date, '', true).replace('.', '\\.?'), \"$\"), 'i');\n          this._shortWeekdaysParse[i] = new RegExp(\"^\".concat(this.weekdaysShort(date, '', true).replace('.', '\\.?'), \"$\"), 'i');\n          this._minWeekdaysParse[i] = new RegExp(\"^\".concat(this.weekdaysMin(date, '', true).replace('.', '\\.?'), \"$\"), 'i');\n        }\n\n        if (!this._weekdaysParse[i]) {\n          regex = \"^\".concat(this.weekdays(date, '', true), \"|^\").concat(this.weekdaysShort(date, '', true), \"|^\").concat(this.weekdaysMin(date, '', true));\n          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        }\n\n        if (!isArray(this._fullWeekdaysParse) || !isArray(this._shortWeekdaysParse) || !isArray(this._minWeekdaysParse) || !isArray(this._weekdaysParse)) {\n          return;\n        } // test the regex\n\n\n        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n          return i;\n        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n          return i;\n        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n          return i;\n        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n          return i;\n        }\n      }\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysRegex\",\n    value: function weekdaysRegex(isStrict) {\n      if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n          this.computeWeekdaysParse();\n        }\n\n        if (isStrict) {\n          return this._weekdaysStrictRegex;\n        } else {\n          return this._weekdaysRegex;\n        }\n      } else {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n          this._weekdaysRegex = matchWord;\n        }\n\n        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;\n      }\n    }\n    /**\n     * @param {?=} isStrict\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysShortRegex\",\n    value: function weekdaysShortRegex(isStrict) {\n      if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n          this.computeWeekdaysParse();\n        }\n\n        if (isStrict) {\n          return this._weekdaysShortStrictRegex;\n        } else {\n          return this._weekdaysShortRegex;\n        }\n      } else {\n        if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n          this._weekdaysShortRegex = matchWord;\n        }\n\n        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n      }\n    }\n    /**\n     * @param {?=} isStrict\n     * @return {?}\n     */\n\n  }, {\n    key: \"weekdaysMinRegex\",\n    value: function weekdaysMinRegex(isStrict) {\n      if (this._weekdaysParseExact) {\n        if (!hasOwnProp(this, '_weekdaysRegex')) {\n          this.computeWeekdaysParse();\n        }\n\n        if (isStrict) {\n          return this._weekdaysMinStrictRegex;\n        } else {\n          return this._weekdaysMinRegex;\n        }\n      } else {\n        if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n          this._weekdaysMinRegex = matchWord;\n        }\n\n        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n      }\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"isPM\",\n    value: function isPM(input) {\n      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n      // Using charAt should be more compatible.\n      return input.toLowerCase().charAt(0) === 'p';\n    }\n    /**\n     * @param {?} hours\n     * @param {?} minutes\n     * @param {?} isLower\n     * @return {?}\n     */\n\n  }, {\n    key: \"meridiem\",\n    value: function meridiem(hours, minutes, isLower) {\n      if (hours > 11) {\n        return isLower ? 'pm' : 'PM';\n      }\n\n      return isLower ? 'am' : 'AM';\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"formatLongDate\",\n    value: function formatLongDate(key) {\n      this._longDateFormat = this._longDateFormat ? this._longDateFormat : defaultLongDateFormat;\n      var\n      /** @type {?} */\n      format = this._longDateFormat[key];\n\n      var\n      /** @type {?} */\n      formatUpper = this._longDateFormat[key.toUpperCase()];\n\n      if (format || !formatUpper) {\n        return format;\n      }\n\n      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n        return val.slice(1);\n      });\n      return this._longDateFormat[key];\n    }\n    /**\n     * @param {?} monthName\n     * @param {?} format\n     * @param {?=} strict\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleMonthStrictParse\",\n    value: function handleMonthStrictParse(monthName, format, strict) {\n      var\n      /** @type {?} */\n      llc = monthName.toLocaleLowerCase();\n      var\n      /** @type {?} */\n      i;\n      var\n      /** @type {?} */\n      ii;\n      var\n      /** @type {?} */\n      mom;\n\n      if (!this._monthsParse) {\n        // this is not used\n        this._monthsParse = [];\n        this._longMonthsParse = [];\n        this._shortMonthsParse = [];\n\n        for (i = 0; i < 12; ++i) {\n          mom = new Date(2000, i);\n          this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n          this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n        }\n      }\n\n      if (strict) {\n        if (format === 'MMM') {\n          ii =\n          /** @type {?} */\n          this._shortMonthsParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        }\n\n        ii =\n        /** @type {?} */\n        this._longMonthsParse.indexOf(llc);\n        return ii !== -1 ? ii : null;\n      }\n\n      if (format === 'MMM') {\n        ii =\n        /** @type {?} */\n        this._shortMonthsParse.indexOf(llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii =\n        /** @type {?} */\n        this._longMonthsParse.indexOf(llc);\n        return ii !== -1 ? ii : null;\n      }\n\n      ii =\n      /** @type {?} */\n      this._longMonthsParse.indexOf(llc);\n\n      if (ii !== -1) {\n        return ii;\n      }\n\n      ii =\n      /** @type {?} */\n      this._shortMonthsParse.indexOf(llc);\n      return ii !== -1 ? ii : null;\n    }\n    /**\n     * @param {?} weekdayName\n     * @param {?} format\n     * @param {?} strict\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleWeekStrictParse\",\n    value: function handleWeekStrictParse(weekdayName, format, strict) {\n      var\n      /** @type {?} */\n      ii;\n      var\n      /** @type {?} */\n      llc = weekdayName.toLocaleLowerCase();\n\n      if (!this._weekdaysParse) {\n        this._weekdaysParse = [];\n        this._shortWeekdaysParse = [];\n        this._minWeekdaysParse = [];\n        var\n        /** @type {?} */\n        i;\n\n        for (i = 0; i < 7; ++i) {\n          var\n          /** @type {?} */\n          date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n          this._minWeekdaysParse[i] = this.weekdaysMin(date).toLocaleLowerCase();\n          this._shortWeekdaysParse[i] = this.weekdaysShort(date).toLocaleLowerCase();\n          this._weekdaysParse[i] = this.weekdays(date, '').toLocaleLowerCase();\n        }\n      }\n\n      if (!isArray(this._weekdaysParse) || !isArray(this._shortWeekdaysParse) || !isArray(this._minWeekdaysParse)) {\n        return;\n      }\n\n      if (strict) {\n        if (format === 'dddd') {\n          ii = this._weekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        } else if (format === 'ddd') {\n          ii = this._shortWeekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        } else {\n          ii = this._minWeekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        }\n      } else {\n        if (format === 'dddd') {\n          ii = this._weekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._shortWeekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._minWeekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        } else if (format === 'ddd') {\n          ii = this._shortWeekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._weekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._minWeekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        } else {\n          ii = this._minWeekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._weekdaysParse.indexOf(llc);\n\n          if (ii !== -1) {\n            return ii;\n          }\n\n          ii = this._shortWeekdaysParse.indexOf(llc);\n          return ii !== -1 ? ii : null;\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"computeMonthsParse\",\n    value: function computeMonthsParse() {\n      var\n      /** @type {?} */\n      shortPieces = [];\n      var\n      /** @type {?} */\n      longPieces = [];\n      var\n      /** @type {?} */\n      mixedPieces = [];\n      var\n      /** @type {?} */\n      date;\n      var\n      /** @type {?} */\n      i;\n\n      for (i = 0; i < 12; i++) {\n        // make the regex if we don't have it already\n        date = new Date(2000, i);\n        shortPieces.push(this.monthsShort(date, ''));\n        longPieces.push(this.months(date, ''));\n        mixedPieces.push(this.months(date, ''));\n        mixedPieces.push(this.monthsShort(date, ''));\n      } // Sorting makes sure if one month (or abbr) is a prefix of another it\n      // will match the longer piece.\n\n\n      shortPieces.sort(cmpLenRev);\n      longPieces.sort(cmpLenRev);\n      mixedPieces.sort(cmpLenRev);\n\n      for (i = 0; i < 12; i++) {\n        shortPieces[i] = regexEscape(shortPieces[i]);\n        longPieces[i] = regexEscape(longPieces[i]);\n      }\n\n      for (i = 0; i < 24; i++) {\n        mixedPieces[i] = regexEscape(mixedPieces[i]);\n      }\n\n      this._monthsRegex = new RegExp(\"^(\".concat(mixedPieces.join('|'), \")\"), 'i');\n      this._monthsShortRegex = this._monthsRegex;\n      this._monthsStrictRegex = new RegExp(\"^(\".concat(longPieces.join('|'), \")\"), 'i');\n      this._monthsShortStrictRegex = new RegExp(\"^(\".concat(shortPieces.join('|'), \")\"), 'i');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"computeWeekdaysParse\",\n    value: function computeWeekdaysParse() {\n      var\n      /** @type {?} */\n      minPieces = [];\n      var\n      /** @type {?} */\n      shortPieces = [];\n      var\n      /** @type {?} */\n      longPieces = [];\n      var\n      /** @type {?} */\n      mixedPieces = [];\n      var\n      /** @type {?} */\n      i;\n\n      for (i = 0; i < 7; i++) {\n        // make the regex if we don't have it already\n        // let mom = createUTC([2000, 1]).day(i);\n        var\n        /** @type {?} */\n        date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n        var\n        /** @type {?} */\n        minp = this.weekdaysMin(date);\n        var\n        /** @type {?} */\n        shortp = this.weekdaysShort(date);\n        var\n        /** @type {?} */\n        longp = this.weekdays(date);\n        minPieces.push(minp);\n        shortPieces.push(shortp);\n        longPieces.push(longp);\n        mixedPieces.push(minp);\n        mixedPieces.push(shortp);\n        mixedPieces.push(longp);\n      } // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n      // will match the longer piece.\n\n\n      minPieces.sort(cmpLenRev);\n      shortPieces.sort(cmpLenRev);\n      longPieces.sort(cmpLenRev);\n      mixedPieces.sort(cmpLenRev);\n\n      for (i = 0; i < 7; i++) {\n        shortPieces[i] = regexEscape(shortPieces[i]);\n        longPieces[i] = regexEscape(longPieces[i]);\n        mixedPieces[i] = regexEscape(mixedPieces[i]);\n      }\n\n      this._weekdaysRegex = new RegExp(\"^(\".concat(mixedPieces.join('|'), \")\"), 'i');\n      this._weekdaysShortRegex = this._weekdaysRegex;\n      this._weekdaysMinRegex = this._weekdaysRegex;\n      this._weekdaysStrictRegex = new RegExp(\"^(\".concat(longPieces.join('|'), \")\"), 'i');\n      this._weekdaysShortStrictRegex = new RegExp(\"^(\".concat(shortPieces.join('|'), \")\"), 'i');\n      this._weekdaysMinStrictRegex = new RegExp(\"^(\".concat(minPieces.join('|'), \")\"), 'i');\n    }\n  }]);\n\n  return Locale;\n}();\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction cmpLenRev(a, b) {\n  return b.length - a.length;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\ndefaultCalendar = {\n  sameDay: '[Today at] LT',\n  nextDay: '[Tomorrow at] LT',\n  nextWeek: 'dddd [at] LT',\n  lastDay: '[Yesterday at] LT',\n  lastWeek: '[Last] dddd [at] LT',\n  sameElse: 'L'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\ndefaultInvalidDate = 'Invalid date';\nvar\n/** @type {?} */\ndefaultLocaleWeek = {\n  dow: 0,\n  // Sunday is the first day of the week.\n  doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n};\nvar\n/** @type {?} */\ndefaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\nvar\n/** @type {?} */\ndefaultRelativeTime = {\n  future: 'in %s',\n  past: '%s ago',\n  s: 'a few seconds',\n  ss: '%d seconds',\n  m: 'a minute',\n  mm: '%d minutes',\n  h: 'an hour',\n  hh: '%d hours',\n  d: 'a day',\n  dd: '%d days',\n  M: 'a month',\n  MM: '%d months',\n  y: 'a year',\n  yy: '%d years'\n};\nvar\n/** @type {?} */\nbaseConfig = {\n  calendar: defaultCalendar,\n  longDateFormat: defaultLongDateFormat,\n  invalidDate: defaultInvalidDate,\n  ordinal: defaultOrdinal,\n  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n  relativeTime: defaultRelativeTime,\n  months: defaultLocaleMonths,\n  monthsShort: defaultLocaleMonthsShort,\n  week: defaultLocaleWeek,\n  weekdays: defaultLocaleWeekdays,\n  weekdaysMin: defaultLocaleWeekdaysMin,\n  weekdaysShort: defaultLocaleWeekdaysShort,\n  meridiemParse: defaultLocaleMeridiemParse\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} array1\n * @param {?} array2\n * @param {?} dontConvert\n * @return {?}\n */\n\nfunction compareArrays(array1, array2, dontConvert) {\n  var\n  /** @type {?} */\n  len = Math.min(array1.length, array2.length);\n  var\n  /** @type {?} */\n  lengthDiff = Math.abs(array1.length - array2.length);\n  var\n  /** @type {?} */\n  diffs = 0;\n  var\n  /** @type {?} */\n  i;\n\n  for (i = 0; i < len; i++) {\n    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {\n      diffs++;\n    }\n  }\n\n  return diffs + lengthDiff;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initWeek() {\n  addFormatToken('w', ['ww', 2, false], 'wo', function (date, opts) {\n    return getWeek(date, opts.locale).toString(10);\n  });\n  addFormatToken('W', ['WW', 2, false], 'Wo', function (date) {\n    return getISOWeek(date).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('week', 'w');\n  addUnitAlias('isoWeek', 'W'); // PARSING\n\n  addRegexToken('w', match1to2);\n  addRegexToken('ww', match1to2, match2);\n  addRegexToken('W', match1to2);\n  addRegexToken('WW', match1to2, match2);\n  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n    week[token.substr(0, 1)] = toInt(input);\n    return config;\n  }); // export function getSetWeek (input) {\n  //   var week = this.localeData().week(this);\n  //   return input == null ? week : this.add((input - week) * 7, 'd');\n  // }\n}\n/**\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getWeek(date) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getLocale();\n  var isUTC = arguments.length > 2 ? arguments[2] : undefined;\n  return locale.week(date, isUTC);\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getISOWeek(date, isUTC) {\n  return weekOfYear(date, 1, 4, isUTC).week;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initWeekYear() {\n  addFormatToken(null, ['gg', 2, false], null, function (date, opts) {\n    // return this.weekYear() % 100;\n    return (getWeekYear(date, opts.locale) % 100).toString();\n  });\n  addFormatToken(null, ['GG', 2, false], null, function (date) {\n    // return this.isoWeekYear() % 100;\n    return (getISOWeekYear(date) % 100).toString();\n  });\n  addWeekYearFormatToken('gggg', _getWeekYearFormatCb);\n  addWeekYearFormatToken('ggggg', _getWeekYearFormatCb);\n  addWeekYearFormatToken('GGGG', _getISOWeekYearFormatCb);\n  addWeekYearFormatToken('GGGGG', _getISOWeekYearFormatCb); // ALIASES\n\n  addUnitAlias('weekYear', 'gg');\n  addUnitAlias('isoWeekYear', 'GG'); // PARSING\n\n  addRegexToken('G', matchSigned);\n  addRegexToken('g', matchSigned);\n  addRegexToken('GG', match1to2, match2);\n  addRegexToken('gg', match1to2, match2);\n  addRegexToken('GGGG', match1to4, match4);\n  addRegexToken('gggg', match1to4, match4);\n  addRegexToken('GGGGG', match1to6, match6);\n  addRegexToken('ggggg', match1to6, match6);\n  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n    week[token.substr(0, 2)] = toInt(input);\n    return config;\n  });\n  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n    week[token] = parseTwoDigitYear(input);\n    return config;\n  });\n}\n/**\n * @param {?} token\n * @param {?} getter\n * @return {?}\n */\n\n\nfunction addWeekYearFormatToken(token, getter) {\n  addFormatToken(null, [token, token.length, false], null, getter);\n}\n/**\n * @param {?} date\n * @param {?} opts\n * @return {?}\n */\n\n\nfunction _getWeekYearFormatCb(date, opts) {\n  return getWeekYear(date, opts.locale).toString();\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction _getISOWeekYearFormatCb(date) {\n  return getISOWeekYear(date).toString();\n}\n/**\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getWeekYear(date) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getLocale();\n  var isUTC = arguments.length > 2 ? arguments[2] : undefined;\n  return weekOfYear(date, locale.firstDayOfWeek(), locale.firstDayOfYear(), isUTC).year;\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getISOWeekYear(date, isUTC) {\n  return weekOfYear(date, 1, 4, isUTC).year;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initTimezone() {\n  // FORMATTING\n  addFormatToken('z', null, null, function (date, opts) {\n    return opts.isUTC ? 'UTC' : '';\n  });\n  addFormatToken('zz', null, null, function (date, opts) {\n    return opts.isUTC ? 'Coordinated Universal Time' : '';\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initTimestamp() {\n  // FORMATTING\n  addFormatToken('X', null, null, function (date) {\n    return unix(date).toString(10);\n  });\n  addFormatToken('x', null, null, function (date) {\n    return date.valueOf().toString(10);\n  }); // PARSING\n\n  addRegexToken('x', matchSigned);\n  addRegexToken('X', matchTimestamp);\n  addParseToken('X', function (input, array, config) {\n    config._d = new Date(parseFloat(input) * 1000);\n    return config;\n  });\n  addParseToken('x', function (input, array, config) {\n    config._d = new Date(toInt(input));\n    return config;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initSecond() {\n  // FORMATTING\n  addFormatToken('s', ['ss', 2, false], null, function (date, opts) {\n    return getSeconds(date, opts.isUTC).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('second', 's'); // PARSING\n\n  addRegexToken('s', match1to2);\n  addRegexToken('ss', match1to2, match2);\n  addParseToken(['s', 'ss'], SECOND);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initQuarter() {\n  // FORMATTING\n  addFormatToken('Q', null, 'Qo', function (date, opts) {\n    return getQuarter(date, opts.isUTC).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('quarter', 'Q'); // PARSING\n\n  addRegexToken('Q', match1);\n  addParseToken('Q', function (input, array, config) {\n    array[MONTH] = (toInt(input) - 1) * 3;\n    return config;\n  });\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getQuarter(date) {\n  var isUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Math.ceil((getMonth(date, isUTC) + 1) / 3);\n} // export function getSetQuarter(input) {\n//   return input == null\n//     ? Math.ceil((this.month() + 1) / 3)\n//     : this.month((input - 1) * 3 + this.month() % 3);\n// }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} token\n * @param {?} separator\n * @return {?}\n */\n\n\nfunction addOffsetFormatToken(token, separator) {\n  addFormatToken(token, null, null, function (date, config) {\n    var\n    /** @type {?} */\n    offset = getUTCOffset(date, {\n      _isUTC: config.isUTC,\n      _offset: config.offset\n    });\n    var\n    /** @type {?} */\n    sign = '+';\n\n    if (offset < 0) {\n      offset = -offset;\n      sign = '-';\n    }\n\n    return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);\n  });\n}\n/**\n * @return {?}\n */\n\n\nfunction initOffset() {\n  addOffsetFormatToken('Z', ':');\n  addOffsetFormatToken('ZZ', ''); // PARSING\n\n  addRegexToken('Z', matchShortOffset);\n  addRegexToken('ZZ', matchShortOffset);\n  addParseToken(['Z', 'ZZ'], function (input, array, config) {\n    config._useUTC = true;\n    config._tzm = offsetFromString(matchShortOffset, input);\n    return config;\n  });\n} // HELPERS\n// timezone chunker\n// '+10:00' > ['10',  '00']\n// '-1530'  > ['-15', '30']\n\n\nvar\n/** @type {?} */\nchunkOffset = /([\\+\\-]|\\d\\d)/gi;\n/**\n * @param {?} matcher\n * @param {?} str\n * @return {?}\n */\n\nfunction offsetFromString(matcher, str) {\n  var\n  /** @type {?} */\n  matches = (str || '').match(matcher);\n\n  if (matches === null) {\n    return null;\n  }\n\n  var\n  /** @type {?} */\n  chunk = matches[matches.length - 1];\n  var\n  /** @type {?} */\n  parts = chunk.match(chunkOffset) || ['-', '0', '0'];\n  var\n  /** @type {?} */\n  minutes = parseInt(parts[1], 10) * 60 + toInt(parts[2]);\n\n  var\n  /** @type {?} */\n  _min = parts[0] === '+' ? minutes : -minutes;\n\n  return minutes === 0 ? 0 : _min;\n}\n/**\n * @param {?} input\n * @param {?} date\n * @param {?=} config\n * @return {?}\n */\n\n\nfunction cloneWithOffset(input, date) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!config._isUTC) {\n    return input;\n  }\n\n  var\n  /** @type {?} */\n  res = cloneDate(date); // todo: input._d - res._d + ((res._offset || 0) - (input._offset || 0))*60000\n\n  var\n  /** @type {?} */\n  offsetDiff = (config._offset || 0) * 60000;\n  var\n  /** @type {?} */\n  diff = input.valueOf() - res.valueOf() + offsetDiff; // Use low-level api, because this fn is low-level api.\n\n  res.setTime(res.valueOf() + diff); // todo: add timezone handling\n  // hooks.updateOffset(res, false);\n\n  return res;\n}\n/**\n * @param {?} date\n * @return {?}\n */\n\n\nfunction getDateOffset(date) {\n  // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n  // https://github.com/moment/moment/pull/1871\n  return -Math.round(date.getTimezoneOffset() / 15) * 15;\n}\n/**\n * @param {?} date\n * @param {?=} config\n * @return {?}\n */\n\n\nfunction getUTCOffset(date) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var\n  /** @type {?} */\n  _offset = config._offset || 0;\n\n  return config._isUTC ? _offset : getDateOffset(date);\n} // DEPRECATED\n\n/*export function isDaylightSavingTimeShifted() {\n  if (!isUndefined(this._isDSTShifted)) {\n    return this._isDSTShifted;\n  }\n\n  const c = {};\n\n  copyConfig(c, this);\n  c = prepareConfig(c);\n\n  if (c._a) {\n    const other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n    this._isDSTShifted = this.isValid() &&\n      compareArrays(c._a, other.toArray()) > 0;\n  } else {\n    this._isDSTShifted = false;\n  }\n\n  return this._isDSTShifted;\n}*/\n// in Khronos\n\n/*export function isLocal() {\n  return this.isValid() ? !this._isUTC : false;\n}\n\nexport function isUtcOffset() {\n  return this.isValid() ? this._isUTC : false;\n}\n\nexport function isUtc() {\n  return this.isValid() ? this._isUTC && this._offset === 0 : false;\n}*/\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initMinute() {\n  // FORMATTING\n  addFormatToken('m', ['mm', 2, false], null, function (date, opts) {\n    return getMinutes(date, opts.isUTC).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('minute', 'm'); // PARSING\n\n  addRegexToken('m', match1to2);\n  addRegexToken('mm', match1to2, match2);\n  addParseToken(['m', 'mm'], MINUTE);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initMillisecond() {\n  addFormatToken('S', null, null, function (date, opts) {\n    return (~~(getMilliseconds(date, opts.isUTC) / 100)).toString(10);\n  });\n  addFormatToken(null, ['SS', 2, false], null, function (date, opts) {\n    return (~~(getMilliseconds(date, opts.isUTC) / 10)).toString(10);\n  });\n  addFormatToken(null, ['SSS', 3, false], null, function (date, opts) {\n    return getMilliseconds(date, opts.isUTC).toString(10);\n  });\n  addFormatToken(null, ['SSSS', 4, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 10).toString(10);\n  });\n  addFormatToken(null, ['SSSSS', 5, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 100).toString(10);\n  });\n  addFormatToken(null, ['SSSSSS', 6, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 1000).toString(10);\n  });\n  addFormatToken(null, ['SSSSSSS', 7, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 10000).toString(10);\n  });\n  addFormatToken(null, ['SSSSSSSS', 8, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 100000).toString(10);\n  });\n  addFormatToken(null, ['SSSSSSSSS', 9, false], null, function (date, opts) {\n    return (getMilliseconds(date, opts.isUTC) * 1000000).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('millisecond', 'ms'); // PARSING\n\n  addRegexToken('S', match1to3, match1);\n  addRegexToken('SS', match1to3, match2);\n  addRegexToken('SSS', match1to3, match3);\n  var\n  /** @type {?} */\n  token;\n\n  for (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n  }\n  /**\n   * @param {?} input\n   * @param {?} array\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  function parseMs(input, array, config) {\n    array[MILLISECOND] = toInt(parseFloat(\"0.\".concat(input)) * 1000);\n    return config;\n  }\n\n  for (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n  } // MOMENTS\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initHour() {\n  /**\n   * @param {?} date\n   * @param {?} isUTC\n   * @return {?}\n   */\n  function hFormat(date, isUTC) {\n    return getHours(date, isUTC) % 12 || 12;\n  }\n  /**\n   * @param {?} date\n   * @param {?} isUTC\n   * @return {?}\n   */\n\n\n  function kFormat(date, isUTC) {\n    return getHours(date, isUTC) || 24;\n  }\n\n  addFormatToken('H', ['HH', 2, false], null, function (date, opts) {\n    return getHours(date, opts.isUTC).toString(10);\n  });\n  addFormatToken('h', ['hh', 2, false], null, function (date, opts) {\n    return hFormat(date, opts.isUTC).toString(10);\n  });\n  addFormatToken('k', ['kk', 2, false], null, function (date, opts) {\n    return kFormat(date, opts.isUTC).toString(10);\n  });\n  addFormatToken('hmm', null, null, function (date, opts) {\n    var\n    /** @type {?} */\n    _h = hFormat(date, opts.isUTC);\n\n    var\n    /** @type {?} */\n    _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n\n    return \"\".concat(_h).concat(_mm);\n  });\n  addFormatToken('hmmss', null, null, function (date, opts) {\n    var\n    /** @type {?} */\n    _h = hFormat(date, opts.isUTC);\n\n    var\n    /** @type {?} */\n    _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n\n    var\n    /** @type {?} */\n    _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n\n    return \"\".concat(_h).concat(_mm).concat(_ss);\n  });\n  addFormatToken('Hmm', null, null, function (date, opts) {\n    var\n    /** @type {?} */\n    _H = getHours(date, opts.isUTC);\n\n    var\n    /** @type {?} */\n    _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n\n    return \"\".concat(_H).concat(_mm);\n  });\n  addFormatToken('Hmmss', null, null, function (date, opts) {\n    var\n    /** @type {?} */\n    _H = getHours(date, opts.isUTC);\n\n    var\n    /** @type {?} */\n    _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n\n    var\n    /** @type {?} */\n    _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n\n    return \"\".concat(_H).concat(_mm).concat(_ss);\n  });\n  /**\n   * @param {?} token\n   * @param {?} lowercase\n   * @return {?}\n   */\n\n  function meridiem(token, lowercase) {\n    addFormatToken(token, null, null, function (date, opts) {\n      return opts.locale.meridiem(getHours(date, opts.isUTC), getMinutes(date, opts.isUTC), lowercase);\n    });\n  }\n\n  meridiem('a', true);\n  meridiem('A', false); // ALIASES\n\n  addUnitAlias('hour', 'h');\n  /**\n   * @param {?} isStrict\n   * @param {?} locale\n   * @return {?}\n   */\n\n  function matchMeridiem(isStrict, locale) {\n    return locale._meridiemParse;\n  }\n\n  addRegexToken('a', matchMeridiem);\n  addRegexToken('A', matchMeridiem);\n  addRegexToken('H', match1to2);\n  addRegexToken('h', match1to2);\n  addRegexToken('k', match1to2);\n  addRegexToken('HH', match1to2, match2);\n  addRegexToken('hh', match1to2, match2);\n  addRegexToken('kk', match1to2, match2);\n  addRegexToken('hmm', match3to4);\n  addRegexToken('hmmss', match5to6);\n  addRegexToken('Hmm', match3to4);\n  addRegexToken('Hmmss', match5to6);\n  addParseToken(['H', 'HH'], HOUR);\n  addParseToken(['k', 'kk'], function (input, array, config) {\n    var\n    /** @type {?} */\n    kInput = toInt(input);\n    array[HOUR] = kInput === 24 ? 0 : kInput;\n    return config;\n  });\n  addParseToken(['a', 'A'], function (input, array, config) {\n    config._isPm = config._locale.isPM(input);\n    config._meridiem = input;\n    return config;\n  });\n  addParseToken(['h', 'hh'], function (input, array, config) {\n    array[HOUR] = toInt(input);\n    getParsingFlags(config).bigHour = true;\n    return config;\n  });\n  addParseToken('hmm', function (input, array, config) {\n    var\n    /** @type {?} */\n    pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    getParsingFlags(config).bigHour = true;\n    return config;\n  });\n  addParseToken('hmmss', function (input, array, config) {\n    var\n    /** @type {?} */\n    pos1 = input.length - 4;\n    var\n    /** @type {?} */\n    pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    getParsingFlags(config).bigHour = true;\n    return config;\n  });\n  addParseToken('Hmm', function (input, array, config) {\n    var\n    /** @type {?} */\n    pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    return config;\n  });\n  addParseToken('Hmmss', function (input, array, config) {\n    var\n    /** @type {?} */\n    pos1 = input.length - 4;\n    var\n    /** @type {?} */\n    pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    return config;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nlocales = {};\nvar\n/** @type {?} */\nlocaleFamilies = {};\nvar\n/** @type {?} */\nglobalLocale;\n/**\n * @param {?} key\n * @return {?}\n */\n\nfunction normalizeLocale(key) {\n  return key ? key.toLowerCase().replace('_', '-') : key;\n}\n/**\n * @param {?} names\n * @return {?}\n */\n\n\nfunction chooseLocale(names) {\n  var\n  /** @type {?} */\n  next;\n  var\n  /** @type {?} */\n  locale;\n  var\n  /** @type {?} */\n  i = 0;\n\n  while (i < names.length) {\n    var\n    /** @type {?} */\n    split = normalizeLocale(names[i]).split('-');\n    var\n    /** @type {?} */\n    j = split.length;\n    next = normalizeLocale(names[i + 1]);\n    next = next ? next.split('-') : null;\n\n    while (j > 0) {\n      locale = loadLocale(split.slice(0, j).join('-'));\n\n      if (locale) {\n        return locale;\n      }\n\n      if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n        // the next array item is better than a shallower substring of this one\n        break;\n      }\n\n      j--;\n    }\n\n    i++;\n  }\n\n  return null;\n}\n/**\n * @param {?} parentConfig\n * @param {?} childConfig\n * @return {?}\n */\n\n\nfunction mergeConfigs(parentConfig, childConfig) {\n  var\n  /** @type {?} */\n  res = Object.assign({}, parentConfig);\n\n  for (var\n  /** @type {?} */\n  childProp in childConfig) {\n    if (!hasOwnProp(childConfig, childProp)) {\n      continue;\n    }\n\n    if (isObject(parentConfig[childProp]) && isObject(childConfig[childProp])) {\n      res[childProp] = {};\n      Object.assign(res[childProp], parentConfig[childProp]);\n      Object.assign(res[childProp], childConfig[childProp]);\n    } else if (childConfig[childProp] != null) {\n      res[childProp] = childConfig[childProp];\n    } else {\n      delete res[childProp];\n    }\n  }\n\n  var\n  /** @type {?} */\n  parentProp;\n\n  for (parentProp in parentConfig) {\n    if (hasOwnProp(parentConfig, parentProp) && !hasOwnProp(childConfig, parentProp) && isObject(parentConfig[\n    /** @type {?} */\n    parentProp])) {\n      // make sure changes to properties don't modify parent config\n      res[\n      /** @type {?} */\n      parentProp] = Object.assign({}, res[\n      /** @type {?} */\n      parentProp]);\n    }\n  }\n\n  return res;\n}\n/**\n * @param {?} name\n * @return {?}\n */\n\n\nfunction loadLocale(name) {\n  // no way!\n\n  /* var oldLocale = null;\n     // TODO: Find a better way to register and load all the locales in Node\n     if (!locales[name] && (typeof module !== 'undefined') &&\n       module && module.exports) {\n       try {\n         oldLocale = globalLocale._abbr;\n         var aliasedRequire = require;\n         aliasedRequire('./locale/' + name);\n         getSetGlobalLocale(oldLocale);\n       } catch (e) {}\n     }*/\n  if (!locales[name]) {\n    // tslint:disable-next-line\n    console.error(\"Khronos locale error: please load locale \\\"\".concat(name, \"\\\" before using it\")); // throw new Error(`Khronos locale error: please load locale \"${name}\" before using it`);\n  }\n\n  return locales[name];\n}\n/**\n * @param {?=} key\n * @param {?=} values\n * @return {?}\n */\n\n\nfunction getSetGlobalLocale(key, values) {\n  var\n  /** @type {?} */\n  data;\n\n  if (key) {\n    if (isUndefined(values)) {\n      data = getLocale(key);\n    } else if (isString(key)) {\n      data = defineLocale(key, values);\n    }\n\n    if (data) {\n      globalLocale = data;\n    }\n  }\n\n  return globalLocale && globalLocale._abbr;\n}\n/**\n * @param {?} name\n * @param {?=} config\n * @return {?}\n */\n\n\nfunction defineLocale(name, config) {\n  if (config === null) {\n    // useful for testing\n    delete locales[name];\n    globalLocale = getLocale('en');\n    return null;\n  }\n\n  if (!config) {\n    return;\n  }\n\n  var\n  /** @type {?} */\n  parentConfig = baseConfig;\n  config.abbr = name;\n\n  if (config.parentLocale != null) {\n    if (locales[config.parentLocale] != null) {\n      parentConfig = locales[config.parentLocale]._config;\n    } else {\n      if (!localeFamilies[config.parentLocale]) {\n        localeFamilies[config.parentLocale] = [];\n      }\n\n      localeFamilies[config.parentLocale].push({\n        name: name,\n        config: config\n      });\n      return null;\n    }\n  }\n\n  locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n  if (localeFamilies[name]) {\n    localeFamilies[name].forEach(function (x) {\n      defineLocale(x.name, x.config);\n    });\n  } // backwards compat for now: also set the locale\n  // make sure we set the locale AFTER all child locales have been\n  // created, so we won't end up with the child locale set.\n\n\n  getSetGlobalLocale(name);\n  return locales[name];\n}\n/**\n * @param {?} name\n * @param {?=} config\n * @return {?}\n */\n\n\nfunction updateLocale(name, config) {\n  var\n  /** @type {?} */\n  _config = config;\n\n  if (_config != null) {\n    var\n    /** @type {?} */\n    parentConfig = baseConfig; // MERGE\n\n    var\n    /** @type {?} */\n    tmpLocale = loadLocale(name);\n\n    if (tmpLocale != null) {\n      parentConfig = tmpLocale._config;\n    }\n\n    _config = mergeConfigs(parentConfig, _config);\n    var\n    /** @type {?} */\n    locale = new Locale(_config);\n    locale.parentLocale = locales[name];\n    locales[name] = locale; // backwards compat for now: also set the locale\n\n    getSetGlobalLocale(name);\n  } else {\n    // pass null for config to unupdate, useful for tests\n    if (locales[name] != null) {\n      if (locales[name].parentLocale != null) {\n        locales[name] = locales[name].parentLocale;\n      } else if (locales[name] != null) {\n        delete locales[name];\n      }\n    }\n  }\n\n  return locales[name];\n}\n/**\n * @param {?=} key\n * @return {?}\n */\n\n\nfunction getLocale(key) {\n  setDefaultLocale();\n\n  if (!key) {\n    return globalLocale;\n  } // let locale;\n\n\n  var\n  /** @type {?} */\n  _key = isArray(key) ? key : [key];\n\n  return chooseLocale(_key);\n}\n/**\n * @return {?}\n */\n\n\nfunction listLocales() {\n  return Object.keys(locales);\n}\n/**\n * @return {?}\n */\n\n\nfunction setDefaultLocale() {\n  if (locales[\"en\"]) {\n    return undefined;\n  }\n\n  getSetGlobalLocale('en', {\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    ordinal: function ordinal(num) {\n      var\n      /** @type {?} */\n      b = num % 10;\n      var\n      /** @type {?} */\n      output = toInt(num % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      return num + output;\n    }\n  });\n  initWeek();\n  initWeekYear();\n  initYear();\n  initTimezone();\n  initTimestamp();\n  initSecond();\n  initQuarter();\n  initOffset();\n  initMonth();\n  initMinute();\n  initMillisecond();\n  initHour();\n  initDayOfYear();\n  initDayOfWeek();\n  initDayOfMonth();\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nordering = ['year', 'quarter', 'month', 'week', 'day', 'hours', 'minutes', 'seconds', 'milliseconds'];\n\nvar ɵ0 = function ɵ0(mem, order) {\n  mem[order] = true;\n  return mem;\n};\n\nvar\n/** @type {?} */\norderingHash = ordering.reduce(ɵ0, {});\n/**\n * @param {?} duration\n * @return {?}\n */\n\nfunction isDurationValid(duration) {\n  var\n  /** @type {?} */\n  durationKeys = Object.keys(duration);\n\n  if (durationKeys.some(function (key) {\n    return key in orderingHash && duration[key] === null || isNaN(duration[key]);\n  })) {\n    return false;\n  } // for (let key in duration) {\n  //   if (!(indexOf.call(ordering, key) !== -1 && (duration[key] == null || !isNaN(duration[key])))) {\n  //     return false;\n  //   }\n  // }\n\n\n  var\n  /** @type {?} */\n  unitHasDecimal = false;\n\n  for (var\n  /** @type {?} */\n  i = 0; i < ordering.length; ++i) {\n    if (duration[ordering[i]]) {\n      // only allow non-integers for smallest unit\n      if (unitHasDecimal) {\n        return false;\n      }\n\n      if (duration[ordering[i]] !== toInt(duration[ordering[i]])) {\n        unitHasDecimal = true;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} number\n * @return {?}\n */\n\n\nfunction absCeil(number) {\n  return number < 0 ? Math.floor(number) : Math.ceil(number);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} dur\n * @return {?}\n */\n\n\nfunction bubble(dur) {\n  var\n  /** @type {?} */\n  milliseconds = dur._milliseconds;\n  var\n  /** @type {?} */\n  days = dur._days;\n  var\n  /** @type {?} */\n  months = dur._months;\n  var\n  /** @type {?} */\n  data = dur._data; // if we have a mix of positive and negative values, bubble down first\n  // check: https://github.com/moment/moment/issues/2166\n\n  if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n    milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n    days = 0;\n    months = 0;\n  } // The following code bubbles up values, see the tests for\n  // examples of what that means.\n\n\n  data.milliseconds = milliseconds % 1000;\n  var\n  /** @type {?} */\n  seconds = absFloor(milliseconds / 1000);\n  data.seconds = seconds % 60;\n  var\n  /** @type {?} */\n  minutes = absFloor(seconds / 60);\n  data.minutes = minutes % 60;\n  var\n  /** @type {?} */\n  hours = absFloor(minutes / 60);\n  data.hours = hours % 24;\n  days += absFloor(hours / 24); // convert days to months\n\n  var\n  /** @type {?} */\n  monthsFromDays = absFloor(daysToMonths(days));\n  months += monthsFromDays;\n  days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year\n\n  var\n  /** @type {?} */\n  years = absFloor(months / 12);\n  months %= 12;\n  data.day = days;\n  data.month = months;\n  data.year = years;\n  return dur;\n}\n/**\n * @param {?} day\n * @return {?}\n */\n\n\nfunction daysToMonths(day) {\n  // 400 years have 146097 days (taking into account leap year rules)\n  // 400 years have 12 months === 4800\n  return day * 4800 / 146097;\n}\n/**\n * @param {?} month\n * @return {?}\n */\n\n\nfunction monthsToDays(month) {\n  // the reverse of daysToMonths\n  return month * 146097 / 4800;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nround = Math.round;\nvar\n/** @type {?} */\nthresholds = {\n  ss: 44,\n  // a few seconds to seconds\n  s: 45,\n  // seconds to minute\n  m: 45,\n  // minutes to hour\n  h: 22,\n  // hours to day\n  d: 26,\n  // days to month\n  M: 11 // months to year\n\n};\n/**\n * @param {?} str\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} isFuture\n * @param {?} locale\n * @return {?}\n */\n\nfunction substituteTimeAgo(str, num, withoutSuffix, isFuture, locale) {\n  return locale.relativeTime(num || 1, !!withoutSuffix, str, isFuture);\n}\n/**\n * @param {?} posNegDuration\n * @param {?} withoutSuffix\n * @param {?} locale\n * @return {?}\n */\n\n\nfunction relativeTime(posNegDuration, withoutSuffix, locale) {\n  var\n  /** @type {?} */\n  duration = createDuration(posNegDuration).abs();\n  var\n  /** @type {?} */\n  seconds = round(duration.as('s'));\n  var\n  /** @type {?} */\n  minutes = round(duration.as('m'));\n  var\n  /** @type {?} */\n  hours = round(duration.as('h'));\n  var\n  /** @type {?} */\n  days = round(duration.as('d'));\n  var\n  /** @type {?} */\n  months = round(duration.as('M'));\n  var\n  /** @type {?} */\n  years = round(duration.as('y'));\n  var\n  /** @type {?} */\n  a = seconds <= thresholds[\"ss\"] && ['s', seconds] || seconds < thresholds[\"s\"] && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds[\"m\"] && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds[\"h\"] && ['hh', hours] || days <= 1 && ['d'] || days < thresholds[\"d\"] && ['dd', days] || months <= 1 && ['M'] || months < thresholds[\"M\"] && ['MM', months] || years <= 1 && ['y'] || ['yy', years];\n  var\n  /** @type {?} */\n  b = [a[0], a[1], withoutSuffix, +posNegDuration > 0, locale]; // a[2] = withoutSuffix;\n  // a[3] = +posNegDuration > 0;\n  // a[4] = locale;\n\n  return substituteTimeAgo.apply(null, b);\n} // export function humanize(withSuffix) {\n//   if (!this.isValid()) {\n//     return this.localeData().invalidDate();\n//   }\n//\n//   const locale = this.localeData();\n//   let output = relativeTime(this, !withSuffix, locale);\n//\n//   if (withSuffix) {\n//     output = locale.pastFuture(+this, output);\n//   }\n//\n//   return locale.postformat(output);\n// }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar Duration = /*#__PURE__*/function () {\n  /**\n   * @param {?} duration\n   * @param {?=} config\n   */\n  function Duration(duration) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Duration);\n\n    this._data = {};\n    this._locale = getLocale();\n    this._locale = config && config._locale || getLocale(); // const normalizedInput = normalizeObjectUnits(duration);\n\n    var\n    /** @type {?} */\n    normalizedInput = duration;\n    var\n    /** @type {?} */\n    years = normalizedInput.year || 0;\n    var\n    /** @type {?} */\n    quarters = normalizedInput.quarter || 0;\n    var\n    /** @type {?} */\n    months = normalizedInput.month || 0;\n    var\n    /** @type {?} */\n    weeks = normalizedInput.week || 0;\n    var\n    /** @type {?} */\n    days = normalizedInput.day || 0;\n    var\n    /** @type {?} */\n    hours = normalizedInput.hours || 0;\n    var\n    /** @type {?} */\n    minutes = normalizedInput.minutes || 0;\n    var\n    /** @type {?} */\n    seconds = normalizedInput.seconds || 0;\n    var\n    /** @type {?} */\n    milliseconds = normalizedInput.milliseconds || 0;\n    this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove\n\n    this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60 * 1000 + // 1000 * 60\n    // 1000 * 60\n    hours * 1000 * 60 * 60; // using 1000 * 60 * 60\n    // instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n\n    this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n\n    this._months = +months + quarters * 3 + years * 12; // this._data = {};\n    // this._locale = getLocale();\n    // this._bubble();\n\n    return bubble(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Duration, [{\n    key: \"isValid\",\n    value: function isValid() {\n      return this._isValid;\n    }\n    /**\n     * @param {?=} withSuffix\n     * @return {?}\n     */\n\n  }, {\n    key: \"humanize\",\n    value: function humanize(withSuffix) {\n      // throw new Error(`TODO: implement`);\n      if (!this.isValid()) {\n        return this.localeData().invalidDate;\n      }\n\n      var\n      /** @type {?} */\n      locale = this.localeData();\n      var\n      /** @type {?} */\n      output = relativeTime(this, !withSuffix, locale);\n\n      if (withSuffix) {\n        output = locale.pastFuture(+this, output);\n      }\n\n      return locale.postformat(output);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"localeData\",\n    value: function localeData() {\n      return this._locale;\n    }\n    /**\n     * @param {?=} localeKey\n     * @return {?}\n     */\n\n  }, {\n    key: \"locale\",\n    value: function locale(localeKey) {\n      if (!localeKey) {\n        return this._locale._abbr;\n      }\n\n      this._locale = getLocale(localeKey) || this._locale;\n      return this;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      var\n      /** @type {?} */\n      mathAbs = Math.abs;\n      var\n      /** @type {?} */\n      data = this._data;\n      this._milliseconds = mathAbs(this._milliseconds);\n      this._days = mathAbs(this._days);\n      this._months = mathAbs(this._months);\n      data.milliseconds = mathAbs(data.milliseconds);\n      data.seconds = mathAbs(data.seconds);\n      data.minutes = mathAbs(data.minutes);\n      data.hours = mathAbs(data.hours);\n      data.month = mathAbs(data.month);\n      data.year = mathAbs(data.year);\n      return this;\n    }\n    /**\n     * @param {?} _units\n     * @return {?}\n     */\n\n  }, {\n    key: \"as\",\n    value: function as(_units) {\n      if (!this.isValid()) {\n        return NaN;\n      }\n\n      var\n      /** @type {?} */\n      days;\n      var\n      /** @type {?} */\n      months;\n      var\n      /** @type {?} */\n      milliseconds = this._milliseconds;\n      var\n      /** @type {?} */\n      units = normalizeUnits(_units);\n\n      if (units === 'month' || units === 'year') {\n        days = this._days + milliseconds / 864e5;\n        months = this._months + daysToMonths(days);\n        return units === 'month' ? months : months / 12;\n      } // handle milliseconds separately because of floating point math errors (issue #1867)\n\n\n      days = this._days + Math.round(monthsToDays(this._months));\n\n      switch (units) {\n        case 'week':\n          return days / 7 + milliseconds / 6048e5;\n\n        case 'day':\n          return days + milliseconds / 864e5;\n\n        case 'hours':\n          return days * 24 + milliseconds / 36e5;\n\n        case 'minutes':\n          return days * 1440 + milliseconds / 6e4;\n\n        case 'seconds':\n          return days * 86400 + milliseconds / 1000;\n        // Math.floor prevents floating point math errors here\n\n        case 'milliseconds':\n          return Math.floor(days * 864e5) + milliseconds;\n\n        default:\n          throw new Error(\"Unknown unit \".concat(units));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (!this.isValid()) {\n        return NaN;\n      }\n\n      return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;\n    }\n  }]);\n\n  return Duration;\n}();\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isDuration(obj) {\n  return obj instanceof Duration;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction isValid(config) {\n  if (config._isValid == null) {\n    var\n    /** @type {?} */\n    flags = getParsingFlags(config);\n    var\n    /** @type {?} */\n    parsedParts = Array.prototype.some.call(flags.parsedDateParts, function (i) {\n      return i != null;\n    });\n    var\n    /** @type {?} */\n    isNowValid = !isNaN(config._d && config._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);\n\n    if (config._strict) {\n      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;\n    }\n\n    if (Object.isFrozen == null || !Object.isFrozen(config)) {\n      config._isValid = isNowValid;\n    } else {\n      return isNowValid;\n    }\n  }\n\n  return config._isValid;\n}\n/**\n * @param {?} config\n * @param {?=} flags\n * @return {?}\n */\n\n\nfunction createInvalid(config, flags) {\n  config._d = new Date(NaN);\n  Object.assign(getParsingFlags(config), flags || {\n    userInvalidated: true\n  });\n  return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction markInvalid(config) {\n  config._isValid = false;\n  return config;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n// tslint:disable-next-line\n\n\nvar\n/** @type {?} */\nextendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/; // tslint:disable-next-line\n\nvar\n/** @type {?} */\nbasicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar\n/** @type {?} */\ntzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\nvar\n/** @type {?} */\nisoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/, true], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/, true], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/, true], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/, true], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/, true], ['YYYYMMDD', /\\d{8}/, true], // YYYYMM is NOT allowed by the standard\n['GGGG[W]WWE', /\\d{4}W\\d{3}/, true], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/, true]]; // iso time formats and regexes\n\nvar\n/** @type {?} */\nisoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]];\nvar\n/** @type {?} */\naspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\nvar\n/** @type {?} */\nobsOffsets = {\n  UT: 0,\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n}; // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n// tslint:disable-next-line\n\nvar\n/** @type {?} */\nrfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {?} config\n * @return {?}\n */\n\nfunction configFromISO(config) {\n  if (!isString(config._i)) {\n    return config;\n  }\n\n  var\n  /** @type {?} */\n  input = config._i;\n  var\n  /** @type {?} */\n  match = extendedIsoRegex.exec(input) || basicIsoRegex.exec(input);\n  var\n  /** @type {?} */\n  allowTime;\n  var\n  /** @type {?} */\n  dateFormat;\n  var\n  /** @type {?} */\n  timeFormat;\n  var\n  /** @type {?} */\n  tzFormat;\n\n  if (!match) {\n    config._isValid = false;\n    return config;\n  } // getParsingFlags(config).iso = true;\n\n\n  var\n  /** @type {?} */\n  i;\n  var\n  /** @type {?} */\n  l;\n\n  for (i = 0, l = isoDates.length; i < l; i++) {\n    if (isoDates[i][1].exec(match[1])) {\n      dateFormat = isoDates[i][0];\n      allowTime = isoDates[i][2] !== false;\n      break;\n    }\n  }\n\n  if (dateFormat == null) {\n    config._isValid = false;\n    return config;\n  }\n\n  if (match[3]) {\n    for (i = 0, l = isoTimes.length; i < l; i++) {\n      if (isoTimes[i][1].exec(match[3])) {\n        // match[2] should be 'T' or space\n        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n        break;\n      }\n    }\n\n    if (timeFormat == null) {\n      config._isValid = false;\n      return config;\n    }\n  }\n\n  if (!allowTime && timeFormat != null) {\n    config._isValid = false;\n    return config;\n  }\n\n  if (match[4]) {\n    if (tzRegex.exec(match[4])) {\n      tzFormat = 'Z';\n    } else {\n      config._isValid = false;\n      return config;\n    }\n  }\n\n  config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n  return configFromStringAndFormat(config);\n}\n/**\n * @param {?} yearStr\n * @param {?} monthStr\n * @param {?} dayStr\n * @param {?} hourStr\n * @param {?} minuteStr\n * @param {?} secondStr\n * @return {?}\n */\n\n\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  var\n  /** @type {?} */\n  result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];\n\n  if (secondStr) {\n    result.push(parseInt(secondStr, 10));\n  }\n\n  return result;\n}\n/**\n * @param {?} yearStr\n * @return {?}\n */\n\n\nfunction untruncateYear(yearStr) {\n  var\n  /** @type {?} */\n  year = parseInt(yearStr, 10);\n  return year <= 49 ? year + 2000 : year;\n}\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction preprocessRFC2822(str) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return str.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').trim();\n}\n/**\n * @param {?} weekdayStr\n * @param {?} parsedInput\n * @param {?} config\n * @return {?}\n */\n\n\nfunction checkWeekday(weekdayStr, parsedInput, config) {\n  if (weekdayStr) {\n    // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n    var\n    /** @type {?} */\n    weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr);\n    var\n    /** @type {?} */\n    weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n\n    if (weekdayProvided !== weekdayActual) {\n      getParsingFlags(config).weekdayMismatch = true;\n      config._isValid = false;\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {?} obsOffset\n * @param {?} militaryOffset\n * @param {?} numOffset\n * @return {?}\n */\n\n\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\n  if (obsOffset) {\n    return obsOffsets[obsOffset];\n  } else if (militaryOffset) {\n    // the only allowed military tz is Z\n    return 0;\n  } else {\n    var\n    /** @type {?} */\n    hm = parseInt(numOffset, 10);\n    var\n    /** @type {?} */\n    m = hm % 100;\n    var\n    /** @type {?} */\n    h = (hm - m) / 100;\n    return h * 60 + m;\n  }\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromRFC2822(config) {\n  if (!isString(config._i)) {\n    return config;\n  }\n\n  var\n  /** @type {?} */\n  match = rfc2822.exec(preprocessRFC2822(config._i));\n\n  if (!match) {\n    return markInvalid(config);\n  }\n\n  var\n  /** @type {?} */\n  parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n\n  if (!checkWeekday(match[1], parsedArray, config)) {\n    return config;\n  }\n\n  config._a = parsedArray;\n  config._tzm = calculateOffset(match[8], match[9], match[10]);\n  config._d = createUTCDate.apply(null, config._a);\n\n  config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n  getParsingFlags(config).rfc2822 = true;\n  return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromString(config) {\n  if (!isString(config._i)) {\n    return config;\n  }\n\n  var\n  /** @type {?} */\n  matched = aspNetJsonRegex.exec(config._i);\n\n  if (matched !== null) {\n    config._d = new Date(+matched[1]);\n    return config;\n  } // todo: update logic processing\n  // isISO -> configFromISO\n  // isRFC -> configFromRFC\n\n\n  configFromISO(config);\n\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return config;\n  }\n\n  configFromRFC2822(config);\n\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return config;\n  } // Final attempt, use Input Fallback\n  // hooks.createFromInputFallback(config);\n\n\n  return createInvalid(config);\n} // hooks.createFromInputFallback = deprecate(\n//     'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n//     'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n//     'discouraged and will be removed in an upcoming major release. Please refer to ' +\n//     'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n//     function (config) {\n//         config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n//     }\n// );\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @param {?} format\n * @param {?=} locale\n * @param {?=} isUTC\n * @param {?=} offset\n * @return {?}\n */\n\n\nfunction formatDate(date, format, locale, isUTC) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  var\n  /** @type {?} */\n  _locale = getLocale(locale || 'en');\n\n  if (!_locale) {\n    throw new Error(\"Locale \\\"\".concat(locale, \"\\\" is not defined, please add it with \\\"defineLocale(...)\\\"\"));\n  }\n\n  var\n  /** @type {?} */\n  _format = format || (isUTC ? 'YYYY-MM-DDTHH:mm:ss[Z]' : 'YYYY-MM-DDTHH:mm:ssZ');\n\n  var\n  /** @type {?} */\n  output = formatMoment(date, _format, _locale, isUTC, offset);\n\n  if (!output) {\n    return output;\n  }\n\n  return _locale.postformat(output);\n}\n/**\n * @param {?} date\n * @param {?} _format\n * @param {?} locale\n * @param {?=} isUTC\n * @param {?=} offset\n * @return {?}\n */\n\n\nfunction formatMoment(date, _format, locale, isUTC) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  if (!isDateValid(date)) {\n    return locale.invalidDate;\n  }\n\n  var\n  /** @type {?} */\n  format = expandFormat(_format, locale);\n  formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n  return formatFunctions[format](date, locale, isUTC, offset);\n}\n/**\n * @param {?} _format\n * @param {?} locale\n * @return {?}\n */\n\n\nfunction expandFormat(_format, locale) {\n  var\n  /** @type {?} */\n  format = _format;\n  var\n  /** @type {?} */\n  i = 5;\n  var\n  /** @type {?} */\n  localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n  var\n  /** @type {?} */\n  replaceLongDateFormatTokens = function replaceLongDateFormatTokens(input) {\n    return locale.formatLongDate(input) || input;\n  };\n\n  localFormattingTokens.lastIndex = 0;\n\n  while (i >= 0 && localFormattingTokens.test(format)) {\n    format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n    localFormattingTokens.lastIndex = 0;\n    i -= 1;\n  }\n\n  return format;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @template T\n * @param {?=} a\n * @param {?=} b\n * @param {?=} c\n * @return {?}\n */\n\n\nfunction defaults(a, b, c) {\n  if (a != null) {\n    return a;\n  }\n\n  if (b != null) {\n    return b;\n  }\n\n  return c;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction currentDateArray(config) {\n  var\n  /** @type {?} */\n  nowValue = new Date();\n\n  if (config._useUTC) {\n    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n  }\n\n  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromArray(config) {\n  var\n  /** @type {?} */\n  input = [];\n  var\n  /** @type {?} */\n  i;\n  var\n  /** @type {?} */\n  date;\n  var\n  /** @type {?} */\n  currentDate;\n  var\n  /** @type {?} */\n  expectedWeekday;\n  var\n  /** @type {?} */\n  yearToUse;\n\n  if (config._d) {\n    return config;\n  }\n\n  currentDate = currentDateArray(config); // compute day of the year from weeks and weekdays\n\n  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n    dayOfYearFromWeekInfo(config);\n  } // if the day of the year is set, figure out what it is\n\n\n  if (config._dayOfYear != null) {\n    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n      getParsingFlags(config)._overflowDayOfYear = true;\n    }\n\n    date = new Date(Date.UTC(yearToUse, 0, config._dayOfYear));\n    config._a[MONTH] = date.getUTCMonth();\n    config._a[DATE] = date.getUTCDate();\n  } // Default to current date.\n  // * if no year, month, day of month are given, default to today\n  // * if day of month is given, default month and year\n  // * if month is given, default only year\n  // * if year is given, don't default anything\n\n\n  for (i = 0; i < 3 && config._a[i] == null; ++i) {\n    config._a[i] = input[i] = currentDate[i];\n  } // Zero out whatever was not defaulted, including time\n\n\n  for (; i < 7; i++) {\n    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n  } // Check for 24:00:00.000\n\n\n  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n    config._nextDay = true;\n    config._a[HOUR] = 0;\n  }\n\n  config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed\n  // with parseZone.\n\n  if (config._tzm != null) {\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n  }\n\n  if (config._nextDay) {\n    config._a[HOUR] = 24;\n  } // check for mismatching day of week\n\n\n  if (config._w && typeof config._w[\"d\"] !== 'undefined' && config._w[\"d\"] !== expectedWeekday) {\n    getParsingFlags(config).weekdayMismatch = true;\n  }\n\n  return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction dayOfYearFromWeekInfo(config) {\n  var\n  /** @type {?} */\n  w,\n  /** @type {?} */\n  weekYear,\n  /** @type {?} */\n  week,\n  /** @type {?} */\n  weekday,\n  /** @type {?} */\n  dow,\n  /** @type {?} */\n  doy,\n  /** @type {?} */\n  temp,\n  /** @type {?} */\n  weekdayOverflow;\n  w = config._w;\n\n  if (w.GG != null || w.W != null || w.E != null) {\n    dow = 1;\n    doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on\n    // how we interpret now (local, utc, fixed offset). So create\n    // a now version of current config (take local/utc/offset flags, and\n    // create now).\n\n    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(new Date(), 1, 4).year);\n    week = defaults(w.W, 1);\n    weekday = defaults(w.E, 1);\n\n    if (weekday < 1 || weekday > 7) {\n      weekdayOverflow = true;\n    }\n  } else {\n    dow = config._locale._week.dow;\n    doy = config._locale._week.doy;\n    var\n    /** @type {?} */\n    curWeek = weekOfYear(new Date(), dow, doy);\n    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.\n\n    week = defaults(w.w, curWeek.week);\n\n    if (w.d != null) {\n      // weekday -- low day numbers are considered next week\n      weekday = w.d;\n\n      if (weekday < 0 || weekday > 6) {\n        weekdayOverflow = true;\n      }\n    } else if (w.e != null) {\n      // local weekday -- counting starts from begining of week\n      weekday = w.e + dow;\n\n      if (w.e < 0 || w.e > 6) {\n        weekdayOverflow = true;\n      }\n    } else {\n      // default to begining of week\n      weekday = dow;\n    }\n  }\n\n  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n    getParsingFlags(config)._overflowWeeks = true;\n  } else if (weekdayOverflow != null) {\n    getParsingFlags(config)._overflowWeekday = true;\n  } else {\n    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n    config._a[YEAR] = temp.year;\n    config._dayOfYear = temp.dayOfYear;\n  }\n\n  return config;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction checkOverflow(config) {\n  var\n  /** @type {?} */\n  overflow;\n  var\n  /** @type {?} */\n  a = config._a;\n\n  if (a && getParsingFlags(config).overflow === -2) {\n    // todo: fix this sh*t\n    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth$1(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;\n\n    if (getParsingFlags(config)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n      overflow = DATE;\n    }\n\n    if (getParsingFlags(config)._overflowWeeks && overflow === -1) {\n      overflow = WEEK;\n    }\n\n    if (getParsingFlags(config)._overflowWeekday && overflow === -1) {\n      overflow = WEEKDAY;\n    }\n\n    getParsingFlags(config).overflow = overflow;\n  }\n\n  return config;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// constant that refers to the ISO standard\n// hooks.ISO_8601 = function () {};\n\n\nvar\n/** @type {?} */\nISO_8601 = 'ISO_8601'; // constant that refers to the RFC 2822 form\n// hooks.RFC_2822 = function () {};\n\nvar\n/** @type {?} */\nRFC_2822 = 'RFC_2822';\n/**\n * @param {?} config\n * @return {?}\n */\n\nfunction configFromStringAndFormat(config) {\n  // TODO: Move this to another part of the creation flow to prevent circular deps\n  if (config._f === ISO_8601) {\n    return configFromISO(config);\n  }\n\n  if (config._f === RFC_2822) {\n    return configFromRFC2822(config);\n  }\n\n  config._a = [];\n  getParsingFlags(config).empty = true;\n\n  if (isArray(config._f) || !config._i && config._i !== 0) {\n    return config;\n  } // This array is used to make a Date, either with `new Date` or `Date.UTC`\n\n\n  var\n  /** @type {?} */\n  input = config._i.toString();\n\n  var\n  /** @type {?} */\n  totalParsedInputLength = 0;\n  var\n  /** @type {?} */\n  inputLength = input.length;\n  var\n  /** @type {?} */\n  tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n  var\n  /** @type {?} */\n  i;\n  var\n  /** @type {?} */\n  token;\n  var\n  /** @type {?} */\n  parsedInput;\n  var\n  /** @type {?} */\n  skipped;\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n    parsedInput = (input.match(getParseRegexForToken(token, config._locale)) || [])[0];\n\n    if (parsedInput) {\n      skipped = input.substr(0, input.indexOf(parsedInput));\n\n      if (skipped.length > 0) {\n        getParsingFlags(config).unusedInput.push(skipped);\n      }\n\n      input = input.slice(input.indexOf(parsedInput) + parsedInput.length);\n      totalParsedInputLength += parsedInput.length;\n    } // don't parse if it's not a known token\n\n\n    if (formatTokenFunctions[token]) {\n      if (parsedInput) {\n        getParsingFlags(config).empty = false;\n      } else {\n        getParsingFlags(config).unusedTokens.push(token);\n      }\n\n      addTimeToArrayFromToken(token, parsedInput, config);\n    } else if (config._strict && !parsedInput) {\n      getParsingFlags(config).unusedTokens.push(token);\n    }\n  } // add remaining unparsed input length to the string\n\n\n  getParsingFlags(config).charsLeftOver = inputLength - totalParsedInputLength;\n\n  if (input.length > 0) {\n    getParsingFlags(config).unusedInput.push(input);\n  } // clear _12h flag if hour is <= 12\n\n\n  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {\n    getParsingFlags(config).bigHour = void 0;\n  }\n\n  getParsingFlags(config).parsedDateParts = config._a.slice(0);\n  getParsingFlags(config).meridiem = config._meridiem; // handle meridiem\n\n  config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n  configFromArray(config);\n  return checkOverflow(config);\n}\n/**\n * @param {?} locale\n * @param {?} _hour\n * @param {?} meridiem\n * @return {?}\n */\n\n\nfunction meridiemFixWrap(locale, _hour, meridiem) {\n  var\n  /** @type {?} */\n  hour = _hour;\n\n  if (meridiem == null) {\n    // nothing to do\n    return hour;\n  }\n\n  if (locale.meridiemHour != null) {\n    return locale.meridiemHour(hour, meridiem);\n  }\n\n  if (locale.isPM == null) {\n    // this is not supposed to happen\n    return hour;\n  } // Fallback\n\n\n  var\n  /** @type {?} */\n  isPm = locale.isPM(meridiem);\n\n  if (isPm && hour < 12) {\n    hour += 12;\n  }\n\n  if (!isPm && hour === 12) {\n    hour = 0;\n  }\n\n  return hour;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromStringAndArray(config) {\n  var\n  /** @type {?} */\n  tempConfig;\n  var\n  /** @type {?} */\n  bestMoment;\n  var\n  /** @type {?} */\n  scoreToBeat;\n  var\n  /** @type {?} */\n  currentScore;\n\n  if (!config._f || config._f.length === 0) {\n    getParsingFlags(config).invalidFormat = true;\n    return createInvalid(config);\n  }\n\n  var\n  /** @type {?} */\n  i;\n\n  for (i = 0; i < config._f.length; i++) {\n    currentScore = 0;\n    tempConfig = Object.assign({}, config);\n\n    if (config._useUTC != null) {\n      tempConfig._useUTC = config._useUTC;\n    }\n\n    tempConfig._f = config._f[i];\n    configFromStringAndFormat(tempConfig);\n\n    if (!isValid(tempConfig)) {\n      continue;\n    } // if there is any input that was not parsed add a penalty for that format\n\n\n    currentScore += getParsingFlags(tempConfig).charsLeftOver; // or tokens\n\n    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n    getParsingFlags(tempConfig).score = currentScore;\n\n    if (scoreToBeat == null || currentScore < scoreToBeat) {\n      scoreToBeat = currentScore;\n      bestMoment = tempConfig;\n    }\n  }\n\n  return Object.assign(config, bestMoment || tempConfig);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromObject(config) {\n  if (config._d) {\n    return config;\n  }\n\n  var\n  /** @type {?} */\n  input = config._i;\n\n  if (isObject(input)) {\n    var\n    /** @type {?} */\n    i = normalizeObjectUnits(\n    /** @type {?} */\n    input);\n    config._a = [i.year, i.month, i.day, i.hours, i.minutes, i.seconds, i.milliseconds].map(function (obj) {\n      return isString(obj) ? parseInt(obj, 10) : obj;\n    });\n  }\n\n  return configFromArray(config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction createFromConfig(config) {\n  var\n  /** @type {?} */\n  res = checkOverflow(prepareConfig(config)); // todo: remove, in moment.js it's never called cuz of moment constructor\n\n  res._d = new Date(res._d != null ? res._d.getTime() : NaN);\n\n  if (!isValid(Object.assign({}, res, {\n    _isValid: null\n  }))) {\n    res._d = new Date(NaN);\n  } // todo: update offset\n\n  /*if (res._nextDay) {\n      // Adding is smart enough around DST\n      res._d = add(res._d, 1, 'day');\n      res._nextDay = undefined;\n    }*/\n\n\n  return res;\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction prepareConfig(config) {\n  var\n  /** @type {?} */\n  input = config._i;\n  var\n  /** @type {?} */\n  format = config._f;\n  config._locale = config._locale || getLocale(config._l);\n\n  if (input === null || format === undefined && input === '') {\n    return createInvalid(config, {\n      nullInput: true\n    });\n  }\n\n  if (isString(input)) {\n    config._i = input = config._locale.preparse(input);\n  }\n\n  if (isDate(input)) {\n    config._d = cloneDate(input);\n    return config;\n  } // todo: add check for recursion\n\n\n  if (isArray(format)) {\n    configFromStringAndArray(config);\n  } else if (format) {\n    configFromStringAndFormat(config);\n  } else {\n    configFromInput(config);\n  }\n\n  if (!isValid(config)) {\n    config._d = null;\n  }\n\n  return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\n\n\nfunction configFromInput(config) {\n  var\n  /** @type {?} */\n  input = config._i;\n\n  if (isUndefined(input)) {\n    config._d = new Date();\n  } else if (isDate(input)) {\n    config._d = cloneDate(input);\n  } else if (isString(input)) {\n    configFromString(config);\n  } else if (isArray(input) && input.length) {\n    var\n    /** @type {?} */\n    _arr = input.slice(0);\n\n    config._a = _arr.map(function (obj) {\n      return isString(obj) ? parseInt(obj, 10) : obj;\n    });\n    configFromArray(config);\n  } else if (isObject(input)) {\n    configFromObject(config);\n  } else if (isNumber(input)) {\n    // from milliseconds\n    config._d = new Date(input);\n  } else {\n    //   hooks.createFromInputFallback(config);\n    return createInvalid(config);\n  }\n\n  return config;\n}\n/**\n * @param {?} input\n * @param {?=} format\n * @param {?=} localeKey\n * @param {?=} strict\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction createLocalOrUTC(input, format, localeKey, strict, isUTC) {\n  var\n  /** @type {?} */\n  config = {};\n  var\n  /** @type {?} */\n  _input = input; // params switch -> skip; test it well\n  // if (localeKey === true || localeKey === false) {\n  //     strict = localeKey;\n  //     localeKey = undefined;\n  // }\n  // todo: fail fast and return not valid date\n\n  if (isObject(_input) && isObjectEmpty(_input) || isArray(_input) && _input.length === 0) {\n    _input = undefined;\n  } // object construction must be done this way.\n  // https://github.com/moment/moment/issues/1423\n  // config._isAMomentObject = true;\n\n\n  config._useUTC = config._isUTC = isUTC;\n  config._l = localeKey;\n  config._i = _input;\n  config._f = format;\n  config._strict = strict;\n  return createFromConfig(config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} input\n * @param {?=} format\n * @param {?=} localeKey\n * @param {?=} strict\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction parseDate(input, format, localeKey, strict, isUTC) {\n  if (isDate(input)) {\n    return input;\n  }\n\n  var\n  /** @type {?} */\n  config = createLocalOrUTC(input, format, localeKey, strict, isUTC);\n  return config._d;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} num\n * @return {?}\n */\n\n\nfunction absRound(num) {\n  return num < 0 ? Math.round(num * -1) * -1 : Math.round(num);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\n\n\nfunction isAfter(date1, date2) {\n  var units = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'milliseconds';\n\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  if (units === 'milliseconds') {\n    return date1.valueOf() > date2.valueOf();\n  }\n\n  return date2.valueOf() < startOf(date1, units).valueOf();\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\n\n\nfunction isBefore(date1, date2) {\n  var units = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'milliseconds';\n\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  if (units === 'milliseconds') {\n    return date1.valueOf() < date2.valueOf();\n  }\n\n  return endOf(date1, units).valueOf() < date2.valueOf();\n}\n/**\n * @param {?} date\n * @param {?} daysDisabled\n * @return {?}\n */\n\n\nfunction isDisabledDay(date, daysDisabled) {\n  if (daysDisabled === undefined || !daysDisabled || !daysDisabled.length) {\n    return false;\n  }\n\n  return daysDisabled.some(function (day) {\n    return day === date.getDay();\n  });\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\n\n\nfunction isSame(date1, date2) {\n  var units = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'milliseconds';\n\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  if (units === 'milliseconds') {\n    return date1.valueOf() === date2.valueOf();\n  }\n\n  var\n  /** @type {?} */\n  inputMs = date2.valueOf();\n  return startOf(date1, units).valueOf() <= inputMs && inputMs <= endOf(date1, units).valueOf();\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\naspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\n// tslint:disable-next-line\n\nvar\n/** @type {?} */\nisoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * @param {?=} input\n * @param {?=} key\n * @param {?=} config\n * @return {?}\n */\n\nfunction createDuration(input, key) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var\n  /** @type {?} */\n  duration = convertDuration(input, key); // matching against regexp is expensive, do it on demand\n\n  return new Duration(duration, config);\n}\n/**\n * @param {?} input\n * @param {?} key\n * @return {?}\n */\n\n\nfunction convertDuration(input, key) {\n  // checks for null or undefined\n  if (input == null) {\n    return {};\n  }\n\n  if (isDuration(input)) {\n    return {\n      milliseconds: input._milliseconds,\n      day: input._days,\n      month: input._months\n    };\n  }\n\n  if (isNumber(input)) {\n    // duration = {};\n    return key ? _defineProperty({}, key, input) : {\n      milliseconds: input\n    };\n  }\n\n  if (isString(input)) {\n    var\n    /** @type {?} */\n    match = aspNetRegex.exec(input);\n\n    if (match) {\n      var\n      /** @type {?} */\n      sign = match[1] === '-' ? -1 : 1;\n      return {\n        year: 0,\n        day: toInt(match[DATE]) * sign,\n        hours: toInt(match[HOUR]) * sign,\n        minutes: toInt(match[MINUTE]) * sign,\n        seconds: toInt(match[SECOND]) * sign,\n        // the millisecond decimal point is included in the match\n        milliseconds: toInt(absRound(toInt(match[MILLISECOND]) * 1000)) * sign\n      };\n    }\n\n    match = isoRegex.exec(input);\n\n    if (match) {\n      var\n      /** @type {?} */\n      _sign2 = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;\n\n      return {\n        year: parseIso(match[2], _sign2),\n        month: parseIso(match[3], _sign2),\n        week: parseIso(match[4], _sign2),\n        day: parseIso(match[5], _sign2),\n        hours: parseIso(match[6], _sign2),\n        minutes: parseIso(match[7], _sign2),\n        seconds: parseIso(match[8], _sign2)\n      };\n    }\n  }\n\n  if (isObject(input) && ('from' in input || 'to' in input)) {\n    var\n    /** @type {?} */\n    diffRes = momentsDifference(parseDate(input.from), parseDate(input.to));\n    return {\n      milliseconds: diffRes.milliseconds,\n      month: diffRes.months\n    };\n  }\n\n  return input;\n}\n/**\n * @param {?} inp\n * @param {?} sign\n * @return {?}\n */\n\n\nfunction parseIso(inp, sign) {\n  // We'd normally use ~~inp for this, but unfortunately it also\n  // converts floats to ints.\n  // inp may be undefined, so careful calling replace on it.\n  var\n  /** @type {?} */\n  res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it\n\n  return (isNaN(res) ? 0 : res) * sign;\n}\n/**\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\n\n\nfunction positiveMomentsDifference(base, other) {\n  var\n  /** @type {?} */\n  res = {\n    milliseconds: 0,\n    months: 0\n  };\n  res.months = getMonth(other) - getMonth(base) + (getFullYear(other) - getFullYear(base)) * 12;\n\n  var\n  /** @type {?} */\n  _basePlus = add(cloneDate(base), res.months, 'month');\n\n  if (isAfter(_basePlus, other)) {\n    --res.months;\n  }\n\n  res.milliseconds = +other - +add(cloneDate(base), res.months, 'month');\n  return res;\n}\n/**\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\n\n\nfunction momentsDifference(base, other) {\n  if (!(isDateValid(base) && isDateValid(other))) {\n    return {\n      milliseconds: 0,\n      months: 0\n    };\n  }\n\n  var\n  /** @type {?} */\n  res;\n\n  var\n  /** @type {?} */\n  _other = cloneWithOffset(other, base, {\n    _offset: base.getTimezoneOffset()\n  });\n\n  if (isBefore(base, _other)) {\n    res = positiveMomentsDifference(base, _other);\n  } else {\n    res = positiveMomentsDifference(_other, base);\n    res.milliseconds = -res.milliseconds;\n    res.months = -res.months;\n  }\n\n  return res;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} date\n * @param {?} val\n * @param {?} period\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction add(date, val, period, isUTC) {\n  var\n  /** @type {?} */\n  dur = createDuration(val, period);\n  return addSubtract(date, dur, 1, isUTC);\n}\n/**\n * @param {?} date\n * @param {?} val\n * @param {?} period\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction subtract(date, val, period, isUTC) {\n  var\n  /** @type {?} */\n  dur = createDuration(val, period);\n  return addSubtract(date, dur, -1, isUTC);\n}\n/**\n * @param {?} date\n * @param {?} duration\n * @param {?} isAdding\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction addSubtract(date, duration, isAdding, isUTC) {\n  var\n  /** @type {?} */\n  milliseconds = duration._milliseconds;\n  var\n  /** @type {?} */\n  days = absRound(duration._days);\n  var\n  /** @type {?} */\n  months = absRound(duration._months); // todo: add timezones support\n  // const _updateOffset = updateOffset == null ? true : updateOffset;\n\n  if (months) {\n    setMonth(date, getMonth(date, isUTC) + months * isAdding, isUTC);\n  }\n\n  if (days) {\n    setDate(date, getDate(date, isUTC) + days * isAdding, isUTC);\n  }\n\n  if (milliseconds) {\n    setTime(date, getTime(date) + milliseconds * isAdding);\n  }\n\n  return cloneDate(date); // todo: add timezones support\n  // if (_updateOffset) {\n  //   hooks.updateOffset(date, days || months);\n  // }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction initDayOfWeek() {\n  // FORMATTING\n  addFormatToken('d', null, 'do', function (date, opts) {\n    return getDay(date, opts.isUTC).toString(10);\n  });\n  addFormatToken('dd', null, null, function (date, opts) {\n    return opts.locale.weekdaysMin(date, opts.format, opts.isUTC);\n  });\n  addFormatToken('ddd', null, null, function (date, opts) {\n    return opts.locale.weekdaysShort(date, opts.format, opts.isUTC);\n  });\n  addFormatToken('dddd', null, null, function (date, opts) {\n    return opts.locale.weekdays(date, opts.format, opts.isUTC);\n  });\n  addFormatToken('e', null, null, function (date, opts) {\n    return getLocaleDayOfWeek(date, opts.locale, opts.isUTC).toString(10); // return getDay(date, opts.isUTC).toString(10);\n  });\n  addFormatToken('E', null, null, function (date, opts) {\n    return getISODayOfWeek(date, opts.isUTC).toString(10);\n  }); // ALIASES\n\n  addUnitAlias('day', 'd');\n  addUnitAlias('weekday', 'e');\n  addUnitAlias('isoWeekday', 'E'); // PARSING\n\n  addRegexToken('d', match1to2);\n  addRegexToken('e', match1to2);\n  addRegexToken('E', match1to2);\n  addRegexToken('dd', function (isStrict, locale) {\n    return locale.weekdaysMinRegex(isStrict);\n  });\n  addRegexToken('ddd', function (isStrict, locale) {\n    return locale.weekdaysShortRegex(isStrict);\n  });\n  addRegexToken('dddd', function (isStrict, locale) {\n    return locale.weekdaysRegex(isStrict);\n  });\n  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n    var\n    /** @type {?} */\n    weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid\n\n\n    if (weekday != null) {\n      week[\"d\"] = weekday;\n    } else {\n      getParsingFlags(config).invalidWeekday = !!input;\n    }\n\n    return config;\n  });\n  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n    week[token] = toInt(input);\n    return config;\n  });\n}\n/**\n * @param {?} input\n * @param {?} locale\n * @return {?}\n */\n\n\nfunction parseWeekday(input, locale) {\n  if (!isString(input)) {\n    return input;\n  }\n\n  var\n  /** @type {?} */\n  _num = parseInt(input, 10);\n\n  if (!isNaN(_num)) {\n    return _num;\n  }\n\n  var\n  /** @type {?} */\n  _weekDay = locale.weekdaysParse(input);\n\n  if (isNumber(_weekDay)) {\n    return _weekDay;\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @param {?=} locale\n * @return {?}\n */\n\n\nfunction parseIsoWeekday(input) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getLocale();\n\n  if (isString(input)) {\n    return locale.weekdaysParse(input) % 7 || 7;\n  }\n\n  return isNumber(input) && isNaN(input) ? null : input;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction setDayOfWeek(date, input) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getLocale();\n  var isUTC = arguments.length > 3 ? arguments[3] : undefined;\n  var\n  /** @type {?} */\n  day = getDay(date, isUTC);\n\n  var\n  /** @type {?} */\n  _input = parseWeekday(input, locale);\n\n  return add(date, _input - day, 'day');\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getDayOfWeek(date, isUTC) {\n  return getDay(date, isUTC);\n}\n/**\n * ****************************************\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getLocaleDayOfWeek(date) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getLocale();\n  var isUTC = arguments.length > 2 ? arguments[2] : undefined;\n  return (getDay(date, isUTC) + 7 - locale.firstDayOfWeek()) % 7;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} opts\n * @return {?}\n */\n\n\nfunction setLocaleDayOfWeek(date, input) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var\n  /** @type {?} */\n  weekday = getLocaleDayOfWeek(date, opts.locale, opts.isUTC);\n  return add(date, input - weekday, 'day');\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\n\n\nfunction getISODayOfWeek(date, isUTC) {\n  return getDay(date, isUTC) || 7;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} opts\n * @return {?}\n */\n\n\nfunction setISODayOfWeek(date, input) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // behaves the same as moment#day except\n  // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n  // as a setter, sunday should belong to the previous week.\n  var\n  /** @type {?} */\n  weekday = parseIsoWeekday(input, opts.locale);\n  return setDayOfWeek(date, getDayOfWeek(date) % 7 ? weekday : weekday - 7);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n\n\nvar\n/** @type {?} */\nsymbolMap = {\n  1: '١',\n  2: '٢',\n  3: '٣',\n  4: '٤',\n  5: '٥',\n  6: '٦',\n  7: '٧',\n  8: '٨',\n  9: '٩',\n  0: '٠'\n};\nvar\n/** @type {?} */\nnumberMap = {\n  '١': '1',\n  '٢': '2',\n  '٣': '3',\n  '٤': '4',\n  '٥': '5',\n  '٦': '6',\n  '٧': '7',\n  '٨': '8',\n  '٩': '9',\n  '٠': '0'\n};\n\nvar\n/** @type {?} */\npluralForm = function pluralForm(num) {\n  return num === 0 ? 0 : num === 1 ? 1 : num === 2 ? 2 : num % 100 >= 3 && num % 100 <= 10 ? 3 : num % 100 >= 11 ? 4 : 5;\n};\n\nvar\n/** @type {?} */\nplurals = {\n  s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],\n  m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],\n  h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],\n  d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],\n  M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],\n  y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']\n};\n\nvar\n/** @type {?} */\npluralize = function pluralize(u) {\n  return function (num, withoutSuffix) {\n    var\n    /** @type {?} */\n    f = pluralForm(num);\n    var\n    /** @type {?} */\n    str = plurals[u][pluralForm(num)];\n\n    if (f === 2) {\n      str = str[withoutSuffix ? 0 : 1];\n    }\n\n    return (\n      /** @type {?} */\n      str.replace(/%d/i, num.toString())\n    );\n  };\n};\n\nvar\n/** @type {?} */\nmonths = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];\nvar\n/** @type {?} */\narLocale = {\n  abbr: 'ar',\n  months: months,\n  monthsShort: months,\n  weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n  weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n  weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: \"D/\\u200FM/\\u200FYYYY\",\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  meridiemParse: /ص|م/,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return 'م' === input;\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 12) {\n      return 'ص';\n    } else {\n      return 'م';\n    }\n  },\n  calendar: {\n    sameDay: '[اليوم عند الساعة] LT',\n    nextDay: '[غدًا عند الساعة] LT',\n    nextWeek: 'dddd [عند الساعة] LT',\n    lastDay: '[أمس عند الساعة] LT',\n    lastWeek: 'dddd [عند الساعة] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'بعد %s',\n    past: 'منذ %s',\n    s: pluralize('s'),\n    ss: pluralize('s'),\n    m: pluralize('m'),\n    mm: pluralize('m'),\n    h: pluralize('h'),\n    hh: pluralize('h'),\n    d: pluralize('d'),\n    dd: pluralize('d'),\n    M: pluralize('M'),\n    MM: pluralize('M'),\n    y: pluralize('y'),\n    yy: pluralize('y')\n  },\n\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  preparse: function preparse(str) {\n    return str.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {\n      return numberMap[match];\n    }).replace(/،/g, ',');\n  },\n\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  postformat: function postformat(str) {\n    return str.replace(/\\d/g, function (match) {\n      return symbolMap[match];\n    }).replace(/,/g, '،');\n  },\n  week: {\n    dow: 6,\n    // Saturday is the first day of the week.\n    doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Bulgarian [bg]\n//! author : Iskren Ivov Chernev : https://github.com/ichernev\n//! author : Kunal Marwaha : https://github.com/marwahaha\n//! author : Matt Grande : https://github.com/mattgrande\n//! author : Isaac Cambron : https://github.com/icambron\n//! author : Venelin Manchev : https://github.com/vmanchev\n\nvar\n/** @type {?} */\nbgLocale = {\n  abbr: 'bg',\n  months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),\n  monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),\n  weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),\n  weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),\n  weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'D.MM.YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY H:mm',\n    LLLL: 'dddd, D MMMM YYYY H:mm'\n  },\n  calendar: {\n    sameDay: '[Днес в] LT',\n    nextDay: '[Утре в] LT',\n    nextWeek: 'dddd [в] LT',\n    lastDay: '[Вчера в] LT',\n    lastWeek: function lastWeek(d) {\n      switch (d) {\n        case 0:\n        case 3:\n        case 6:\n          return '[В изминалата] dddd [в] LT';\n\n        case 1:\n        case 2:\n        case 4:\n        case 5:\n          return '[В изминалия] dddd [в] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'след %s',\n    past: 'преди %s',\n    s: 'няколко секунди',\n    ss: '%d секунди',\n    m: 'минута',\n    mm: '%d минути',\n    h: 'час',\n    hh: '%d часа',\n    d: 'ден',\n    dd: '%d дни',\n    M: 'месец',\n    MM: '%d месеца',\n    y: 'година',\n    yy: '%d години'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    number = Number(_num);\n    var\n    /** @type {?} */\n    lastDigit = number % 10,\n\n    /** @type {?} */\n    last2Digits = number % 100;\n\n    if (number === 0) {\n      return number + '-ев';\n    } else if (last2Digits === 0) {\n      return number + '-ен';\n    } else if (last2Digits > 10 && last2Digits < 20) {\n      return number + '-ти';\n    } else if (lastDigit === 1) {\n      return number + '-ви';\n    } else if (lastDigit === 2) {\n      return number + '-ри';\n    } else if (lastDigit === 7 || lastDigit === 8) {\n      return number + '-ми';\n    } else {\n      return number + '-ти';\n    }\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Catalan [ca]\n//! author : Xavier Arbat : https://github.com/XavisaurusRex\n\nvar\n/** @type {?} */\nmonthsShortDot = 'gen._feb._mar._abr._mai._jun._jul._ago._set._oct._nov._des.'.split('_'),\n\n/** @type {?} */\n_monthsShort = 'ene_feb_mar_abr_mai_jun_jul_ago_set_oct_nov_des'.split('_');\n\nvar\n/** @type {?} */\nmonthsParse = [/^gen/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^oct/i, /^nov/i, /^des/i];\nvar\n/** @type {?} */\nmonthsRegex = /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre|gen\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|jun\\.?|jul\\.?|ago\\.?|set\\.?|oct\\.?|nov\\.?|des\\.?)/i;\nvar\n/** @type {?} */\ncaLocale = {\n  abbr: 'ca',\n  months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortDot;\n    }\n\n    if (/-MMM-/.test(format)) {\n      return _monthsShort[getMonth(date, isUTC)];\n    }\n\n    return monthsShortDot[getMonth(date, isUTC)];\n  },\n  monthsRegex: monthsRegex,\n  monthsShortRegex: monthsRegex,\n  monthsStrictRegex: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i,\n  monthsShortStrictRegex: /^(gen\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|jun\\.?|jul\\.?|ago\\.?|set\\.?|oct\\.?|nov\\.?|des\\.?)/i,\n  monthsParse: monthsParse,\n  longMonthsParse: monthsParse,\n  shortMonthsParse: monthsParse,\n  weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),\n  weekdaysShort: 'diu._dil._dim._dix._dij._div._dis.'.split('_'),\n  weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D [de] MMMM [de] YYYY',\n    LLL: 'D [de] MMMM [de] YYYY H:mm',\n    LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n  },\n  calendar: {\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    sameDay: function sameDay(date) {\n      return '[avui a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextDay: function nextDay(date) {\n      return '[dema a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return 'dddd [a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastDay: function lastDay(date) {\n      return '[ahir a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return '[el] dddd [' + ('passada la ' + (getHours(date) !== 1) ? 'passades les' : '') + '] LT';\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'en %s',\n    past: 'fa %s',\n    s: 'uns segons',\n    ss: '%d segons',\n    m: 'un minut',\n    mm: '%d minuts',\n    h: 'una hora',\n    hh: '%d hores',\n    d: 'un dia',\n    dd: '%d dies',\n    M: 'un mes',\n    MM: '%d mesos',\n    y: 'un any',\n    yy: '%d anys'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(er|on|er|rt|é)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n    var\n    /** @type {?} */\n    output = num > 4 ? 'é' : num === 1 || num === 3 ? 'r' : num === 2 ? 'n' : num === 4 ? 't' : 'é';\n    return num + output;\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\n\nvar\n/** @type {?} */\nmonths$1 = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');\nvar\n/** @type {?} */\nmonthsShort$1 = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\n\nfunction plural(num) {\n  return num > 1 && num < 5 && ~~(num / 10) !== 1;\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction translate(num, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  result = num + ' ';\n\n  switch (key) {\n    case 's':\n      // a few seconds / in a few seconds / a few seconds ago\n      return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';\n\n    case 'ss':\n      // 9 seconds / in 9 seconds / 9 seconds ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'sekundy' : 'sekund');\n      } else {\n        return result + 'sekundami';\n      }\n\n    // break;\n\n    case 'm':\n      // a minute / in a minute / a minute ago\n      return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';\n\n    case 'mm':\n      // 9 minutes / in 9 minutes / 9 minutes ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'minuty' : 'minut');\n      } else {\n        return result + 'minutami';\n      }\n\n    // break;\n\n    case 'h':\n      // an hour / in an hour / an hour ago\n      return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';\n\n    case 'hh':\n      // 9 hours / in 9 hours / 9 hours ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'hodiny' : 'hodin');\n      } else {\n        return result + 'hodinami';\n      }\n\n    // break;\n\n    case 'd':\n      // a day / in a day / a day ago\n      return withoutSuffix || isFuture ? 'den' : 'dnem';\n\n    case 'dd':\n      // 9 days / in 9 days / 9 days ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'dny' : 'dní');\n      } else {\n        return result + 'dny';\n      }\n\n    // break;\n\n    case 'M':\n      // a month / in a month / a month ago\n      return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';\n\n    case 'MM':\n      // 9 months / in 9 months / 9 months ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'měsíce' : 'měsíců');\n      } else {\n        return result + 'měsíci';\n      }\n\n    // break;\n\n    case 'y':\n      // a year / in a year / a year ago\n      return withoutSuffix || isFuture ? 'rok' : 'rokem';\n\n    case 'yy':\n      // 9 years / in 9 years / 9 years ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural(num) ? 'roky' : 'let');\n      } else {\n        return result + 'lety';\n      }\n\n  }\n}\n\nvar\n/** @type {?} */\ncsLocale = {\n  abbr: 'cs',\n  months: months$1,\n  monthsShort: monthsShort$1,\n  monthsParse: function (months, monthsShort) {\n    var\n    /** @type {?} */\n    i,\n\n    /** @type {?} */\n    _monthsParse = [];\n\n    for (i = 0; i < 12; i++) {\n      // use custom parser to solve problem with July (červenec)\n      _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');\n    }\n\n    return _monthsParse;\n  }(months$1, monthsShort$1),\n  shortMonthsParse: function (monthsShort) {\n    var\n    /** @type {?} */\n    i,\n\n    /** @type {?} */\n    _shortMonthsParse = [];\n\n    for (i = 0; i < 12; i++) {\n      _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');\n    }\n\n    return _shortMonthsParse;\n  }(monthsShort$1),\n  longMonthsParse: function (months) {\n    var\n    /** @type {?} */\n    i,\n\n    /** @type {?} */\n    _longMonthsParse = [];\n\n    for (i = 0; i < 12; i++) {\n      _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');\n    }\n\n    return _longMonthsParse;\n  }(months$1),\n  weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n  weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),\n  weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY H:mm',\n    LLLL: 'dddd D. MMMM YYYY H:mm',\n    l: 'D. M. YYYY'\n  },\n  calendar: {\n    sameDay: '[dnes v] LT',\n    nextDay: '[zítra v] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[v neděli v] LT';\n\n        case 1:\n        case 2:\n          return '[v] dddd [v] LT';\n\n        case 3:\n          return '[ve středu v] LT';\n\n        case 4:\n          return '[ve čtvrtek v] LT';\n\n        case 5:\n          return '[v pátek v] LT';\n\n        case 6:\n          return '[v sobotu v] LT';\n      }\n    },\n    lastDay: '[včera v] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[minulou neděli v] LT';\n\n        case 1:\n        case 2:\n          return '[minulé] dddd [v] LT';\n\n        case 3:\n          return '[minulou středu v] LT';\n\n        case 4:\n        case 5:\n          return '[minulý] dddd [v] LT';\n\n        case 6:\n          return '[minulou sobotu v] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'za %s',\n    past: 'před %s',\n    s: translate,\n    ss: translate,\n    m: translate,\n    mm: translate,\n    h: translate,\n    hh: translate,\n    d: translate,\n    dd: translate,\n    M: translate,\n    MM: translate,\n    y: translate,\n    yy: translate\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format\n//! moment.js locale configuration\n//! locale : Danish (Denmark) [da]\n//! author : Per Hansen : https://github.com/perhp\n\nvar\n/** @type {?} */\ndaLocale = {\n  abbr: 'da',\n  months: 'Januar_Februar_Marts_April_Maj_Juni_Juli_August_September_Oktober_November_December'.split('_'),\n  monthsShort: 'Jan_Feb_Mar_Apr_Maj_Jun_Jul_Aug_Sep_Okt_Nov_Dec'.split('_'),\n  weekdays: 'Søndag_Mandag_Tirsdag_Onsdag_Torsdag_Fredag_Lørdag'.split('_'),\n  weekdaysShort: 'Søn_Man_Tir_Ons_Tor_Fre_Lør'.split('_'),\n  weekdaysMin: 'Sø_Ma_Ti_On_To_Fr_Lø'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY HH:mm',\n    LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'\n  },\n  calendar: {\n    sameDay: '[i dag kl.] LT',\n    nextDay: '[i morgen kl.] LT',\n    nextWeek: 'på dddd [kl.] LT',\n    lastDay: '[i går kl.] LT',\n    lastWeek: '[i] dddd[s kl.] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'om %s',\n    past: '%s siden',\n    s: 'få sekunder',\n    m: 'et minut',\n    mm: '%d minutter',\n    h: 'en time',\n    hh: '%d timer',\n    d: 'en dag',\n    dd: '%d dage',\n    M: 'en måned',\n    MM: '%d måneder',\n    y: 'et år',\n    yy: '%d år'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-key-quotes\n\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction processRelativeTime(num, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  format = {\n    'm': ['eine Minute', 'einer Minute'],\n    'h': ['eine Stunde', 'einer Stunde'],\n    'd': ['ein Tag', 'einem Tag'],\n    'dd': [num + ' Tage', num + ' Tagen'],\n    'M': ['ein Monat', 'einem Monat'],\n    'MM': [num + ' Monate', num + ' Monaten'],\n    'y': ['ein Jahr', 'einem Jahr'],\n    'yy': [num + ' Jahre', num + ' Jahren']\n  };\n  return withoutSuffix ? format[key][0] : format[key][1];\n}\n\nvar\n/** @type {?} */\ndeLocale = {\n  abbr: 'de',\n  months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n  monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n  weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),\n  weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY HH:mm',\n    LLLL: 'dddd, D. MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[heute um] LT [Uhr]',\n    sameElse: 'L',\n    nextDay: '[morgen um] LT [Uhr]',\n    nextWeek: 'dddd [um] LT [Uhr]',\n    lastDay: '[gestern um] LT [Uhr]',\n    lastWeek: '[letzten] dddd [um] LT [Uhr]'\n  },\n  relativeTime: {\n    future: 'in %s',\n    past: 'vor %s',\n    s: 'ein paar Sekunden',\n    ss: '%d Sekunden',\n    m: processRelativeTime,\n    mm: '%d Minuten',\n    h: processRelativeTime,\n    hh: '%d Stunden',\n    d: processRelativeTime,\n    dd: processRelativeTime,\n    M: processRelativeTime,\n    MM: processRelativeTime,\n    y: processRelativeTime,\n    yy: processRelativeTime\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : English (United Kingdom) [en-gb]\n//! author : Chris Gedrim : https://github.com/chrisgedrim\n\nvar\n/** @type {?} */\nenGbLocale = {\n  abbr: 'en-gb',\n  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n  monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n  weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n  weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday at] LT',\n    lastWeek: '[Last] dddd [at] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'in %s',\n    past: '%s ago',\n    s: 'a few seconds',\n    ss: '%d seconds',\n    m: 'a minute',\n    mm: '%d minutes',\n    h: 'an hour',\n    hh: '%d hours',\n    d: 'a day',\n    dd: '%d days',\n    M: 'a month',\n    MM: '%d months',\n    y: 'a year',\n    yy: '%d years'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n    var\n    /** @type {?} */\n    b = num % 10,\n\n    /** @type {?} */\n    output = ~~(num % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    return num + output;\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish (Dominican Republic) [es-do]\n\nvar\n/** @type {?} */\nmonthsShortDot$1 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),\n\n/** @type {?} */\nmonthsShort$2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nvar\n/** @type {?} */\nmonthsParse$1 = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];\nvar\n/** @type {?} */\nmonthsRegex$1 = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;\nvar\n/** @type {?} */\nesDoLocale = {\n  abbr: 'es-do',\n  months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortDot$1;\n    } else if (/-MMM-/.test(format)) {\n      return monthsShort$2[getMonth(date, isUTC)];\n    } else {\n      return monthsShortDot$1[getMonth(date, isUTC)];\n    }\n  },\n  monthsRegex: monthsRegex$1,\n  monthsShortRegex: monthsRegex$1,\n  monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n  monthsShortStrictRegex: /^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,\n  monthsParse: monthsParse$1,\n  longMonthsParse: monthsParse$1,\n  shortMonthsParse: monthsParse$1,\n  weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n  weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n  weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'h:mm A',\n    LTS: 'h:mm:ss A',\n    L: 'DD/MM/YYYY',\n    LL: 'D [de] MMMM [de] YYYY',\n    LLL: 'D [de] MMMM [de] YYYY h:mm A',\n    LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'\n  },\n  calendar: {\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    sameDay: function sameDay(date) {\n      return '[hoy a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextDay: function nextDay(date) {\n      return '[mañana a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return 'dddd [a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastDay: function lastDay(date) {\n      return '[ayer a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return '[el] dddd [pasado a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'en %s',\n    past: 'hace %s',\n    s: 'unos segundos',\n    ss: '%d segundos',\n    m: 'un minuto',\n    mm: '%d minutos',\n    h: 'una hora',\n    hh: '%d horas',\n    d: 'un día',\n    dd: '%d días',\n    M: 'un mes',\n    MM: '%d meses',\n    y: 'un año',\n    yy: '%d años'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish [es]\n//! author : Julio Napurí : https://github.com/julionc\n\nvar\n/** @type {?} */\nmonthsShortDot$2 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),\n\n/** @type {?} */\nmonthsShort$3 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nvar\n/** @type {?} */\nmonthsParse$2 = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];\nvar\n/** @type {?} */\nmonthsRegex$2 = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;\nvar\n/** @type {?} */\nesLocale = {\n  abbr: 'es',\n  months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortDot$2;\n    }\n\n    if (/-MMM-/.test(format)) {\n      return monthsShort$3[getMonth(date, isUTC)];\n    }\n\n    return monthsShortDot$2[getMonth(date, isUTC)];\n  },\n  monthsRegex: monthsRegex$2,\n  monthsShortRegex: monthsRegex$2,\n  monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n  monthsShortStrictRegex: /^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,\n  monthsParse: monthsParse$2,\n  longMonthsParse: monthsParse$2,\n  shortMonthsParse: monthsParse$2,\n  weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n  weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n  weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D [de] MMMM [de] YYYY',\n    LLL: 'D [de] MMMM [de] YYYY H:mm',\n    LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n  },\n  calendar: {\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    sameDay: function sameDay(date) {\n      return '[hoy a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextDay: function nextDay(date) {\n      return '[mañana a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return 'dddd [a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastDay: function lastDay(date) {\n      return '[ayer a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return '[el] dddd [pasado a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'en %s',\n    past: 'hace %s',\n    s: 'unos segundos',\n    ss: '%d segundos',\n    m: 'un minuto',\n    mm: '%d minutos',\n    h: 'una hora',\n    hh: '%d horas',\n    d: 'un día',\n    dd: '%d días',\n    M: 'un mes',\n    MM: '%d meses',\n    y: 'un año',\n    yy: '%d años'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish (United States) [es-us]\n//! author : bustta : https://github.com/bustta\n\nvar\n/** @type {?} */\nmonthsShortDot$3 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');\nvar\n/** @type {?} */\nmonthsShort$4 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nvar\n/** @type {?} */\nesUsLocale = {\n  abbr: 'es-us',\n  months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortDot$3;\n    } else if (/-MMM-/.test(format)) {\n      return monthsShort$4[getMonth(date, isUTC)];\n    } else {\n      return monthsShortDot$3[getMonth(date, isUTC)];\n    }\n  },\n  monthsParseExact: true,\n  weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n  weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n  weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'h:mm A',\n    LTS: 'h:mm:ss A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM [de] D [de] YYYY',\n    LLL: 'MMMM [de] D [de] YYYY h:mm A',\n    LLLL: 'dddd, MMMM [de] D [de] YYYY h:mm A'\n  },\n  calendar: {\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    sameDay: function sameDay(date) {\n      return '[hoy a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextDay: function nextDay(date) {\n      return '[mañana a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return 'dddd [a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastDay: function lastDay(date) {\n      return '[ayer a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return '[el] dddd [pasado a la' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'en %s',\n    past: 'hace %s',\n    s: 'unos segundos',\n    ss: '%d segundos',\n    m: 'un minuto',\n    mm: '%d minutos',\n    h: 'una hora',\n    hh: '%d horas',\n    d: 'un día',\n    dd: '%d días',\n    M: 'un mes',\n    MM: '%d meses',\n    y: 'un año',\n    yy: '%d años'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº',\n  week: {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n// https://github.com/moment/moment/blob/develop/locale/fi.js\n\nvar\n/** @type {?} */\nnumbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),\n\n/** @type {?} */\nnumbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction translate$1(num, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  result = '';\n\n  switch (key) {\n    case 's':\n      return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';\n\n    case 'ss':\n      return isFuture ? 'sekunnin' : 'sekuntia';\n\n    case 'm':\n      return isFuture ? 'minuutin' : 'minuutti';\n\n    case 'mm':\n      result = isFuture ? 'minuutin' : 'minuuttia';\n      break;\n\n    case 'h':\n      return isFuture ? 'tunnin' : 'tunti';\n\n    case 'hh':\n      result = isFuture ? 'tunnin' : 'tuntia';\n      break;\n\n    case 'd':\n      return isFuture ? 'päivän' : 'päivä';\n\n    case 'dd':\n      result = isFuture ? 'päivän' : 'päivää';\n      break;\n\n    case 'M':\n      return isFuture ? 'kuukauden' : 'kuukausi';\n\n    case 'MM':\n      result = isFuture ? 'kuukauden' : 'kuukautta';\n      break;\n\n    case 'y':\n      return isFuture ? 'vuoden' : 'vuosi';\n\n    case 'yy':\n      result = isFuture ? 'vuoden' : 'vuotta';\n      break;\n  }\n\n  result = verbalNumber(num, isFuture) + ' ' + result;\n  return result;\n}\n/**\n * @param {?} num\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction verbalNumber(num, isFuture) {\n  return num < 10 ? isFuture ? numbersFuture[num] : numbersPast[num] : num;\n}\n\nvar\n/** @type {?} */\nfiLocale = {\n  abbr: 'fi',\n  months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),\n  monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),\n  weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),\n  weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),\n  weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),\n  longDateFormat: {\n    LT: 'HH.mm',\n    LTS: 'HH.mm.ss',\n    L: 'DD.MM.YYYY',\n    LL: 'Do MMMM[ta] YYYY',\n    LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',\n    LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',\n    l: 'D.M.YYYY',\n    ll: 'Do MMM YYYY',\n    lll: 'Do MMM YYYY, [klo] HH.mm',\n    llll: 'ddd, Do MMM YYYY, [klo] HH.mm'\n  },\n  calendar: {\n    sameDay: '[tänään] [klo] LT',\n    nextDay: '[huomenna] [klo] LT',\n    nextWeek: 'dddd [klo] LT',\n    lastDay: '[eilen] [klo] LT',\n    lastWeek: '[viime] dddd[na] [klo] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s päästä',\n    past: '%s sitten',\n    s: translate$1,\n    ss: translate$1,\n    m: translate$1,\n    mm: translate$1,\n    h: translate$1,\n    hh: translate$1,\n    d: translate$1,\n    dd: translate$1,\n    M: translate$1,\n    MM: translate$1,\n    y: translate$1,\n    yy: translate$1\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : French [fr]\n//! author : John Fischer : https://github.com/jfroffice\n\nvar\n/** @type {?} */\nfrLocale = {\n  abbr: 'fr',\n  months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n  monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n  weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n  weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Aujourd’hui à] LT',\n    nextDay: '[Demain à] LT',\n    nextWeek: 'dddd [à] LT',\n    lastDay: '[Hier à] LT',\n    lastWeek: 'dddd [dernier à] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'dans %s',\n    past: 'il y a %s',\n    s: 'quelques secondes',\n    ss: '%d secondes',\n    m: 'une minute',\n    mm: '%d minutes',\n    h: 'une heure',\n    hh: '%d heures',\n    d: 'un jour',\n    dd: '%d jours',\n    M: 'un mois',\n    MM: '%d mois',\n    y: 'un an',\n    yy: '%d ans'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(er|)/,\n\n  /**\n   * @param {?} _num\n   * @param {?} period\n   * @return {?}\n   */\n  ordinal: function ordinal(_num, period) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n\n    switch (period) {\n      // TODO: Return 'e' when day of month > 1. Move this case inside\n      // block for masculine words below.\n      // See https://github.com/moment/moment/issues/3375\n      case 'D':\n        return num + (num === 1 ? 'er' : '');\n      // Words with masculine grammatical gender: mois, trimestre, jour\n\n      default:\n      case 'M':\n      case 'Q':\n      case 'DDD':\n      case 'd':\n        return num + (num === 1 ? 'er' : 'e');\n      // Words with feminine grammatical gender: semaine\n\n      case 'w':\n      case 'W':\n        return num + (num === 1 ? 're' : 'e');\n    }\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Galician [gl]\n//! author : Darío Beiró : https://github.com/quinobravo\n\nvar\n/** @type {?} */\nmonthsShortDot$4 = 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),\n\n/** @type {?} */\nmonthsShort$5 = 'xan_feb_mar_abr_mai_xuñ_xul_ago_set_out_nov_dec'.split('_');\nvar\n/** @type {?} */\nmonthsParse$3 = [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xuñ/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i];\nvar\n/** @type {?} */\nmonthsRegex$3 = /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro|xan\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|xuñ\\.?|xul\\.?|ago\\.?|set\\.?|out\\.?|nov\\.?|dec\\.?)/i;\nvar\n/** @type {?} */\nglLocale = {\n  abbr: 'gl',\n  months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortDot$4;\n    }\n\n    if (/-MMM-/.test(format)) {\n      return monthsShort$5[getMonth(date, isUTC)];\n    }\n\n    return monthsShortDot$4[getMonth(date, isUTC)];\n  },\n  monthsRegex: monthsRegex$3,\n  monthsShortRegex: monthsRegex$3,\n  monthsStrictRegex: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i,\n  monthsShortStrictRegex: /^(xan\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|xuñ\\.?|xul\\.?|ago\\.?|set\\.?|out\\.?|nov\\.?|dec\\.?)/i,\n  monthsParse: monthsParse$3,\n  longMonthsParse: monthsParse$3,\n  shortMonthsParse: monthsParse$3,\n  weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),\n  weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),\n  weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D [de] MMMM [de] YYYY',\n    LLL: 'D [de] MMMM [de] YYYY H:mm',\n    LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n  },\n  calendar: {\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    sameDay: function sameDay(date) {\n      return '[hoxe á' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextDay: function nextDay(date) {\n      return '[mañan á' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return 'dddd [á' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastDay: function lastDay(date) {\n      return '[onte á' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return '[o] dddd [pasado á' + (getHours(date) !== 1 ? 's' : '') + '] LT';\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'en %s',\n    past: 'fai %s',\n    s: 'uns segundos',\n    ss: '%d segundos',\n    m: 'un minuto',\n    mm: '%d minutos',\n    h: 'unha hora',\n    hh: '%d horas',\n    d: 'un día',\n    dd: '%d días',\n    M: 'un mes',\n    MM: '%d meses',\n    y: 'un ano',\n    yy: '%d anos'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Hebrew [he]\n//! author : Tomer Cohen : https://github.com/tomer\n//! author : Moshe Simantov : https://github.com/DevelopmentIL\n//! author : Tal Ater : https://github.com/TalAter\n\nvar\n/** @type {?} */\nheLocale = {\n  abbr: 'he',\n  months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),\n  monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),\n  weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),\n  weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),\n  weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D [ב]MMMM YYYY',\n    LLL: 'D [ב]MMMM YYYY HH:mm',\n    LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',\n    l: 'D/M/YYYY',\n    ll: 'D MMM YYYY',\n    lll: 'D MMM YYYY HH:mm',\n    llll: 'ddd, D MMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[היום ב־]LT',\n    nextDay: '[מחר ב־]LT',\n    nextWeek: 'dddd [בשעה] LT',\n    lastDay: '[אתמול ב־]LT',\n    lastWeek: '[ביום] dddd [האחרון בשעה] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'בעוד %s',\n    past: 'לפני %s',\n    s: 'מספר שניות',\n    ss: '%d שניות',\n    m: 'דקה',\n    mm: '%d דקות',\n    h: 'שעה',\n\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    hh: function hh(num) {\n      if (num === 2) {\n        return 'שעתיים';\n      }\n\n      return num + ' שעות';\n    },\n    d: 'יום',\n\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    dd: function dd(num) {\n      if (num === 2) {\n        return 'יומיים';\n      }\n\n      return num + ' ימים';\n    },\n    M: 'חודש',\n\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    MM: function MM(num) {\n      if (num === 2) {\n        return 'חודשיים';\n      }\n\n      return num + ' חודשים';\n    },\n    y: 'שנה',\n\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    yy: function yy(num) {\n      if (num === 2) {\n        return 'שנתיים';\n      } else if (num % 10 === 0 && num !== 10) {\n        return num + ' שנה';\n      }\n\n      return num + ' שנים';\n    }\n  },\n  meridiemParse: /אחה\"צ|לפנה\"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return /^(אחה\"צ|אחרי הצהריים|בערב)$/.test(input);\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 5) {\n      return 'לפנות בוקר';\n    } else if (hour < 10) {\n      return 'בבוקר';\n    } else if (hour < 12) {\n      return isLower ? 'לפנה\"צ' : 'לפני הצהריים';\n    } else if (hour < 18) {\n      return isLower ? 'אחה\"צ' : 'אחרי הצהריים';\n    } else {\n      return 'בערב';\n    }\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Hindi [hi]\n//! author : Mayank Singhal : https://github.com/mayanksinghal\n\nvar\n/** @type {?} */\nsymbolMap$1 = {\n  1: '१',\n  2: '२',\n  3: '३',\n  4: '४',\n  5: '५',\n  6: '६',\n  7: '७',\n  8: '८',\n  9: '९',\n  0: '०'\n},\n\n/** @type {?} */\nnumberMap$1 = {\n  '१': '1',\n  '२': '2',\n  '३': '3',\n  '४': '4',\n  '५': '5',\n  '६': '6',\n  '७': '7',\n  '८': '8',\n  '९': '9',\n  '०': '0'\n};\nvar\n/** @type {?} */\nhiLocale = {\n  abbr: 'hi',\n  months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),\n  monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),\n  weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),\n  weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),\n  longDateFormat: {\n    LT: 'A h:mm बजे',\n    LTS: 'A h:mm:ss बजे',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY, A h:mm बजे',\n    LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'\n  },\n  calendar: {\n    sameDay: '[आज] LT',\n    nextDay: '[कल] LT',\n    nextWeek: 'dddd, LT',\n    lastDay: '[कल] LT',\n    lastWeek: '[पिछले] dddd, LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s में',\n    past: '%s पहले',\n    s: 'कुछ ही क्षण',\n    ss: '%d सेकंड',\n    m: 'एक मिनट',\n    mm: '%d मिनट',\n    h: 'एक घंटा',\n    hh: '%d घंटे',\n    d: 'एक दिन',\n    dd: '%d दिन',\n    M: 'एक महीने',\n    MM: '%d महीने',\n    y: 'एक वर्ष',\n    yy: '%d वर्ष'\n  },\n\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  preparse: function preparse(str) {\n    return str.replace(/[१२३४५६७८९०]/g, function (match) {\n      return numberMap$1[match];\n    });\n  },\n\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  postformat: function postformat(str) {\n    return str.replace(/\\d/g, function (match) {\n      return symbolMap$1[match];\n    });\n  },\n  // Hindi notation for meridiems are quite fuzzy in practice. While there exists\n  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\n  meridiemParse: /रात|सुबह|दोपहर|शाम/,\n\n  /**\n   * @param {?} hour\n   * @param {?} meridiem\n   * @return {?}\n   */\n  meridiemHour: function meridiemHour(hour, meridiem) {\n    if (hour === 12) {\n      hour = 0;\n    }\n\n    if (meridiem === 'रात') {\n      return hour < 4 ? hour : hour + 12;\n    } else if (meridiem === 'सुबह') {\n      return hour;\n    } else if (meridiem === 'दोपहर') {\n      return hour >= 10 ? hour : hour + 12;\n    } else if (meridiem === 'शाम') {\n      return hour + 12;\n    }\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 4) {\n      return 'रात';\n    } else if (hour < 10) {\n      return 'सुबह';\n    } else if (hour < 17) {\n      return 'दोपहर';\n    } else if (hour < 20) {\n      return 'शाम';\n    } else {\n      return 'रात';\n    }\n  },\n  week: {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Hungarian [hu]\n//! author : Adam Brunner : https://github.com/adambrunner\n\nvar\n/** @type {?} */\nweekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction translate$2(num, withoutSuffix, key, isFuture) {\n  switch (key) {\n    case 's':\n      return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';\n\n    case 'ss':\n      return num + (isFuture || withoutSuffix ? ' másodperc' : ' másodperce');\n\n    case 'm':\n      return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');\n\n    case 'mm':\n      return num + (isFuture || withoutSuffix ? ' perc' : ' perce');\n\n    case 'h':\n      return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');\n\n    case 'hh':\n      return num + (isFuture || withoutSuffix ? ' óra' : ' órája');\n\n    case 'd':\n      return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');\n\n    case 'dd':\n      return num + (isFuture || withoutSuffix ? ' nap' : ' napja');\n\n    case 'M':\n      return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n\n    case 'MM':\n      return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n\n    case 'y':\n      return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');\n\n    case 'yy':\n      return num + (isFuture || withoutSuffix ? ' év' : ' éve');\n  }\n\n  return '';\n}\n/**\n * @param {?} date\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction week(date, isFuture) {\n  return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[getDayOfWeek(date)] + '] LT[-kor]';\n}\n\nvar\n/** @type {?} */\nhuLocale = {\n  abbr: 'hu',\n  months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),\n  monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),\n  weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),\n  weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),\n  weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'YYYY.MM.DD.',\n    LL: 'YYYY. MMMM D.',\n    LLL: 'YYYY. MMMM D. H:mm',\n    LLLL: 'YYYY. MMMM D., dddd H:mm'\n  },\n  meridiemParse: /de|du/i,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return input.charAt(1).toLowerCase() === 'u';\n  },\n\n  /**\n   * @param {?} hours\n   * @param {?} minutes\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hours, minutes, isLower) {\n    if (hours < 12) {\n      return isLower === true ? 'de' : 'DE';\n    } else {\n      return isLower === true ? 'du' : 'DU';\n    }\n  },\n  calendar: {\n    sameDay: '[ma] LT[-kor]',\n    nextDay: '[holnap] LT[-kor]',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      return week(date, true);\n    },\n    lastDay: '[tegnap] LT[-kor]',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return week(date, false);\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s múlva',\n    past: '%s',\n    s: translate$2,\n    ss: translate$2,\n    m: translate$2,\n    mm: translate$2,\n    h: translate$2,\n    hh: translate$2,\n    d: translate$2,\n    dd: translate$2,\n    M: translate$2,\n    MM: translate$2,\n    y: translate$2,\n    yy: translate$2\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Indonesia [id]\n//! author : Romy Kusuma : https://github.com/rkusuma\n//! reference: https://github.com/moment/moment/blob/develop/locale/id.js\n\nvar\n/** @type {?} */\nidLocale = {\n  abbr: 'id',\n  months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),\n  monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),\n  weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),\n  weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),\n  weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),\n  longDateFormat: {\n    LT: 'HH.mm',\n    LTS: 'HH.mm.ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY [pukul] HH.mm',\n    LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n  },\n  meridiemParse: /pagi|siang|sore|malam/,\n\n  /**\n   * @param {?} hour\n   * @param {?} meridiem\n   * @return {?}\n   */\n  meridiemHour: function meridiemHour(hour, meridiem) {\n    if (hour === 12) {\n      hour = 0;\n    }\n\n    if (meridiem === 'pagi') {\n      return hour;\n    } else if (meridiem === 'siang') {\n      return hour >= 11 ? hour : hour + 12;\n    } else if (meridiem === 'sore' || meridiem === 'malam') {\n      return hour + 12;\n    }\n  },\n\n  /**\n   * @param {?} hours\n   * @param {?} minutes\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hours, minutes, isLower) {\n    if (hours < 11) {\n      return 'pagi';\n    } else if (hours < 15) {\n      return 'siang';\n    } else if (hours < 19) {\n      return 'sore';\n    } else {\n      return 'malam';\n    }\n  },\n  calendar: {\n    sameDay: '[Hari ini pukul] LT',\n    nextDay: '[Besok pukul] LT',\n    nextWeek: 'dddd [pukul] LT',\n    lastDay: '[Kemarin pukul] LT',\n    lastWeek: 'dddd [lalu pukul] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'dalam %s',\n    past: '%s yang lalu',\n    s: 'beberapa detik',\n    ss: '%d detik',\n    m: 'semenit',\n    mm: '%d menit',\n    h: 'sejam',\n    hh: '%d jam',\n    d: 'sehari',\n    dd: '%d hari',\n    M: 'sebulan',\n    MM: '%d bulan',\n    y: 'setahun',\n    yy: '%d tahun'\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Italian [it]\n//! author : Lorenzo : https://github.com/aliem\n//! author: Mattia Larentis: https://github.com/nostalgiaz\n\nvar\n/** @type {?} */\nitLocale = {\n  abbr: 'it',\n  months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),\n  monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),\n  weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),\n  weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),\n  weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Oggi alle] LT',\n    nextDay: '[Domani alle] LT',\n    nextWeek: 'dddd [alle] LT',\n    lastDay: '[Ieri alle] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[la scorsa] dddd [alle] LT';\n\n        default:\n          return '[lo scorso] dddd [alle] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    future: function future(num) {\n      return (/^[0-9].+$/.test(num.toString(10)) ? 'tra' : 'in') + ' ' + num;\n    },\n    past: '%s fa',\n    s: 'alcuni secondi',\n    ss: '%d secondi',\n    m: 'un minuto',\n    mm: '%d minuti',\n    h: 'un\\'ora',\n    hh: '%d ore',\n    d: 'un giorno',\n    dd: '%d giorni',\n    M: 'un mese',\n    MM: '%d mesi',\n    y: 'un anno',\n    yy: '%d anni'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Japanese [ja]\n//! author : LI Long : https://github.com/baryon\n\nvar\n/** @type {?} */\njaLocale = {\n  abbr: 'ja',\n  months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n  monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n  weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),\n  weekdaysShort: '日_月_火_水_木_金_土'.split('_'),\n  weekdaysMin: '日_月_火_水_木_金_土'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'YYYY/MM/DD',\n    LL: 'YYYY年M月D日',\n    LLL: 'YYYY年M月D日 HH:mm',\n    LLLL: 'YYYY年M月D日 HH:mm dddd',\n    l: 'YYYY/MM/DD',\n    ll: 'YYYY年M月D日',\n    lll: 'YYYY年M月D日 HH:mm',\n    llll: 'YYYY年M月D日 HH:mm dddd'\n  },\n  meridiemParse: /午前|午後/i,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return input === '午後';\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 12) {\n      return '午前';\n    } else {\n      return '午後';\n    }\n  },\n  calendar: {\n    sameDay: '[今日] LT',\n    nextDay: '[明日] LT',\n    nextWeek: '[来週]dddd LT',\n    lastDay: '[昨日] LT',\n    lastWeek: '[前週]dddd LT',\n    sameElse: 'L'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}日/,\n\n  /**\n   * @param {?} num\n   * @param {?} period\n   * @return {?}\n   */\n  ordinal: function ordinal(num, period) {\n    switch (period) {\n      case 'd':\n      case 'D':\n      case 'DDD':\n        return num + '日';\n\n      default:\n        return num.toString(10);\n    }\n  },\n  relativeTime: {\n    future: '%s後',\n    past: '%s前',\n    s: '数秒',\n    ss: '%d秒',\n    m: '1分',\n    mm: '%d分',\n    h: '1時間',\n    hh: '%d時間',\n    d: '1日',\n    dd: '%d日',\n    M: '1ヶ月',\n    MM: '%dヶ月',\n    y: '1年',\n    yy: '%d年'\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-shorthand\n//! moment.js locale configuration\n//! locale : Korean [ko]\n//! author : Kyungwook, Park : https://github.com/kyungw00k\n//! author : Jeeeyul Lee <jeeeyul@gmail.com>\n\nvar\n/** @type {?} */\nkoLocale = {\n  abbr: 'ko',\n  months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n  monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n  weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),\n  weekdaysShort: '일_월_화_수_목_금_토'.split('_'),\n  weekdaysMin: '일_월_화_수_목_금_토'.split('_'),\n  longDateFormat: {\n    LT: 'A h:mm',\n    LTS: 'A h:mm:ss',\n    L: 'YYYY.MM.DD',\n    LL: 'YYYY년 MMMM D일',\n    LLL: 'YYYY년 MMMM D일 A h:mm',\n    LLLL: 'YYYY년 MMMM D일 dddd A h:mm',\n    l: 'YYYY.MM.DD',\n    ll: 'YYYY년 MMMM D일',\n    lll: 'YYYY년 MMMM D일 A h:mm',\n    llll: 'YYYY년 MMMM D일 dddd A h:mm'\n  },\n  calendar: {\n    sameDay: '오늘 LT',\n    nextDay: '내일 LT',\n    nextWeek: 'dddd LT',\n    lastDay: '어제 LT',\n    lastWeek: '지난주 dddd LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s 후',\n    past: '%s 전',\n    s: '몇 초',\n    ss: '%d초',\n    m: '1분',\n    mm: '%d분',\n    h: '한 시간',\n    hh: '%d시간',\n    d: '하루',\n    dd: '%d일',\n    M: '한 달',\n    MM: '%d달',\n    y: '일 년',\n    yy: '%d년'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(일|월|주)/,\n  ordinal: function ordinal(num, period) {\n    switch (period) {\n      case 'd':\n      case 'D':\n      case 'DDD':\n        return num + '일';\n\n      case 'M':\n        return num + '월';\n\n      case 'w':\n      case 'W':\n        return num + '주';\n\n      default:\n        return num.toString(10);\n    }\n  },\n  meridiemParse: /오전|오후/,\n  isPM: function isPM(token) {\n    return token === '오후';\n  },\n  meridiem: function meridiem(hour, minute, isUpper) {\n    return hour < 12 ? '오전' : '오후';\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Lithuanian [lt]\n//! author : Stanislavas Guk : https://github.com/ixoster\n\nvar\n/** @type {?} */\nunits = {\n  ss: 'sekundė_sekundžių_sekundes',\n  m: 'minutė_minutės_minutę',\n  mm: 'minutės_minučių_minutes',\n  h: 'valanda_valandos_valandą',\n  hh: 'valandos_valandų_valandas',\n  d: 'diena_dienos_dieną',\n  dd: 'dienos_dienų_dienas',\n  M: 'mėnuo_mėnesio_mėnesį',\n  MM: 'mėnesiai_mėnesių_mėnesius',\n  y: 'metai_metų_metus',\n  yy: 'metai_metų_metus'\n};\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction translateSeconds(num, withoutSuffix, key, isFuture) {\n  if (withoutSuffix) {\n    return 'kelios sekundės';\n  } else {\n    return isFuture ? 'kelių sekundžių' : 'kelias sekundes';\n  }\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction translateSingular(num, withoutSuffix, key, isFuture) {\n  return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];\n}\n/**\n * @param {?} num\n * @return {?}\n */\n\n\nfunction special(num) {\n  return num % 10 === 0 || num > 10 && num < 20;\n}\n/**\n * @param {?} key\n * @return {?}\n */\n\n\nfunction forms(key) {\n  return units[key].split('_');\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction translate$3(num, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  result = num + ' ';\n\n  if (num === 1) {\n    return result + translateSingular(num, withoutSuffix, key[0], isFuture);\n  } else if (withoutSuffix) {\n    return result + (special(num) ? forms(key)[1] : forms(key)[0]);\n  } else {\n    if (isFuture) {\n      return result + forms(key)[1];\n    } else {\n      return result + (special(num) ? forms(key)[1] : forms(key)[2]);\n    }\n  }\n}\n\nvar\n/** @type {?} */\nltLocale = {\n  abbr: 'lt',\n  months: {\n    format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),\n    standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),\n    isFormat: /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s)+D[oD]?/\n  },\n  monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),\n  weekdays: {\n    format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),\n    standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),\n    isFormat: /dddd HH:mm/\n  },\n  weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),\n  weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'YYYY-MM-DD',\n    LL: 'YYYY [m.] MMMM D [d.]',\n    LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n    LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',\n    l: 'YYYY-MM-DD',\n    ll: 'YYYY [m.] MMMM D [d.]',\n    lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n    llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'\n  },\n  calendar: {\n    sameDay: '[Šiandien] LT',\n    nextDay: '[Rytoj] LT',\n    nextWeek: 'dddd LT',\n    lastDay: '[Vakar] LT',\n    lastWeek: '[Praėjusį] dddd LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'po %s',\n    past: 'prieš %s',\n    s: translateSeconds,\n    ss: translate$3,\n    m: translateSingular,\n    mm: translate$3,\n    h: translateSingular,\n    hh: translate$3,\n    d: translateSingular,\n    dd: translate$3,\n    M: translateSingular,\n    MM: translate$3,\n    y: translateSingular,\n    yy: translate$3\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}-oji/,\n\n  /**\n   * @param {?} num\n   * @return {?}\n   */\n  ordinal: function ordinal(num) {\n    return num + '-oji';\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-shorthand\n\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction translate$4(num, withoutSuffix, key, isFuture) {\n  switch (key) {\n    case 's':\n      return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';\n\n    case 'ss':\n      return num + (withoutSuffix ? ' секунд' : ' секундын');\n\n    case 'm':\n    case 'mm':\n      return num + (withoutSuffix ? ' минут' : ' минутын');\n\n    case 'h':\n    case 'hh':\n      return num + (withoutSuffix ? ' цаг' : ' цагийн');\n\n    case 'd':\n    case 'dd':\n      return num + (withoutSuffix ? ' өдөр' : ' өдрийн');\n\n    case 'M':\n    case 'MM':\n      return num + (withoutSuffix ? ' сар' : ' сарын');\n\n    case 'y':\n    case 'yy':\n      return num + (withoutSuffix ? ' жил' : ' жилийн');\n\n    default:\n      return num.toString(10);\n  }\n}\n\nvar\n/** @type {?} */\nmnLocale = {\n  abbr: 'mn',\n  months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),\n  monthsShort: '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),\n  weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),\n  weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'YYYY-MM-DD',\n    LL: 'YYYY оны MMMMын D',\n    LLL: 'YYYY оны MMMMын D HH:mm',\n    LLLL: 'dddd, YYYY оны MMMMын D HH:mm'\n  },\n  meridiemParse: /ҮӨ|ҮХ/i,\n  isPM: function isPM(input) {\n    return input === 'ҮХ';\n  },\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 12) {\n      return 'ҮӨ';\n    } else {\n      return 'ҮХ';\n    }\n  },\n  calendar: {\n    sameDay: '[Өнөөдөр] LT',\n    nextDay: '[Маргааш] LT',\n    nextWeek: '[Ирэх] dddd LT',\n    lastDay: '[Өчигдөр] LT',\n    lastWeek: '[Өнгөрсөн] dddd LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s дараа',\n    past: '%s өмнө',\n    s: translate$4,\n    ss: translate$4,\n    m: translate$4,\n    mm: translate$4,\n    h: translate$4,\n    hh: translate$4,\n    d: translate$4,\n    dd: translate$4,\n    M: translate$4,\n    MM: translate$4,\n    y: translate$4,\n    yy: translate$4\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2} өдөр/,\n  ordinal: function ordinal(num, period) {\n    switch (period) {\n      case 'd':\n      case 'D':\n      case 'DDD':\n        return num + ' өдөр';\n\n      default:\n        return num.toString(10);\n    }\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Norwegian Bokmål [nb]\n//! authors : Espen Hovlandsdal : https://github.com/rexxars\n//!           Sigurd Gartmann : https://github.com/sigurdga\n\nvar\n/** @type {?} */\nnbLocale = {\n  abbr: 'nb',\n  months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n  monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),\n  weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),\n  weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY [kl.] HH:mm',\n    LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'\n  },\n  calendar: {\n    sameDay: '[i dag kl.] LT',\n    nextDay: '[i morgen kl.] LT',\n    nextWeek: 'dddd [kl.] LT',\n    lastDay: '[i går kl.] LT',\n    lastWeek: '[forrige] dddd [kl.] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'om %s',\n    past: '%s siden',\n    s: 'noen sekunder',\n    ss: '%d sekunder',\n    m: 'ett minutt',\n    mm: '%d minutter',\n    h: 'en time',\n    hh: '%d timer',\n    d: 'en dag',\n    dd: '%d dager',\n    M: 'en måned',\n    MM: '%d måneder',\n    y: 'ett år',\n    yy: '%d år'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Dutch (Belgium) [nl-be]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\n\nvar\n/** @type {?} */\nmonthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');\nvar\n/** @type {?} */\nmonthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\nvar\n/** @type {?} */\nmonthsParse$4 = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\nvar\n/** @type {?} */\nmonthsRegex$4 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\nvar\n/** @type {?} */\nnlBeLocale = {\n  abbr: 'nl-be',\n  months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortWithDots;\n    } else if (/-MMM-/.test(format)) {\n      return monthsShortWithoutDots[getMonth(date, isUTC)];\n    } else {\n      return monthsShortWithDots[getMonth(date, isUTC)];\n    }\n  },\n  monthsRegex: monthsRegex$4,\n  monthsShortRegex: monthsRegex$4,\n  monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n  monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n  monthsParse: monthsParse$4,\n  longMonthsParse: monthsParse$4,\n  shortMonthsParse: monthsParse$4,\n  weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n  weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n  weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[vandaag om] LT',\n    nextDay: '[morgen om] LT',\n    nextWeek: 'dddd [om] LT',\n    lastDay: '[gisteren om] LT',\n    lastWeek: '[afgelopen] dddd [om] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'over %s',\n    past: '%s geleden',\n    s: 'een paar seconden',\n    ss: '%d seconden',\n    m: 'één minuut',\n    mm: '%d minuten',\n    h: 'één uur',\n    hh: '%d uur',\n    d: 'één dag',\n    dd: '%d dagen',\n    M: 'één maand',\n    MM: '%d maanden',\n    y: 'één jaar',\n    yy: '%d jaar'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n    return num + (num === 1 || num === 8 || num >= 20 ? 'ste' : 'de');\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Dutch [nl]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\n\nvar\n/** @type {?} */\nmonthsShortWithDots$1 = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),\n\n/** @type {?} */\nmonthsShortWithoutDots$1 = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\nvar\n/** @type {?} */\nmonthsParse$5 = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\nvar\n/** @type {?} */\nmonthsRegex$5 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\nvar\n/** @type {?} */\nnlLocale = {\n  abbr: 'nl',\n  months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  monthsShort: function monthsShort(date, format, isUTC) {\n    if (!date) {\n      return monthsShortWithDots$1;\n    } else if (/-MMM-/.test(format)) {\n      return monthsShortWithoutDots$1[getMonth(date, isUTC)];\n    } else {\n      return monthsShortWithDots$1[getMonth(date, isUTC)];\n    }\n  },\n  monthsRegex: monthsRegex$5,\n  monthsShortRegex: monthsRegex$5,\n  monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n  monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n  monthsParse: monthsParse$5,\n  longMonthsParse: monthsParse$5,\n  shortMonthsParse: monthsParse$5,\n  weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n  weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n  weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD-MM-YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[vandaag om] LT',\n    nextDay: '[morgen om] LT',\n    nextWeek: 'dddd [om] LT',\n    lastDay: '[gisteren om] LT',\n    lastWeek: '[afgelopen] dddd [om] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'over %s',\n    past: '%s geleden',\n    s: 'een paar seconden',\n    ss: '%d seconden',\n    m: 'één minuut',\n    mm: '%d minuten',\n    h: 'één uur',\n    hh: '%d uur',\n    d: 'één dag',\n    dd: '%d dagen',\n    M: 'één maand',\n    MM: '%d maanden',\n    y: 'één jaar',\n    yy: '%d jaar'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n    return num + (num === 1 || num === 8 || num >= 20 ? 'ste' : 'de');\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Polish [pl]\n//! author : Rafal Hirsz : https://github.com/evoL\n\nvar\n/** @type {?} */\nmonthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');\nvar\n/** @type {?} */\nmonthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\n\nfunction plural$1(num) {\n  return num % 10 < 5 && num % 10 > 1 && ~~(num / 10) % 10 !== 1;\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\n\n\nfunction translate$5(num, withoutSuffix, key) {\n  var\n  /** @type {?} */\n  result = num + ' ';\n\n  switch (key) {\n    case 'ss':\n      return result + (plural$1(num) ? 'sekundy' : 'sekund');\n\n    case 'm':\n      return withoutSuffix ? 'minuta' : 'minutę';\n\n    case 'mm':\n      return result + (plural$1(num) ? 'minuty' : 'minut');\n\n    case 'h':\n      return withoutSuffix ? 'godzina' : 'godzinę';\n\n    case 'hh':\n      return result + (plural$1(num) ? 'godziny' : 'godzin');\n\n    case 'MM':\n      return result + (plural$1(num) ? 'miesiące' : 'miesięcy');\n\n    case 'yy':\n      return result + (plural$1(num) ? 'lata' : 'lat');\n  }\n}\n\nvar\n/** @type {?} */\nplLocale = {\n  abbr: 'pl',\n\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?=} isUTC\n   * @return {?}\n   */\n  months: function months(date, format, isUTC) {\n    if (!date) {\n      return monthsNominative;\n    } else if (format === '') {\n      // Hack: if format empty we know this is used to generate\n      // RegExp by moment. Give then back both valid forms of months\n      // in RegExp ready format.\n      return '(' + monthsSubjective[getMonth(date, isUTC)] + '|' + monthsNominative[getMonth(date, isUTC)] + ')';\n    } else if (/D MMMM/.test(format)) {\n      return monthsSubjective[getMonth(date, isUTC)];\n    } else {\n      return monthsNominative[getMonth(date, isUTC)];\n    }\n  },\n  monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),\n  weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),\n  weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),\n  weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Dziś o] LT',\n    nextDay: '[Jutro o] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[W niedzielę o] LT';\n\n        case 2:\n          return '[We wtorek o] LT';\n\n        case 3:\n          return '[W środę o] LT';\n\n        case 5:\n          return '[W piątek o] LT';\n\n        case 6:\n          return '[W sobotę o] LT';\n\n        default:\n          return '[W] dddd [o] LT';\n      }\n    },\n    lastDay: '[Wczoraj o] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[W zeszłą niedzielę o] LT';\n\n        case 3:\n          return '[W zeszłą środę o] LT';\n\n        case 4:\n          return '[W zeszłą czwartek o] LT';\n\n        case 5:\n          return '[W zeszłą piątek o] LT';\n\n        case 6:\n          return '[W zeszłą sobotę o] LT';\n\n        default:\n          return '[W zeszły] dddd [o] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'za %s',\n    past: '%s temu',\n    s: 'kilka sekund',\n    ss: translate$5,\n    m: translate$5,\n    mm: translate$5,\n    h: translate$5,\n    hh: translate$5,\n    d: '1 dzień',\n    dd: '%d dni',\n    M: 'miesiąc',\n    MM: translate$5,\n    y: 'rok',\n    yy: translate$5\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Portuguese (Brazil) [pt-br]\n//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira\n\nvar\n/** @type {?} */\nptBrLocale = {\n  abbr: 'pt-br',\n  months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),\n  monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),\n  weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),\n  weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),\n  weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D [de] MMMM [de] YYYY',\n    LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',\n    LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'\n  },\n  calendar: {\n    sameDay: '[Hoje às] LT',\n    nextDay: '[Amanhã às] LT',\n    nextWeek: 'dddd [às] LT',\n    lastDay: '[Ontem às] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      return getDayOfWeek(date) === 0 || getDayOfWeek(date) === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday\n      '[Última] dddd [às] LT'; // Monday - Friday\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'em %s',\n    past: '%s atrás',\n    s: 'poucos segundos',\n    ss: '%d segundos',\n    m: 'um minuto',\n    mm: '%d minutos',\n    h: 'uma hora',\n    hh: '%d horas',\n    d: 'um dia',\n    dd: '%d dias',\n    M: 'um mês',\n    MM: '%d meses',\n    y: 'um ano',\n    yy: '%d anos'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}º/,\n  ordinal: '%dº'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\n\nfunction relativeTimeWithPlural(num, withoutSuffix, key) {\n  var\n  /** @type {?} */\n  format = {\n    ss: 'secunde',\n    mm: 'minute',\n    hh: 'ore',\n    dd: 'zile',\n    MM: 'luni',\n    yy: 'ani'\n  };\n  var\n  /** @type {?} */\n  separator = ' ';\n\n  if (num % 100 >= 20 || num >= 100 && num % 100 === 0) {\n    separator = ' de ';\n  }\n\n  return num + separator + format[key];\n}\n\nvar\n/** @type {?} */\nroLocale = {\n  abbr: 'ro',\n  months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),\n  monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),\n  weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),\n  weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY H:mm',\n    LLLL: 'dddd, D MMMM YYYY H:mm'\n  },\n  calendar: {\n    sameDay: '[azi la] LT',\n    nextDay: '[mâine la] LT',\n    nextWeek: 'dddd [la] LT',\n    lastDay: '[ieri la] LT',\n    lastWeek: '[fosta] dddd [la] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'peste %s',\n    past: '%s în urmă',\n    s: 'câteva secunde',\n    ss: relativeTimeWithPlural,\n    m: 'un minut',\n    mm: relativeTimeWithPlural,\n    h: 'o oră',\n    hh: relativeTimeWithPlural,\n    d: 'o zi',\n    dd: relativeTimeWithPlural,\n    M: 'o lună',\n    MM: relativeTimeWithPlural,\n    y: 'un an',\n    yy: relativeTimeWithPlural\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} word\n * @param {?} num\n * @return {?}\n */\n\nfunction plural$2(word, num) {\n  var\n  /** @type {?} */\n  forms = word.split('_');\n  return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\n\n\nfunction relativeTimeWithPlural$1(num, withoutSuffix, key) {\n  var\n  /** @type {?} */\n  format = {\n    ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',\n    mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n    hh: 'час_часа_часов',\n    dd: 'день_дня_дней',\n    MM: 'месяц_месяца_месяцев',\n    yy: 'год_года_лет'\n  };\n\n  if (key === 'm') {\n    return withoutSuffix ? 'минута' : 'минуту';\n  }\n\n  return num + ' ' + plural$2(format[key], +num);\n}\n\nvar\n/** @type {?} */\nmonthsParse$6 = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; // http://new.gramota.ru/spravka/rules/139-prop : § 103\n// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\n\nvar\n/** @type {?} */\nruLocale = {\n  abbr: 'ru',\n  months: {\n    format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n    standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n  },\n  monthsShort: {\n    // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку ?\n    format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n    standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n  },\n  weekdays: {\n    standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n    format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n    isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n  },\n  weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n  weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n  monthsParse: monthsParse$6,\n  longMonthsParse: monthsParse$6,\n  shortMonthsParse: monthsParse$6,\n  // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n  monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n  // копия предыдущего\n  monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n  // полные названия с падежами\n  monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n  // Выражение, которое соотвествует только сокращённым формам\n  monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY г.',\n    LLL: 'D MMMM YYYY г., H:mm',\n    LLLL: 'dddd, D MMMM YYYY г., H:mm'\n  },\n  calendar: {\n    sameDay: '[Сегодня в] LT',\n    nextDay: '[Завтра в] LT',\n    lastDay: '[Вчера в] LT',\n\n    /**\n     * @param {?} date\n     * @param {?} now\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date, now) {\n      if (getWeek(now) !== getWeek(date)) {\n        switch (getDayOfWeek(date)) {\n          case 0:\n            return '[В следующее] dddd [в] LT';\n\n          case 1:\n          case 2:\n          case 4:\n            return '[В следующий] dddd [в] LT';\n\n          case 3:\n          case 5:\n          case 6:\n            return '[В следующую] dddd [в] LT';\n        }\n      } else {\n        if (getDayOfWeek(date) === 2) {\n          return '[Во] dddd [в] LT';\n        } else {\n          return '[В] dddd [в] LT';\n        }\n      }\n    },\n\n    /**\n     * @param {?} date\n     * @param {?} now\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date, now) {\n      if (getWeek(now) !== getWeek(date)) {\n        switch (getDayOfWeek(date)) {\n          case 0:\n            return '[В прошлое] dddd [в] LT';\n\n          case 1:\n          case 2:\n          case 4:\n            return '[В прошлый] dddd [в] LT';\n\n          case 3:\n          case 5:\n          case 6:\n            return '[В прошлую] dddd [в] LT';\n        }\n      } else {\n        if (getDayOfWeek(date) === 2) {\n          return '[Во] dddd [в] LT';\n        } else {\n          return '[В] dddd [в] LT';\n        }\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'через %s',\n    past: '%s назад',\n    s: 'несколько секунд',\n    ss: relativeTimeWithPlural$1,\n    m: relativeTimeWithPlural$1,\n    mm: relativeTimeWithPlural$1,\n    h: 'час',\n    hh: relativeTimeWithPlural$1,\n    d: 'день',\n    dd: relativeTimeWithPlural$1,\n    M: 'месяц',\n    MM: relativeTimeWithPlural$1,\n    y: 'год',\n    yy: relativeTimeWithPlural$1\n  },\n  meridiemParse: /ночи|утра|дня|вечера/i,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return /^(дня|вечера)$/.test(input);\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 4) {\n      return 'ночи';\n    } else if (hour < 12) {\n      return 'утра';\n    } else if (hour < 17) {\n      return 'дня';\n    } else {\n      return 'вечера';\n    }\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n\n  /**\n   * @param {?} _num\n   * @param {?} period\n   * @return {?}\n   */\n  ordinal: function ordinal(_num, period) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n\n    switch (period) {\n      case 'M':\n      case 'd':\n      case 'DDD':\n        return num + '-й';\n\n      case 'D':\n        return num + '-го';\n\n      case 'w':\n      case 'W':\n        return num + '-я';\n\n      default:\n        return num.toString(10);\n    }\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Slovak [sk]\n//! author : Jozef Pažin : https://github.com/atiris\n\nvar\n/** @type {?} */\nmonths$2 = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');\nvar\n/** @type {?} */\nmonthsShort$6 = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\n\nfunction plural$3(num) {\n  return num > 1 && num < 5 && ~~(num / 10) !== 1;\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\n\nfunction translate$6(num, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  result = num + ' ';\n\n  switch (key) {\n    case 's':\n      // a few seconds / in a few seconds / a few seconds ago\n      return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';\n\n    case 'ss':\n      // 9 seconds / in 9 seconds / 9 seconds ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'sekundy' : 'sekúnd');\n      } else {\n        return result + 'sekundami';\n      }\n\n    // break;\n\n    case 'm':\n      // a minute / in a minute / a minute ago\n      return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';\n\n    case 'mm':\n      // 9 minutes / in 9 minutes / 9 minutes ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'minúty' : 'minút');\n      } else {\n        return result + 'minútami';\n      }\n\n    // break;\n\n    case 'h':\n      // an hour / in an hour / an hour ago\n      return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';\n\n    case 'hh':\n      // 9 hours / in 9 hours / 9 hours ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'hodiny' : 'hodín');\n      } else {\n        return result + 'hodinami';\n      }\n\n    // break;\n\n    case 'd':\n      // a day / in a day / a day ago\n      return withoutSuffix || isFuture ? 'deň' : 'dňom';\n\n    case 'dd':\n      // 9 days / in 9 days / 9 days ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'dni' : 'dní');\n      } else {\n        return result + 'dňami';\n      }\n\n    // break;\n\n    case 'M':\n      // a month / in a month / a month ago\n      return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';\n\n    case 'MM':\n      // 9 months / in 9 months / 9 months ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'mesiace' : 'mesiacov');\n      } else {\n        return result + 'mesiacmi';\n      }\n\n    // break;\n\n    case 'y':\n      // a year / in a year / a year ago\n      return withoutSuffix || isFuture ? 'rok' : 'rokom';\n\n    case 'yy':\n      // 9 years / in 9 years / 9 years ago\n      if (withoutSuffix || isFuture) {\n        return result + (plural$3(num) ? 'roky' : 'rokov');\n      } else {\n        return result + 'rokmi';\n      }\n\n  }\n}\n\nvar\n/** @type {?} */\nskLocale = {\n  abbr: 'sk',\n  months: months$2,\n  monthsShort: monthsShort$6,\n  weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),\n  weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),\n  weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY H:mm',\n    LLLL: 'dddd D. MMMM YYYY H:mm',\n    l: 'D. M. YYYY'\n  },\n  calendar: {\n    sameDay: '[dnes o] LT',\n    nextDay: '[zajtra o] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[v nedeľu o] LT';\n\n        case 1:\n        case 2:\n          return '[v] dddd [o] LT';\n\n        case 3:\n          return '[v stredu o] LT';\n\n        case 4:\n          return '[vo štvrtok o] LT';\n\n        case 5:\n          return '[v piatok o] LT';\n\n        case 6:\n          return '[v sobotu o] LT';\n      }\n    },\n    lastDay: '[včera o] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[minulú nedeľu o] LT';\n\n        case 1:\n        case 2:\n          return '[minulý] dddd [o] LT';\n\n        case 3:\n          return '[minulú stredu o] LT';\n\n        case 4:\n        case 5:\n          return '[minulý] dddd [o] LT';\n\n        case 6:\n          return '[minulú sobotu o] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'o %s',\n    past: 'pred %s',\n    s: translate$6,\n    ss: translate$6,\n    m: translate$6,\n    mm: translate$6,\n    h: translate$6,\n    hh: translate$6,\n    d: translate$6,\n    dd: translate$6,\n    M: translate$6,\n    MM: translate$6,\n    y: translate$6,\n    yy: translate$6\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} number\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\n\nfunction processRelativeTime$1(number, withoutSuffix, key, isFuture) {\n  var\n  /** @type {?} */\n  result = number + ' ';\n\n  switch (key) {\n    case 's':\n      return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';\n\n    case 'ss':\n      if (number === 1) {\n        result += withoutSuffix ? 'sekundo' : 'sekundi';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';\n      } else if (number < 5) {\n        result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';\n      } else {\n        result += withoutSuffix || isFuture ? 'sekund' : 'sekund';\n      }\n\n      return result;\n\n    case 'm':\n      return withoutSuffix ? 'ena minuta' : 'eno minuto';\n\n    case 'mm':\n      if (number === 1) {\n        result += withoutSuffix ? 'minuta' : 'minuto';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'minuti' : 'minutama';\n      } else if (number < 5) {\n        result += withoutSuffix || isFuture ? 'minute' : 'minutami';\n      } else {\n        result += withoutSuffix || isFuture ? 'minut' : 'minutami';\n      }\n\n      return result;\n\n    case 'h':\n      return withoutSuffix ? 'ena ura' : 'eno uro';\n\n    case 'hh':\n      if (number === 1) {\n        result += withoutSuffix ? 'ura' : 'uro';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'uri' : 'urama';\n      } else if (number < 5) {\n        result += withoutSuffix || isFuture ? 'ure' : 'urami';\n      } else {\n        result += withoutSuffix || isFuture ? 'ur' : 'urami';\n      }\n\n      return result;\n\n    case 'd':\n      return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';\n\n    case 'dd':\n      if (number === 1) {\n        result += withoutSuffix || isFuture ? 'dan' : 'dnem';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';\n      } else {\n        result += withoutSuffix || isFuture ? 'dni' : 'dnevi';\n      }\n\n      return result;\n\n    case 'M':\n      return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';\n\n    case 'MM':\n      if (number === 1) {\n        result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';\n      } else if (number < 5) {\n        result += withoutSuffix || isFuture ? 'mesece' : 'meseci';\n      } else {\n        result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';\n      }\n\n      return result;\n\n    case 'y':\n      return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';\n\n    case 'yy':\n      if (number === 1) {\n        result += withoutSuffix || isFuture ? 'leto' : 'letom';\n      } else if (number === 2) {\n        result += withoutSuffix || isFuture ? 'leti' : 'letoma';\n      } else if (number < 5) {\n        result += withoutSuffix || isFuture ? 'leta' : 'leti';\n      } else {\n        result += withoutSuffix || isFuture ? 'let' : 'leti';\n      }\n\n      return result;\n  }\n}\n\nvar\n/** @type {?} */\nslLocale = {\n  abbr: 'sl',\n  months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),\n  monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),\n  weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),\n  weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D. MMMM YYYY',\n    LLL: 'D. MMMM YYYY H:mm',\n    LLLL: 'dddd, D. MMMM YYYY H:mm'\n  },\n  calendar: {\n    sameDay: '[danes ob] LT',\n    nextDay: '[jutri ob] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    nextWeek: function nextWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[v] [nedeljo] [ob] LT';\n\n        case 3:\n          return '[v] [sredo] [ob] LT';\n\n        case 6:\n          return '[v] [soboto] [ob] LT';\n\n        case 1:\n        case 2:\n        case 4:\n        case 5:\n          return '[v] dddd [ob] LT';\n      }\n    },\n    lastDay: '[včeraj ob] LT',\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    lastWeek: function lastWeek(date) {\n      switch (getDayOfWeek(date)) {\n        case 0:\n          return '[prejšnjo] [nedeljo] [ob] LT';\n\n        case 3:\n          return '[prejšnjo] [sredo] [ob] LT';\n\n        case 6:\n          return '[prejšnjo] [soboto] [ob] LT';\n\n        case 1:\n        case 2:\n        case 4:\n        case 5:\n          return '[prejšnji] dddd [ob] LT';\n      }\n    },\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'čez %s',\n    past: 'pred %s',\n    s: processRelativeTime$1,\n    ss: processRelativeTime$1,\n    m: processRelativeTime$1,\n    mm: processRelativeTime$1,\n    h: processRelativeTime$1,\n    hh: processRelativeTime$1,\n    d: processRelativeTime$1,\n    dd: processRelativeTime$1,\n    M: processRelativeTime$1,\n    MM: processRelativeTime$1,\n    y: processRelativeTime$1,\n    yy: processRelativeTime$1\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal: '%d.',\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Swedish [sv]\n//! author : Jens Alm : https://github.com/ulmus\n\nvar\n/** @type {?} */\nsvLocale = {\n  abbr: 'sv',\n  months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),\n  monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),\n  weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),\n  weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),\n  weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'YYYY-MM-DD',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY [kl.] HH:mm',\n    LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',\n    lll: 'D MMM YYYY HH:mm',\n    llll: 'ddd D MMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Idag] LT',\n    nextDay: '[Imorgon] LT',\n    lastDay: '[Igår] LT',\n    nextWeek: '[På] dddd LT',\n    lastWeek: '[I] dddd[s] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'om %s',\n    past: 'för %s sedan',\n    s: 'några sekunder',\n    ss: '%d sekunder',\n    m: 'en minut',\n    mm: '%d minuter',\n    h: 'en timme',\n    hh: '%d timmar',\n    d: 'en dag',\n    dd: '%d dagar',\n    M: 'en månad',\n    MM: '%d månader',\n    y: 'ett år',\n    yy: '%d år'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(e|a)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n    var\n    /** @type {?} */\n    b = num % 10,\n\n    /** @type {?} */\n    output = ~~(num % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';\n    return num + output;\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n\nvar\n/** @type {?} */\nthLocale = {\n  abbr: 'th',\n  months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),\n  monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),\n  weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),\n  // yes, three characters difference\n  weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'H:mm',\n    LTS: 'H:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY เวลา H:mm',\n    LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'\n  },\n  meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,\n\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  isPM: function isPM(input) {\n    return input === 'หลังเที่ยง';\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 12) {\n      return 'ก่อนเที่ยง';\n    } else {\n      return 'หลังเที่ยง';\n    }\n  },\n  calendar: {\n    sameDay: '[วันนี้ เวลา] LT',\n    nextDay: '[พรุ่งนี้ เวลา] LT',\n    nextWeek: 'dddd[หน้า เวลา] LT',\n    lastDay: '[เมื่อวานนี้ เวลา] LT',\n    lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'อีก %s',\n    past: '%sที่แล้ว',\n    s: 'ไม่กี่วินาที',\n    ss: '%d วินาที',\n    m: '1 นาที',\n    mm: '%d นาที',\n    h: '1 ชั่วโมง',\n    hh: '%d ชั่วโมง',\n    d: '1 วัน',\n    dd: '%d วัน',\n    M: '1 เดือน',\n    MM: '%d เดือน',\n    y: '1 ปี',\n    yy: '%d ปี'\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Turkish [tr]\n//! authors : Erhan Gundogan : https://github.com/erhangundogan,\n//!           Burak Yiğit Kaya: https://github.com/BYK\n\nvar\n/** @type {?} */\nsuffixes = {\n  1: '\\'inci',\n  5: '\\'inci',\n  8: '\\'inci',\n  70: '\\'inci',\n  80: '\\'inci',\n  2: '\\'nci',\n  7: '\\'nci',\n  20: '\\'nci',\n  50: '\\'nci',\n  3: '\\'üncü',\n  4: '\\'üncü',\n  100: '\\'üncü',\n  6: '\\'ncı',\n  9: '\\'uncu',\n  10: '\\'uncu',\n  30: '\\'uncu',\n  60: '\\'ıncı',\n  90: '\\'ıncı'\n};\nvar\n/** @type {?} */\ntrLocale = {\n  abbr: 'tr',\n  months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),\n  monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),\n  weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),\n  weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),\n  weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[bugün saat] LT',\n    nextDay: '[yarın saat] LT',\n    nextWeek: '[gelecek] dddd [saat] LT',\n    lastDay: '[dün] LT',\n    lastWeek: '[geçen] dddd [saat] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: '%s sonra',\n    past: '%s önce',\n    s: 'birkaç saniye',\n    ss: '%d saniye',\n    m: 'bir dakika',\n    mm: '%d dakika',\n    h: 'bir saat',\n    hh: '%d saat',\n    d: 'bir gün',\n    dd: '%d gün',\n    M: 'bir ay',\n    MM: '%d ay',\n    y: 'bir yıl',\n    yy: '%d yıl'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,\n\n  /**\n   * @param {?} _num\n   * @return {?}\n   */\n  ordinal: function ordinal(_num) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n\n    if (num === 0) {\n      // special case for zero\n      return num + '\\'ıncı';\n    }\n\n    var\n    /** @type {?} */\n    a = num % 10,\n\n    /** @type {?} */\n    b = num % 100 - a,\n\n    /** @type {?} */\n    c = num >= 100 ? 100 : null;\n    return num + (suffixes[a] || suffixes[b] || suffixes[c]);\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Chinese (China) [zh-cn]\n//! author : suupic : https://github.com/suupic\n//! author : Zeno Zeng : https://github.com/zenozeng\n\nvar\n/** @type {?} */\nzhCnLocale = {\n  abbr: 'zh-cn',\n  months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n  monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n  weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n  weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),\n  weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'YYYY/MM/DD',\n    LL: 'YYYY年M月D日',\n    LLL: 'YYYY年M月D日Ah点mm分',\n    LLLL: 'YYYY年M月D日ddddAh点mm分',\n    l: 'YYYY/M/D',\n    ll: 'YYYY年M月D日',\n    lll: 'YYYY年M月D日 HH:mm',\n    llll: 'YYYY年M月D日dddd HH:mm'\n  },\n  meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n\n  /**\n   * @param {?} hour\n   * @param {?} meridiem\n   * @return {?}\n   */\n  meridiemHour: function meridiemHour(hour, meridiem) {\n    if (hour === 12) {\n      hour = 0;\n    }\n\n    if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {\n      return hour;\n    } else if (meridiem === '下午' || meridiem === '晚上') {\n      return hour + 12;\n    } else {\n      // '中午'\n      return hour >= 11 ? hour : hour + 12;\n    }\n  },\n\n  /**\n   * @param {?} hour\n   * @param {?} minute\n   * @param {?} isLower\n   * @return {?}\n   */\n  meridiem: function meridiem(hour, minute, isLower) {\n    var\n    /** @type {?} */\n    hm = hour * 100 + minute;\n\n    if (hm < 600) {\n      return '凌晨';\n    } else if (hm < 900) {\n      return '早上';\n    } else if (hm < 1130) {\n      return '上午';\n    } else if (hm < 1230) {\n      return '中午';\n    } else if (hm < 1800) {\n      return '下午';\n    } else {\n      return '晚上';\n    }\n  },\n  calendar: {\n    sameDay: '[今天]LT',\n    nextDay: '[明天]LT',\n    nextWeek: '[下]ddddLT',\n    lastDay: '[昨天]LT',\n    lastWeek: '[上]ddddLT',\n    sameElse: 'L'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(日|月|周)/,\n\n  /**\n   * @param {?} _num\n   * @param {?} period\n   * @return {?}\n   */\n  ordinal: function ordinal(_num, period) {\n    var\n    /** @type {?} */\n    num = Number(_num);\n\n    switch (period) {\n      case 'd':\n      case 'D':\n      case 'DDD':\n        return num + '日';\n\n      case 'M':\n        return num + '月';\n\n      case 'w':\n      case 'W':\n        return num + '周';\n\n      default:\n        return num.toString();\n    }\n  },\n  relativeTime: {\n    future: '%s内',\n    past: '%s前',\n    s: '几秒',\n    ss: '%d 秒',\n    m: '1 分钟',\n    mm: '%d 分钟',\n    h: '1 小时',\n    hh: '%d 小时',\n    d: '1 天',\n    dd: '%d 天',\n    M: '1 个月',\n    MM: '%d 个月',\n    y: '1 年',\n    yy: '%d 年'\n  },\n  week: {\n    // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { add, subtract, getDay, isFirstDayOfWeek, isSameYear, isSameDay, isSameMonth, getFullYear, getFirstDayOfMonth, getMonth, parseDate, formatDate, listLocales, getLocale, updateLocale, defineLocale, getSetGlobalLocale, isAfter, isBefore, isDisabledDay, isSame, isArray, isDateValid, isDate, shiftDate, setFullDate, endOf, startOf, arLocale, bgLocale, caLocale, csLocale, daLocale, deLocale, enGbLocale, esDoLocale, esLocale, esUsLocale, fiLocale, frLocale, glLocale, heLocale, hiLocale, huLocale, idLocale, itLocale, jaLocale, koLocale, ltLocale, mnLocale, nbLocale, nlBeLocale, nlLocale, plLocale, ptBrLocale, roLocale, ruLocale, skLocale, slLocale, svLocale, thLocale, trLocale, zhCnLocale, createDate as ɵa }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"sources":["/home/ubuntu/job_board_fnd/node_modules/ngx-bootstrap/__ivy_ngcc__/chronos/fesm2015/ngx-bootstrap-chronos.js"],"names":["mod","n","x","absFloor","num","Math","ceil","floor","isString","str","isDate","value","Date","Object","prototype","toString","call","isDateValid","date","getTime","isNaN","isFunction","fn","Function","isNumber","isArray","input","Array","hasOwnProp","a","b","hasOwnProperty","isObject","isObjectEmpty","obj","getOwnPropertyNames","length","k","isUndefined","toInt","argumentForCoercion","coercedNumber","isFinite","aliases","_mapUnits","hour","minute","second","millisecond","addUnitAlias","unit","shorthand","lowerCase","toLowerCase","_unit","normalizeUnits","units","undefined","normalizeObjectUnits","inputObject","normalizedInput","normalizedProp","prop","YEAR","MONTH","DATE","HOUR","MINUTE","SECOND","MILLISECOND","WEEK","WEEKDAY","zeroFill","targetLength","forceSign","absNumber","abs","zerosToFill","sign","_sign","_zeros","pow","max","substr","formatFunctions","formatTokenFunctions","formattingTokens","addFormatToken","token","padded","ordinal","callback","apply","arguments","opts","locale","makeFormatFunction","format","array","match","formatArr","i","removeFormattingTokens","isUTC","offset","output","j","replace","createUTCDate","y","m","d","UTC","getUTCFullYear","setUTCFullYear","createDate","h","M","s","ms","getFullYear","setFullYear","getHours","getUTCHours","getMinutes","getUTCMinutes","getSeconds","getUTCSeconds","getMilliseconds","getUTCMilliseconds","getDay","getUTCDay","getDate","getUTCDate","getMonth","getUTCMonth","unix","valueOf","getFirstDayOfMonth","isFirstDayOfWeek","firstDayOfWeek","isSameMonth","date1","date2","isSameYear","isSameDay","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchShortOffset","matchTimestamp","matchWord","regexes","addRegexToken","regex","strictRegex","isStrict","getParseRegexForToken","_strict","RegExp","unescapeFormat","regexEscape","matched","p1","p2","p3","p4","tokens","addParseToken","_token","func","config","addWeekParseToken","_w","addTimeToArrayFromToken","_a","initDayOfMonth","_dayOfMonthOrdinalParse","_ordinalParse","defaultParsingFlags","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","meridiem","rfc2822","weekdayMismatch","getParsingFlags","_pf","getYear","initYear","parseTwoDigitYear","parseInt","daysInYear","year","isLeapYear","daysInMonth$1","month","NaN","modMonth","_year","initMonth","monthsShort","months","monthsShortRegex","monthsRegex","_locale","monthsParse","defaultTimeUnit","day","seconds","shiftDate","assign","min","setFullDate","getNum","milliseconds","def","setMonth","dayOfMonth","setUTCMonth","setHours","setUTCHours","setMinutes","setUTCMinutes","setSeconds","setUTCSeconds","setMilliseconds","setUTCMilliseconds","setDate","setUTCDate","setTime","cloneDate","startOf","_date","setLocaleDayOfWeek","setISODayOfWeek","endOf","start","_step","add","res","subtract","initDayOfYear","getDayOfYear","_dayOfYear","someDate","oneDay","round","firstWeekOffset","dow","doy","fwd","fwdlw","dayOfYearFromWeeks","week","weekday","localWeekday","weekOffset","dayOfYear","resYear","resDayOfYear","weekOfYear","resWeek","weeksInYear","weekOffsetNext","MONTHS_IN_FORMAT","defaultLocaleMonths","split","defaultLocaleMonthsShort","defaultLocaleWeekdays","defaultLocaleWeekdaysShort","defaultLocaleWeekdaysMin","defaultLongDateFormat","LTS","LT","L","LL","LLL","LLLL","defaultOrdinal","defaultDayOfMonthOrdinalParse","defaultMonthsShortRegex","defaultMonthsRegex","Locale","set","confKey","key","_config","now","_calendar","_longDateFormat","formatUpper","toUpperCase","val","slice","_invalidDate","_ordinal","withoutSuffix","isFuture","_relativeTime","diff","_months","standalone","isFormat","test","_monthsShort","monthName","strict","_monthsParseExact","handleMonthStrictParse","_monthsParse","_longMonthsParse","_shortMonthsParse","_shortMonths","computeMonthsParse","_monthsStrictRegex","_monthsRegex","_monthsShortStrictRegex","_monthsShortRegex","_week","_weekdays","_key","_weekdaysMin","_weekdaysShort","weekdayName","_weekdaysParseExact","handleWeekStrictParse","_weekdaysParse","_minWeekdaysParse","_shortWeekdaysParse","_fullWeekdaysParse","setDayOfWeek","weekdays","weekdaysShort","weekdaysMin","computeWeekdaysParse","_weekdaysStrictRegex","_weekdaysRegex","_weekdaysShortStrictRegex","_weekdaysShortRegex","_weekdaysMinStrictRegex","_weekdaysMinRegex","charAt","hours","minutes","isLower","llc","toLocaleLowerCase","ii","mom","indexOf","shortPieces","longPieces","mixedPieces","push","sort","cmpLenRev","join","minPieces","minp","shortp","longp","defaultCalendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","defaultInvalidDate","defaultLocaleWeek","defaultLocaleMeridiemParse","defaultRelativeTime","future","past","ss","mm","hh","dd","MM","yy","baseConfig","calendar","longDateFormat","invalidDate","dayOfMonthOrdinalParse","relativeTime","meridiemParse","compareArrays","array1","array2","dontConvert","len","lengthDiff","diffs","initWeek","getWeek","getISOWeek","getLocale","initWeekYear","getWeekYear","getISOWeekYear","addWeekYearFormatToken","_getWeekYearFormatCb","_getISOWeekYearFormatCb","getter","firstDayOfYear","initTimezone","initTimestamp","_d","parseFloat","initSecond","initQuarter","getQuarter","addOffsetFormatToken","separator","getUTCOffset","_isUTC","_offset","initOffset","_useUTC","_tzm","offsetFromString","chunkOffset","matcher","matches","chunk","parts","_min","cloneWithOffset","offsetDiff","getDateOffset","getTimezoneOffset","initMinute","initMillisecond","parseMs","initHour","hFormat","kFormat","_h","_mm","_ss","_H","lowercase","matchMeridiem","_meridiemParse","kInput","_isPm","isPM","_meridiem","bigHour","pos","pos1","pos2","locales","localeFamilies","globalLocale","normalizeLocale","chooseLocale","names","next","loadLocale","mergeConfigs","parentConfig","childConfig","childProp","parentProp","name","console","error","getSetGlobalLocale","values","data","defineLocale","_abbr","abbr","parentLocale","forEach","updateLocale","tmpLocale","setDefaultLocale","listLocales","keys","initDayOfWeek","ordering","ɵ0","mem","order","orderingHash","reduce","isDurationValid","duration","durationKeys","some","unitHasDecimal","absCeil","number","bubble","dur","_milliseconds","days","_days","_data","monthsToDays","monthsFromDays","daysToMonths","years","thresholds","substituteTimeAgo","posNegDuration","createDuration","as","Duration","quarters","quarter","weeks","_isValid","withSuffix","isValid","localeData","pastFuture","postformat","localeKey","mathAbs","_units","Error","isDuration","flags","parsedParts","isNowValid","invalidWeekday","isFrozen","createInvalid","markInvalid","extendedIsoRegex","basicIsoRegex","tzRegex","isoDates","isoTimes","aspNetJsonRegex","obsOffsets","UT","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","configFromISO","_i","exec","allowTime","dateFormat","timeFormat","tzFormat","l","_f","configFromStringAndFormat","extractFromRFC2822Strings","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","result","untruncateYear","preprocessRFC2822","trim","checkWeekday","weekdayStr","parsedInput","weekdayProvided","weekdayActual","calculateOffset","obsOffset","militaryOffset","numOffset","hm","configFromRFC2822","parsedArray","configFromString","formatDate","_format","formatMoment","expandFormat","localFormattingTokens","replaceLongDateFormatTokens","formatLongDate","lastIndex","defaults","c","currentDateArray","nowValue","configFromArray","currentDate","expectedWeekday","yearToUse","dayOfYearFromWeekInfo","_overflowDayOfYear","_nextDay","w","weekYear","temp","weekdayOverflow","GG","W","E","curWeek","gg","e","_overflowWeeks","_overflowWeekday","checkOverflow","ISO_8601","RFC_2822","totalParsedInputLength","inputLength","skipped","meridiemFixWrap","_hour","meridiemHour","isPm","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","score","configFromObject","map","createFromConfig","prepareConfig","_l","preparse","configFromInput","_arr","createLocalOrUTC","_input","parseDate","absRound","isAfter","isBefore","isDisabledDay","daysDisabled","isSame","inputMs","aspNetRegex","isoRegex","convertDuration","parseIso","diffRes","momentsDifference","from","to","inp","positiveMomentsDifference","base","other","_basePlus","_other","period","addSubtract","isAdding","getLocaleDayOfWeek","getISODayOfWeek","weekdaysMinRegex","weekdaysShortRegex","weekdaysRegex","weekdaysParse","parseWeekday","_num","_weekDay","parseIsoWeekday","getDayOfWeek","symbolMap","numberMap","pluralForm","plurals","pluralize","u","f","arLocale","weekdaysParseExact","bgLocale","Number","lastDigit","last2Digits","monthsShortDot","caLocale","monthsStrictRegex","monthsShortStrictRegex","longMonthsParse","shortMonthsParse","months$1","monthsShort$1","plural","translate","csLocale","daLocale","processRelativeTime","deLocale","monthsParseExact","enGbLocale","monthsShortDot$1","monthsShort$2","monthsParse$1","monthsRegex$1","esDoLocale","monthsShortDot$2","monthsShort$3","monthsParse$2","monthsRegex$2","esLocale","monthsShortDot$3","monthsShort$4","esUsLocale","numbersPast","numbersFuture","translate$1","verbalNumber","fiLocale","ll","lll","llll","frLocale","monthsShortDot$4","monthsShort$5","monthsParse$3","monthsRegex$3","glLocale","heLocale","symbolMap$1","numberMap$1","hiLocale","weekEndings","translate$2","huLocale","idLocale","itLocale","jaLocale","koLocale","isUpper","translateSeconds","translateSingular","forms","special","translate$3","ltLocale","translate$4","mnLocale","nbLocale","monthsShortWithDots","monthsShortWithoutDots","monthsParse$4","monthsRegex$4","nlBeLocale","monthsShortWithDots$1","monthsShortWithoutDots$1","monthsParse$5","monthsRegex$5","nlLocale","monthsNominative","monthsSubjective","plural$1","translate$5","plLocale","ptBrLocale","relativeTimeWithPlural","roLocale","plural$2","word","relativeTimeWithPlural$1","monthsParse$6","ruLocale","months$2","monthsShort$6","plural$3","translate$6","skLocale","processRelativeTime$1","slLocale","svLocale","thLocale","suffixes","trLocale","zhCnLocale","ɵa"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACf,SAAO,CAACD,CAAC,GAAGC,CAAJ,GAAQA,CAAT,IAAcA,CAArB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,SAAOA,GAAG,GAAG,CAAN,GAAUC,IAAI,CAACC,IAAL,CAAUF,GAAV,KAAkB,CAA5B,GAAgCC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAvC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASI,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,SAAOA,KAAK,YAAYC,IAAjB,IAAyBC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,KAA/B,MAA0C,eAA1E;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASM,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOA,IAAI,IAAIA,IAAI,CAACC,OAAb,IAAwB,CAACC,KAAK,CAACF,IAAI,CAACC,OAAL,EAAD,CAArC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC,EAApB,EAAwB;AACpB,SAAQA,EAAE,YAAYC,QAAd,IACJV,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BM,EAA/B,MAAuC,mBAD3C;AAEH;AACD;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBb,KAAlB,EAAyB;AACrB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,KAA/B,MAA0C,iBAA9E;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASc,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAQA,KAAK,YAAYC,KAAjB,IACJd,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BU,KAA/B,MAA0C,gBAD9C;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC;AAAE;AAAtB,EAAkCC,CAAlC,EAAqC;AACjC,SAAOjB,MAAM,CAACC,SAAP,CAAiBiB,cAAjB,CAAgCf,IAAhC,CAAqCa,CAArC,EAAwCC,CAAxC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBN;AAAM;AAAxB,EAAoC;AAChC;AACA;AACA,SAAQA,KAAK,IAAI,IAAT,IAAiBb,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BU,KAA/B,MAA0C,iBAAnE;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASO,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,MAAIrB,MAAM,CAACsB,mBAAX,EAAgC;AAC5B,WAAQtB,MAAM,CAACsB,mBAAP,CAA2BD,GAA3B,EAAgCE,MAAhC,KAA2C,CAAnD;AACH;;AACD;AAAI;AAAiBC,EAAAA,CAArB;;AACA,OAAKA,CAAL,IAAUH,GAAV,EAAe;AACX,QAAIA,GAAG,CAACH,cAAJ,CAAmBM,CAAnB,CAAJ,EAA2B;AACvB,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBZ,KAArB,EAA4B;AACxB,SAAOA,KAAK,KAAK,KAAK,CAAtB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASa,KAAT,CAAeC,mBAAf,EAAoC;AAChC;AAAM;AAAiBC,EAAAA,aAAa,GAAG,CAACD,mBAAxC;AACA;AAAI;AAAiB7B,EAAAA,KAAK,GAAG,CAA7B;;AACA,MAAI8B,aAAa,KAAK,CAAlB,IAAuBC,QAAQ,CAACD,aAAD,CAAnC,EAAoD;AAChD9B,IAAAA,KAAK,GAAGR,QAAQ,CAACsC,aAAD,CAAhB;AACH;;AACD,SAAO9B,KAAP;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBgC,OAAO,GAAG,EAAjC;AACA;AAAM;AAAiBC,SAAS,GAAG;AAC/B1B,EAAAA,IAAI,EAAE,KADyB;AAE/B2B,EAAAA,IAAI,EAAE,OAFyB;AAG/BC,EAAAA,MAAM,EAAE,SAHuB;AAI/BC,EAAAA,MAAM,EAAE,SAJuB;AAK/BC,EAAAA,WAAW,EAAE;AALkB,CAAnC;AAOA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuC;AACnC;AAAM;AAAiBC,EAAAA,SAAS,GAAGF,IAAI,CAACG,WAAL,EAAnC;AACA;AAAI;AAAiBC,EAAAA,KAAK,GAAGJ,IAA7B;;AACA,MAAIE,SAAS,IAAIR,SAAjB,EAA4B;AACxBU,IAAAA,KAAK,GAAGV,SAAS,CAACQ,SAAD,CAAjB;AACH;;AACDT,EAAAA,OAAO,CAACS,SAAD,CAAP,GAAqBT,OAAO,WAAIS,SAAJ,OAAP,GAA2BT,OAAO,CAACQ,SAAD,CAAP,GAAqBG,KAArE;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,SAAOhD,QAAQ,CAACgD,KAAD,CAAR,GAAkBb,OAAO,CAACa,KAAD,CAAP,IAAkBb,OAAO,CAACa,KAAK,CAACH,WAAN,EAAD,CAA3C,GAAmEI,SAA1E;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2C;AACvC;AAAM;AAAiBC,EAAAA,eAAe,GAAG,EAAzC;AACA;AAAI;AAAiBC,EAAAA,cAArB;AACA;AAAI;AAAiBC,EAAAA,IAArB;;AACA,OAAKA,IAAL,IAAaH,WAAb,EAA0B;AACtB,QAAI/B,UAAU,CAAC+B,WAAD,EAAcG,IAAd,CAAd,EAAmC;AAC/BD,MAAAA,cAAc,GAAGN,cAAc,CAACO,IAAD,CAA/B;;AACA,UAAID,cAAJ,EAAoB;AAChBD,QAAAA,eAAe,CAACC,cAAD,CAAf,GAAkCF,WAAW,CAACG,IAAD,CAA7C;AACH;AACJ;AACJ;;AACD;AAAO;AAAkBF,IAAAA;AAAzB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA;AAAM;AAAiBG,IAAI,GAAG,CAA9B;AACA;AAAM;AAAiBC,KAAK,GAAG,CAA/B;AACA;AAAM;AAAiBC,IAAI,GAAG,CAA9B;AACA;AAAM;AAAiBC,IAAI,GAAG,CAA9B;AACA;AAAM;AAAiBC,MAAM,GAAG,CAAhC;AACA;AAAM;AAAiBC,MAAM,GAAG,CAAhC;AACA;AAAM;AAAiBC,WAAW,GAAG,CAArC;AACA;AAAM;AAAiBC,IAAI,GAAG,CAA9B;AACA;AAAM;AAAiBC,OAAO,GAAG,CAAjC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBpE,GAAlB,EAAuBqE,YAAvB,EAAqCC,SAArC,EAAgD;AAC5C;AAAM;AAAiBC,EAAAA,SAAS,aAAMtE,IAAI,CAACuE,GAAL,CAASxE,GAAT,CAAN,CAAhC;AACA;AAAM;AAAiByE,EAAAA,WAAW,GAAGJ,YAAY,GAAGE,SAAS,CAACvC,MAA9D;AACA;AAAM;AAAiB0C,EAAAA,IAAI,GAAG1E,GAAG,IAAI,CAArC;;AACA;AAAM;AAAiB2E,EAAAA,KAAK,GAAGD,IAAI,GAAIJ,SAAS,GAAG,GAAH,GAAS,EAAtB,GAA4B,GAA/D,CAJ4C,CAK5C;;;AACA;AAAM;AAAiBM,EAAAA,MAAM,GAAG3E,IAAI,CAAC4E,GAAL,CAAS,EAAT,EAAa5E,IAAI,CAAC6E,GAAL,CAAS,CAAT,EAAYL,WAAZ,CAAb,EAAuC9D,QAAvC,GAAkDoE,MAAlD,CAAyD,CAAzD,CAAhC;;AACA,SAAQJ,KAAK,GAAGC,MAAR,GAAiBL,SAAzB;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAI;AAAiBS,eAAe,GAAG,EAAvC;AACA;AAAI;AAAiBC,oBAAoB,GAAG,EAA5C,C,CACA;;AACA;AAAM;AAAiBC,gBAAgB,GAAG,sLAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,QAAhD,EAA0D;AACtD,MAAIH,KAAJ,EAAW;AACPH,IAAAA,oBAAoB,CAACG,KAAD,CAApB,GAA8BG,QAA9B;AACH;;AACD,MAAIF,MAAJ,EAAY;AACRJ,IAAAA,oBAAoB,CAACI,MAAM,CAAC,CAAD,CAAP,CAApB,GAAkC,YAAY;AAC1C,aAAOjB,QAAQ,CAACmB,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAD,EAAkCJ,MAAM,CAAC,CAAD,CAAxC,EAA6CA,MAAM,CAAC,CAAD,CAAnD,CAAf;AACH,KAFD;AAGH;;AACD,MAAIC,OAAJ,EAAa;AACTL,IAAAA,oBAAoB,CAACK,OAAD,CAApB,GAAgC,UAAUxE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,aAAOA,IAAI,CAACC,MAAL,CAAYL,OAAZ,CAAoBC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAApB,EAAqDL,KAArD,CAAP;AACH,KAFD;AAGH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASQ,kBAAT,CAA4BC,MAA5B,EAAoC;AAChC;AAAM;AAAiBC,EAAAA,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAab,gBAAb,CAA/B;AACA;AAAM;AAAiBlD,EAAAA,MAAM,GAAG8D,KAAK,CAAC9D,MAAtC;AACA;AAAM;AAAiBgE,EAAAA,SAAS,GAAG,IAAIzE,KAAJ,CAAUS,MAAV,CAAnC;;AACA,OAAK;AAAI;AAAiBiE,EAAAA,CAAC,GAAG,CAA9B,EAAiCA,CAAC,GAAGjE,MAArC,EAA6CiE,CAAC,EAA9C,EAAkD;AAC9CD,IAAAA,SAAS,CAACC,CAAD,CAAT,GAAehB,oBAAoB,CAACa,KAAK,CAACG,CAAD,CAAN,CAApB,GACThB,oBAAoB,CAACa,KAAK,CAACG,CAAD,CAAN,CADX,GAETC,sBAAsB,CAACJ,KAAK,CAACG,CAAD,CAAN,CAF5B;AAGH;;AACD,SAAO,UAAUnF,IAAV,EAAgB6E,MAAhB,EAAwBQ,KAAxB,EAA2C;AAAA,QAAZC,MAAY,uEAAH,CAAG;AAC9C;AAAI;AAAiBC,IAAAA,MAAM,GAAG,EAA9B;;AACA,SAAK;AAAI;AAAiBC,IAAAA,CAAC,GAAG,CAA9B,EAAiCA,CAAC,GAAGtE,MAArC,EAA6CsE,CAAC,EAA9C,EAAkD;AAC9CD,MAAAA,MAAM,IAAIpF,UAAU,CAAC+E,SAAS,CAACM,CAAD,CAAV,CAAV;AACH;AAAkBN,MAAAA,SAAS,CAACM,CAAD,CAA5B,CAAkC1F,IAAlC,CAAuC,IAAvC,EAA6CE,IAA7C,EAAmD;AAAE+E,QAAAA,MAAM,EAANA,MAAF;AAAUF,QAAAA,MAAM,EAANA,MAAV;AAAkBQ,QAAAA,KAAK,EAALA,KAAlB;AAAyBC,QAAAA,MAAM,EAANA;AAAzB,OAAnD,CADI,GAEJJ,SAAS,CAACM,CAAD,CAFf;AAGH;;AACD,WAAOD,MAAP;AACH,GARD;AASH;AACD;AACA;AACA;AACA;;;AACA,SAASH,sBAAT,CAAgC5E,KAAhC,EAAuC;AACnC,MAAIA,KAAK,CAACyE,KAAN,CAAY,UAAZ,CAAJ,EAA6B;AACzB,WAAOzE,KAAK,CAACiF,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAP;AACH;;AACD,SAAOjF,KAAK,CAACiF,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgC;AAC5B;AAAM;AAAiB7F,EAAAA,IAAI,GAAG,IAAIN,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAASpB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAT,CAA9B,CAD4B,CAE5B;;AACA,MAAIgB,CAAC,GAAG,GAAJ,IAAWA,CAAC,IAAI,CAAhB,IAAqBnE,QAAQ,CAACxB,IAAI,CAAC+F,cAAL,EAAD,CAAjC,EAA0D;AACtD/F,IAAAA,IAAI,CAACgG,cAAL,CAAoBL,CAApB;AACH;;AACD,SAAO3F,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiG,UAAT,CAAoBN,CAApB,EAAkE;AAAA,MAA3CC,CAA2C,uEAAvC,CAAuC;AAAA,MAApCC,CAAoC,uEAAhC,CAAgC;AAAA,MAA7BK,CAA6B,uEAAzB,CAAyB;AAAA,MAAtBC,CAAsB,uEAAlB,CAAkB;AAAA,MAAfC,CAAe,uEAAX,CAAW;AAAA,MAARC,EAAQ,uEAAH,CAAG;AAC9D;AAAM;AAAiBrG,EAAAA,IAAI,GAAG,IAAIN,IAAJ,CAASiG,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBK,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,EAA3B,CAA9B,CAD8D,CAE9D;;AACA,MAAIV,CAAC,GAAG,GAAJ,IAAWA,CAAC,IAAI,CAAhB,IAAqBnE,QAAQ,CAACxB,IAAI,CAACsG,WAAL,EAAD,CAAjC,EAAuD;AACnDtG,IAAAA,IAAI,CAACuG,WAAL,CAAiBZ,CAAjB;AACH;;AACD,SAAO3F,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwG,QAAT,CAAkBxG,IAAlB,EAAuC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACnC,SAAOA,KAAK,GAAGrF,IAAI,CAACyG,WAAL,EAAH,GAAwBzG,IAAI,CAACwG,QAAL,EAApC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoB1G,IAApB,EAAyC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACrC,SAAOA,KAAK,GAAGrF,IAAI,CAAC2G,aAAL,EAAH,GAA0B3G,IAAI,CAAC0G,UAAL,EAAtC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoB5G,IAApB,EAAyC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACrC,SAAOA,KAAK,GAAGrF,IAAI,CAAC6G,aAAL,EAAH,GAA0B7G,IAAI,CAAC4G,UAAL,EAAtC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,CAAyB9G,IAAzB,EAA8C;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AAC1C,SAAOA,KAAK,GAAGrF,IAAI,CAAC+G,kBAAL,EAAH,GAA+B/G,IAAI,CAAC8G,eAAL,EAA3C;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS7G,OAAT,CAAiBD,IAAjB,EAAuB;AACnB,SAAOA,IAAI,CAACC,OAAL,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS+G,MAAT,CAAgBhH,IAAhB,EAAqC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACjC,SAAOA,KAAK,GAAGrF,IAAI,CAACiH,SAAL,EAAH,GAAsBjH,IAAI,CAACgH,MAAL,EAAlC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBlH,IAAjB,EAAsC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AAClC,SAAOA,KAAK,GAAGrF,IAAI,CAACmH,UAAL,EAAH,GAAuBnH,IAAI,CAACkH,OAAL,EAAnC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBpH,IAAlB,EAAuC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACnC,SAAOA,KAAK,GAAGrF,IAAI,CAACqH,WAAL,EAAH,GAAwBrH,IAAI,CAACoH,QAAL,EAApC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASd,WAAT,CAAqBtG,IAArB,EAA0C;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACtC,SAAOA,KAAK,GAAGrF,IAAI,CAAC+F,cAAL,EAAH,GAA2B/F,IAAI,CAACsG,WAAL,EAAvC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASgB,IAAT,CAActH,IAAd,EAAoB;AAChB,SAAOb,IAAI,CAACE,KAAL,CAAWW,IAAI,CAACuH,OAAL,KAAiB,IAA5B,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BxH,IAA5B,EAAkC;AAC9B,SAAOiG,UAAU,CAACjG,IAAI,CAACsG,WAAL,EAAD,EAAqBtG,IAAI,CAACoH,QAAL,EAArB,EAAsC,CAAtC,EAAyCpH,IAAI,CAACwG,QAAL,EAAzC,EAA0DxG,IAAI,CAAC0G,UAAL,EAA1D,EAA6E1G,IAAI,CAAC4G,UAAL,EAA7E,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASa,gBAAT,CAA0BzH,IAA1B,EAAgC0H,cAAhC,EAAgD;AAC5C,SAAO1H,IAAI,CAACgH,MAAL,OAAkBU,cAAzB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAC/B,MAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,SAAOC,UAAU,CAACF,KAAD,EAAQC,KAAR,CAAV,IAA4BT,QAAQ,CAACQ,KAAD,CAAR,KAAoBR,QAAQ,CAACS,KAAD,CAA/D;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBF,KAApB,EAA2BC,KAA3B,EAAkC;AAC9B,MAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,SAAOvB,WAAW,CAACsB,KAAD,CAAX,KAAuBtB,WAAW,CAACuB,KAAD,CAAzC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBH,KAAnB,EAA0BC,KAA1B,EAAiC;AAC7B,MAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,SAAQC,UAAU,CAACF,KAAD,EAAQC,KAAR,CAAV,IACJF,WAAW,CAACC,KAAD,EAAQC,KAAR,CADP,IAEJX,OAAO,CAACU,KAAD,CAAP,KAAmBV,OAAO,CAACW,KAAD,CAF9B;AAGH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBG,MAAM,GAAG,IAAhC,C,CAAsC;;AACtC;AAAM;AAAiBC,MAAM,GAAG,MAAhC,C,CAAwC;;AACxC;AAAM;AAAiBC,MAAM,GAAG,OAAhC,C,CAAyC;;AACzC;AAAM;AAAiBC,MAAM,GAAG,OAAhC,C,CAAyC;;AACzC;AAAM;AAAiBC,MAAM,GAAG,YAAhC,C,CAA8C;;AAC9C;AAAM;AAAiBC,SAAS,GAAG,OAAnC,C,CAA4C;;AAC5C;AAAM;AAAiBC,SAAS,GAAG,WAAnC,C,CAAgD;;AAChD;AAAM;AAAiBC,SAAS,GAAG,eAAnC,C,CAAoD;;AACpD;AAAM;AAAiBC,SAAS,GAAG,SAAnC,C,CAA8C;;AAC9C;AAAM;AAAiBC,SAAS,GAAG,SAAnC,C,CAA8C;;AAC9C;AAAM;AAAiBC,SAAS,GAAG,cAAnC,C,CAAmD;;AACnD;AAAM;AAAiBC,aAAa,GAAG,KAAvC,C,CAA8C;;AAC9C;AAAM;AAAiBC,WAAW,GAAG,UAArC,C,CAAiD;;AACjD;AAAM;AAAiBC,gBAAgB,GAAG,yBAA1C,C,CAAqE;;AACrE;AAAM;AAAiBC,cAAc,GAAG,sBAAxC,C,CAAgE;AAChE;AACA;AACA;;AACA;AAAM;AAAiBC,SAAS,GAAG,0IAAnC;AACA;AAAM;AAAiBC,OAAO,GAAG,EAAjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuB3E,KAAvB,EAA8B4E,KAA9B,EAAqCC,WAArC,EAAkD;AAC9C,MAAIhJ,UAAU,CAAC+I,KAAD,CAAd,EAAuB;AACnBF,IAAAA,OAAO,CAAC1E,KAAD,CAAP,GAAiB4E,KAAjB;AACA;AACH;;AACDF,EAAAA,OAAO,CAAC1E,KAAD,CAAP,GAAiB,UAAU8E,QAAV,EAAoBvE,MAApB,EAA4B;AACzC,WAAQuE,QAAQ,IAAID,WAAb,GAA4BA,WAA5B,GAA0CD,KAAjD;AACH,GAFD;AAGH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASG,qBAAT,CAA+B/E,KAA/B,EAAsCO,MAAtC,EAA8C;AAC1C;AAAM;AAAiByE,EAAAA,OAAO,GAAG,KAAjC;;AACA,MAAI,CAAC5I,UAAU,CAACsI,OAAD,EAAU1E,KAAV,CAAf,EAAiC;AAC7B,WAAO,IAAIiF,MAAJ,CAAWC,cAAc,CAAClF,KAAD,CAAzB,CAAP;AACH;;AACD,SAAO0E,OAAO,CAAC1E,KAAD,CAAP,CAAegF,OAAf,EAAwBzE,MAAxB,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS2E,cAAT,CAAwBjK,GAAxB,EAA6B;AACzB;AACA,SAAOkK,WAAW,CAAClK,GAAG,CACjBkG,OADc,CACN,IADM,EACA,EADA,EAEdA,OAFc,CAEN,qCAFM,EAEiC,UAACiE,OAAD,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB;AAAA,WAA6BH,EAAE,IAAIC,EAAN,IAAYC,EAAZ,IAAkBC,EAA/C;AAAA,GAFjC,CAAD,CAAlB;AAGH;AACD;AACA;AACA;AACA;;;AACA,SAASL,WAAT,CAAqBlK,GAArB,EAA0B;AACtB,SAAOA,GAAG,CAACkG,OAAJ,CAAY,wBAAZ,EAAsC,MAAtC,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBsE,MAAM,GAAG,EAAhC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuB1F,KAAvB,EAA8BG,QAA9B,EAAwC;AACpC;AAAM;AAAiBwF,EAAAA,MAAM,GAAG3K,QAAQ,CAACgF,KAAD,CAAR,GAAkB,CAACA,KAAD,CAAlB,GAA4BA,KAA5D;;AACA;AAAI;AAAiB4F,EAAAA,IAAI,GAAGzF,QAA5B;;AACA,MAAInE,QAAQ,CAACmE,QAAD,CAAZ,EAAwB;AACpByF,IAAAA,IAAI,GAAG,cAAU1J,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACnCnF,MAAAA,KAAK,CAACP,QAAD,CAAL,GAAkBpD,KAAK,CAACb,KAAD,CAAvB;AACA,aAAO2J,MAAP;AACH,KAHD;AAIH;;AACD,MAAI5J,OAAO,CAAC0J,MAAD,CAAP,IAAmB9J,UAAU,CAAC+J,IAAD,CAAjC,EAAyC;AACrC;AAAI;AAAiB/E,IAAAA,CAArB;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG8E,MAAM,CAAC/I,MAAvB,EAA+BiE,CAAC,EAAhC,EAAoC;AAChC4E,MAAAA,MAAM,CAACE,MAAM,CAAC9E,CAAD,CAAP,CAAN,GAAoB+E,IAApB;AACH;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2B9F,KAA3B,EAAkCG,QAAlC,EAA4C;AACxCuF,EAAAA,aAAa,CAAC1F,KAAD,EAAQ,UAAU9D,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgCF,MAAhC,EAAwC;AACzDE,IAAAA,MAAM,CAACE,EAAP,GAAYF,MAAM,CAACE,EAAP,IAAa,EAAzB;AACA,WAAO5F,QAAQ,CAACjE,KAAD,EAAQ2J,MAAM,CAACE,EAAf,EAAmBF,MAAnB,EAA2BF,MAA3B,CAAf;AACH,GAHY,CAAb;AAIH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,uBAAT,CAAiChG,KAAjC,EAAwC9D,KAAxC,EAA+C2J,MAA/C,EAAuD;AACnD,MAAI3J,KAAK,IAAI,IAAT,IAAiBE,UAAU,CAACqJ,MAAD,EAASzF,KAAT,CAA/B,EAAgD;AAC5CyF,IAAAA,MAAM,CAACzF,KAAD,CAAN,CAAc9D,KAAd,EAAqB2J,MAAM,CAACI,EAA5B,EAAgCJ,MAAhC,EAAwC7F,KAAxC;AACH;;AACD,SAAO6F,MAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASK,cAAT,GAA0B;AACtB;AACAnG,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAOsC,OAAO,CAAClH,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAP,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CAFsB,CAMtB;;AACAkC,EAAAA,YAAY,CAAC,MAAD,EAAS,GAAT,CAAZ,CAPsB,CAQtB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,IAAD,EAAO,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC5C,WAAOA,MAAM,CAAC4F,uBAAP,IAAkC5F,MAAM,CAAC6F,aAAhD;AACH,GAFY,CAAb;AAGAV,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAcjH,IAAd,CAAb;AACAiH,EAAAA,aAAa,CAAC,IAAD,EAAO,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAChDnF,IAAAA,KAAK,CAACjC,IAAD,CAAL,GAAc1B,KAAK,CAACb,KAAK,CAACyE,KAAN,CAAYoD,SAAZ,EAAuB,CAAvB,CAAD,CAAnB;AACA,WAAO8B,MAAP;AACH,GAHY,CAAb;AAIH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASQ,mBAAT,GAA+B;AAC3B;AACA,SAAO;AACHC,IAAAA,KAAK,EAAE,KADJ;AAEHC,IAAAA,YAAY,EAAE,EAFX;AAGHC,IAAAA,WAAW,EAAE,EAHV;AAIHC,IAAAA,QAAQ,EAAE,CAAC,CAJR;AAKHC,IAAAA,aAAa,EAAE,CALZ;AAMHC,IAAAA,SAAS,EAAE,KANR;AAOHC,IAAAA,YAAY,EAAE,IAPX;AAQHC,IAAAA,aAAa,EAAE,KARZ;AASHC,IAAAA,eAAe,EAAE,KATd;AAUHC,IAAAA,GAAG,EAAE,KAVF;AAWHC,IAAAA,eAAe,EAAE,EAXd;AAYHC,IAAAA,QAAQ,EAAE,IAZP;AAaHC,IAAAA,OAAO,EAAE,KAbN;AAcHC,IAAAA,eAAe,EAAE;AAdd,GAAP;AAgBH;AACD;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBvB,MAAzB,EAAiC;AAC7B,MAAIA,MAAM,CAACwB,GAAP,IAAc,IAAlB,EAAwB;AACpBxB,IAAAA,MAAM,CAACwB,GAAP,GAAahB,mBAAmB,EAAhC;AACH;;AACD,SAAOR,MAAM,CAACwB,GAAd;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiB5L,IAAjB,EAAuB4E,IAAvB,EAA6B;AACzB,SAAO0B,WAAW,CAACtG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,CAA8BxF,QAA9B,EAAP;AACH;AACD;AACA;AACA;;;AACA,SAASgM,QAAT,GAAoB;AAChBxH,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD;AAAM;AAAiBe,IAAAA,CAAC,GAAGW,WAAW,CAACtG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAtC;AACA,WAAOM,CAAC,IAAI,IAAL,GAAYA,CAAC,CAAC9F,QAAF,CAAW,EAAX,CAAZ,cAAiC8F,CAAjC,CAAP;AACH,GAHa,CAAd;AAIAtB,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAP,EAAyB,IAAzB,EAA+B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC/D,WAAO,CAAC0B,WAAW,CAACtG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,GAAgC,GAAjC,EAAsCxF,QAAtC,CAA+C,EAA/C,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,MAAD,EAAS,CAAT,EAAY,KAAZ,CAAP,EAA2B,IAA3B,EAAiCuH,OAAjC,CAAd;AACAvH,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,OAAD,EAAU,CAAV,EAAa,KAAb,CAAP,EAA4B,IAA5B,EAAkCuH,OAAlC,CAAd;AACAvH,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,QAAD,EAAW,CAAX,EAAc,IAAd,CAAP,EAA4B,IAA5B,EAAkCuH,OAAlC,CAAd,CAVgB,CAWhB;;AACA7J,EAAAA,YAAY,CAAC,MAAD,EAAS,GAAT,CAAZ,CAZgB,CAahB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAML,WAAN,CAAb;AACAK,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,MAAD,EAASR,SAAT,EAAoBN,MAApB,CAAb;AACAc,EAAAA,aAAa,CAAC,OAAD,EAAUP,SAAV,EAAqBN,MAArB,CAAb;AACAa,EAAAA,aAAa,CAAC,QAAD,EAAWP,SAAX,EAAsBN,MAAtB,CAAb;AACA4B,EAAAA,aAAa,CAAC,CAAC,OAAD,EAAU,QAAV,CAAD,EAAsBnH,IAAtB,CAAb;AACAmH,EAAAA,aAAa,CAAC,MAAD,EAAS,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAClDnF,IAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcrC,KAAK,CAACU,MAAN,KAAiB,CAAjB,GAAqB4K,iBAAiB,CAACtL,KAAD,CAAtC,GAAgDa,KAAK,CAACb,KAAD,CAAnE;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIAH,EAAAA,aAAa,CAAC,IAAD,EAAO,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAChDnF,IAAAA,KAAK,CAACnC,IAAD,CAAL,GAAciJ,iBAAiB,CAACtL,KAAD,CAA/B;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIAH,EAAAA,aAAa,CAAC,GAAD,EAAM,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAC/CnF,IAAAA,KAAK,CAACnC,IAAD,CAAL,GAAckJ,QAAQ,CAACvL,KAAD,EAAQ,EAAR,CAAtB;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIH;AACD;AACA;AACA;AACA;;;AACA,SAAS2B,iBAAT,CAA2BtL,KAA3B,EAAkC;AAC9B,SAAOa,KAAK,CAACb,KAAD,CAAL,IAAgBa,KAAK,CAACb,KAAD,CAAL,GAAe,EAAf,GAAoB,IAApB,GAA2B,IAA3C,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASwL,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,UAAU,CAACD,IAAD,CAAV,GAAmB,GAAnB,GAAyB,GAAhC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBD,IAApB,EAA0B;AACtB,SAAQA,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,GAAP,KAAe,CAAlC,IAAwCA,IAAI,GAAG,GAAP,KAAe,CAA9D;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBF,IAAvB,EAA6BG,KAA7B,EAAoC;AAChC,MAAIlM,KAAK,CAAC+L,IAAD,CAAL,IAAe/L,KAAK,CAACkM,KAAD,CAAxB,EAAiC;AAC7B,WAAOC,GAAP;AACH;;AACD;AAAM;AAAiBC,EAAAA,QAAQ,GAAGxN,GAAG,CAACsN,KAAD,EAAQ,EAAR,CAArC;;AACA;AAAM;AAAiBG,EAAAA,KAAK,GAAGN,IAAI,GAAG,CAACG,KAAK,GAAGE,QAAT,IAAqB,EAA3D;;AACA,SAAOA,QAAQ,KAAK,CAAb,GACDJ,UAAU,CAACK,KAAD,CAAV,GAAoB,EAApB,GAAyB,EADxB,GAEA,KAAKD,QAAQ,GAAG,CAAX,GAAe,CAF3B;AAGH;AACD;AACA;AACA;;;AACA,SAASE,SAAT,GAAqB;AACjB;AACAnI,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAO,CAACwC,QAAQ,CAACpH,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAR,GAA6B,CAA9B,EAAiCxF,QAAjC,CAA0C,EAA1C,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpD,WAAOA,IAAI,CAACC,MAAL,CAAY4H,WAAZ,CAAwBzM,IAAxB,EAA8B4E,IAAI,CAACG,MAAnC,EAA2CH,IAAI,CAACS,KAAhD,CAAP;AACH,GAFa,CAAd;AAGAhB,EAAAA,cAAc,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,EAAqB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACrD,WAAOA,IAAI,CAACC,MAAL,CAAY6H,MAAZ,CAAmB1M,IAAnB,EAAyB4E,IAAI,CAACG,MAA9B,EAAsCH,IAAI,CAACS,KAA3C,CAAP;AACH,GAFa,CAAd,CARiB,CAWjB;;AACAtD,EAAAA,YAAY,CAAC,OAAD,EAAU,GAAV,CAAZ,CAZiB,CAajB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,KAAD,EAAQ,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC7C,WAAOA,MAAM,CAAC8H,gBAAP,CAAwBvD,QAAxB,CAAP;AACH,GAFY,CAAb;AAGAH,EAAAA,aAAa,CAAC,MAAD,EAAS,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC9C,WAAOA,MAAM,CAAC+H,WAAP,CAAmBxD,QAAnB,CAAP;AACH,GAFY,CAAb;AAGAY,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACvDnF,IAAAA,KAAK,CAAClC,KAAD,CAAL,GAAezB,KAAK,CAACb,KAAD,CAAL,GAAe,CAA9B;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIAH,EAAAA,aAAa,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD,EAAkB,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC7F,KAAhC,EAAuC;AAClE;AAAM;AAAiB8H,IAAAA,KAAK,GAAGjC,MAAM,CAAC0C,OAAP,CAAeC,WAAf,CAA2BtM,KAA3B,EAAkC8D,KAAlC,EAAyC6F,MAAM,CAACb,OAAhD,CAA/B,CADkE,CAElE;;;AACA,QAAI8C,KAAK,IAAI,IAAb,EAAmB;AACfpH,MAAAA,KAAK,CAAClC,KAAD,CAAL,GAAesJ,KAAf;AACH,KAFD,MAGK;AACDV,MAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBe,YAAxB,GAAuC,CAAC,CAAC1K,KAAzC;AACH;;AACD,WAAO2J,MAAP;AACH,GAVY,CAAb;AAWH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiB4C,eAAe,GAAG;AACrCd,EAAAA,IAAI,EAAE,CAD+B;AAErCG,EAAAA,KAAK,EAAE,CAF8B;AAGrCY,EAAAA,GAAG,EAAE,CAHgC;AAIrCrL,EAAAA,IAAI,EAAE,CAJ+B;AAKrCC,EAAAA,MAAM,EAAE,CAL6B;AAMrCqL,EAAAA,OAAO,EAAE;AAN4B,CAAzC;AAQA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBlN,IAAnB,EAAyBgC,IAAzB,EAA+B;AAC3B;AAAM;AAAiBI,EAAAA,KAAK,GAAGzC,MAAM,CAACwN,MAAP,CAAc,EAAd,EAAkBJ,eAAlB,EAAmC/K,IAAnC,CAA/B;;AACA;AAAM;AAAiBiK,EAAAA,IAAI,GAAGjM,IAAI,CAACsG,WAAL,MAAsBlE,KAAK,CAAC6J,IAAN,IAAc,CAApC,CAA9B;AACA;AAAM;AAAiBG,EAAAA,KAAK,GAAGpM,IAAI,CAACoH,QAAL,MAAmBhF,KAAK,CAACgK,KAAN,IAAe,CAAlC,CAA/B;AACA;AAAI;AAAiBY,EAAAA,GAAG,GAAGhN,IAAI,CAACkH,OAAL,MAAkB9E,KAAK,CAAC4K,GAAN,IAAa,CAA/B,CAA3B;;AACA,MAAI5K,KAAK,CAACgK,KAAN,IAAe,CAAChK,KAAK,CAAC4K,GAA1B,EAA+B;AAC3BA,IAAAA,GAAG,GAAG7N,IAAI,CAACiO,GAAL,CAASJ,GAAT,EAAcb,aAAa,CAACF,IAAD,EAAOG,KAAP,CAA3B,CAAN;AACH;;AACD,SAAOnG,UAAU,CAACgG,IAAD,EAAOG,KAAP,EAAcY,GAAd,EAAmBhN,IAAI,CAACwG,QAAL,MAAmBpE,KAAK,CAACT,IAAN,IAAc,CAAjC,CAAnB,EAAwD3B,IAAI,CAAC0G,UAAL,MAAqBtE,KAAK,CAACR,MAAN,IAAgB,CAArC,CAAxD,EAAiG5B,IAAI,CAAC4G,UAAL,MAAqBxE,KAAK,CAAC6K,OAAN,IAAiB,CAAtC,CAAjG,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,CAAqBrN,IAArB,EAA2BgC,IAA3B,EAAiC;AAC7B,SAAOiE,UAAU,CAACqH,MAAM,CAACtN,IAAI,CAACsG,WAAL,EAAD,EAAqBtE,IAAI,CAACiK,IAA1B,CAAP,EAAwCqB,MAAM,CAACtN,IAAI,CAACoH,QAAL,EAAD,EAAkBpF,IAAI,CAACoK,KAAvB,CAA9C,EAA6EkB,MAAM,CAACtN,IAAI,CAACkH,OAAL,EAAD,EAAiBlF,IAAI,CAACgL,GAAtB,CAAnF,EAA+GM,MAAM,CAACtN,IAAI,CAACwG,QAAL,EAAD,EAAkBxE,IAAI,CAACL,IAAvB,CAArH,EAAmJ2L,MAAM,CAACtN,IAAI,CAAC0G,UAAL,EAAD,EAAoB1E,IAAI,CAACJ,MAAzB,CAAzJ,EAA2L0L,MAAM,CAACtN,IAAI,CAAC4G,UAAL,EAAD,EAAoB5E,IAAI,CAACiL,OAAzB,CAAjM,EAAoOK,MAAM,CAACtN,IAAI,CAAC8G,eAAL,EAAD,EAAyB9E,IAAI,CAACuL,YAA9B,CAA1O,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASD,MAAT,CAAgBE,GAAhB,EAAqBtO,GAArB,EAA0B;AACtB,SAAOoB,QAAQ,CAACpB,GAAD,CAAR,GAAgBA,GAAhB,GAAsBsO,GAA7B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBzN,IAAlB,EAAwBP,KAAxB,EAA+B4F,KAA/B,EAAsC;AAClC;AAAM;AAAiBqI,EAAAA,UAAU,GAAGvO,IAAI,CAACiO,GAAL,CAASlG,OAAO,CAAClH,IAAD,CAAhB,EAAwBmM,aAAa,CAAC7F,WAAW,CAACtG,IAAD,CAAZ,EAAoBP,KAApB,CAArC,CAApC;AACA4F,EAAAA,KAAK,GAAGrF,IAAI,CAAC2N,WAAL,CAAiBlO,KAAjB,EAAwBiO,UAAxB,CAAH,GAAyC1N,IAAI,CAACyN,QAAL,CAAchO,KAAd,EAAqBiO,UAArB,CAA9C;AACA,SAAO1N,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4N,QAAT,CAAkB5N,IAAlB,EAAwBP,KAAxB,EAA+B4F,KAA/B,EAAsC;AAClCA,EAAAA,KAAK,GAAGrF,IAAI,CAAC6N,WAAL,CAAiBpO,KAAjB,CAAH,GAA6BO,IAAI,CAAC4N,QAAL,CAAcnO,KAAd,CAAlC;AACA,SAAOO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8N,UAAT,CAAoB9N,IAApB,EAA0BP,KAA1B,EAAiC4F,KAAjC,EAAwC;AACpCA,EAAAA,KAAK,GAAGrF,IAAI,CAAC+N,aAAL,CAAmBtO,KAAnB,CAAH,GAA+BO,IAAI,CAAC8N,UAAL,CAAgBrO,KAAhB,CAApC;AACA,SAAOO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgO,UAAT,CAAoBhO,IAApB,EAA0BP,KAA1B,EAAiC4F,KAAjC,EAAwC;AACpCA,EAAAA,KAAK,GAAGrF,IAAI,CAACiO,aAAL,CAAmBxO,KAAnB,CAAH,GAA+BO,IAAI,CAACgO,UAAL,CAAgBvO,KAAhB,CAApC;AACA,SAAOO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkO,eAAT,CAAyBlO,IAAzB,EAA+BP,KAA/B,EAAsC4F,KAAtC,EAA6C;AACzCA,EAAAA,KAAK,GAAGrF,IAAI,CAACmO,kBAAL,CAAwB1O,KAAxB,CAAH,GAAoCO,IAAI,CAACkO,eAAL,CAAqBzO,KAArB,CAAzC;AACA,SAAOO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoO,OAAT,CAAiBpO,IAAjB,EAAuBP,KAAvB,EAA8B4F,KAA9B,EAAqC;AACjCA,EAAAA,KAAK,GAAGrF,IAAI,CAACqO,UAAL,CAAgB5O,KAAhB,CAAH,GAA4BO,IAAI,CAACoO,OAAL,CAAa3O,KAAb,CAAjC;AACA,SAAOO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASsO,OAAT,CAAiBtO,IAAjB,EAAuBP,KAAvB,EAA8B;AAC1BO,EAAAA,IAAI,CAACsO,OAAL,CAAa7O,KAAb;AACA,SAAOO,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASuO,SAAT,CAAmBvO,IAAnB,EAAyB;AACrB,SAAO,IAAIN,IAAJ,CAASM,IAAI,CAACC,OAAL,EAAT,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuO,OAAT,CAAiBxO,IAAjB,EAAuBgC,IAAvB,EAA6BqD,KAA7B,EAAoC;AAChC;AAAM;AAAiBoJ,EAAAA,KAAK,GAAGF,SAAS,CAACvO,IAAD,CAAxC,CADgC,CAEhC;AACA;;;AACA,UAAQgC,IAAR;AACI,SAAK,MAAL;AACIyL,MAAAA,QAAQ,CAACgB,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAR;;AACJ;;AACA,SAAK,SAAL;AACA,SAAK,OAAL;AACI+I,MAAAA,OAAO,CAACK,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAP;;AACJ;;AACA,SAAK,MAAL;AACA,SAAK,SAAL;AACA,SAAK,KAAL;AACA,SAAK,MAAL;AACIuI,MAAAA,QAAQ,CAACa,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAR;;AACJ;;AACA,SAAK,OAAL;AACIyI,MAAAA,UAAU,CAACW,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAV;;AACJ;;AACA,SAAK,SAAL;AACI2I,MAAAA,UAAU,CAACS,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAV;;AACJ;;AACA,SAAK,SAAL;AACI6I,MAAAA,eAAe,CAACO,KAAD,EAAQ,CAAR,EAAWpJ,KAAX,CAAf;AArBR,GAJgC,CA2BhC;;;AACA,MAAIrD,IAAI,KAAK,MAAb,EAAqB;AACjB0M,IAAAA,kBAAkB,CAACD,KAAD,EAAQ,CAAR,EAAW;AAAEpJ,MAAAA,KAAK,EAALA;AAAF,KAAX,CAAlB;AACH;;AACD,MAAIrD,IAAI,KAAK,SAAb,EAAwB;AACpB2M,IAAAA,eAAe,CAACF,KAAD,EAAQ,CAAR,CAAf;AACH,GAjC+B,CAkChC;;;AACA,MAAIzM,IAAI,KAAK,SAAb,EAAwB;AACpByL,IAAAA,QAAQ,CAACgB,KAAD,EAAQtP,IAAI,CAACE,KAAL,CAAW+H,QAAQ,CAACqH,KAAD,EAAQpJ,KAAR,CAAR,GAAyB,CAApC,IAAyC,CAAjD,EAAoDA,KAApD,CAAR;AACH;;AACD,SAAOoJ,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAe5O,IAAf,EAAqBgC,IAArB,EAA2BqD,KAA3B,EAAkC;AAC9B;AAAI;AAAiBjD,EAAAA,KAAK,GAAGJ,IAA7B,CAD8B,CAE9B;;AACA,MAAII,KAAK,KAAK,MAAd,EAAsB;AAClBA,IAAAA,KAAK,GAAG,KAAR;AACH;;AACD;AAAM;AAAiByM,EAAAA,KAAK,GAAGL,OAAO,CAACxO,IAAD,EAAOoC,KAAP,EAAciD,KAAd,CAAtC;;AACA;AAAM;AAAiByJ,EAAAA,KAAK,GAAGC,GAAG,CAACF,KAAD,EAAQ,CAAR,EAAWzM,KAAK,KAAK,SAAV,GAAsB,MAAtB,GAA+BA,KAA1C,EAAiDiD,KAAjD,CAAlC;;AACA;AAAM;AAAiB2J,EAAAA,GAAG,GAAGC,QAAQ,CAACH,KAAD,EAAQ,CAAR,EAAW,cAAX,EAA2BzJ,KAA3B,CAArC;AACA,SAAO2J,GAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASE,aAAT,GAAyB;AACrB;AACA7K,EAAAA,cAAc,CAAC,KAAD,EAAQ,CAAC,MAAD,EAAS,CAAT,EAAY,KAAZ,CAAR,EAA4B,MAA5B,EAAoC,UAAUrE,IAAV,EAAgB;AAC9D,WAAOmP,YAAY,CAACnP,IAAD,CAAZ,CACFH,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CAFqB,CAMrB;;AACAkC,EAAAA,YAAY,CAAC,WAAD,EAAc,KAAd,CAAZ;AACAkH,EAAAA,aAAa,CAAC,KAAD,EAAQT,SAAR,CAAb;AACAS,EAAAA,aAAa,CAAC,MAAD,EAASf,MAAT,CAAb;AACA8B,EAAAA,aAAa,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD,EAAkB,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAC3DA,IAAAA,MAAM,CAACiF,UAAP,GAAoB/N,KAAK,CAACb,KAAD,CAAzB;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASgF,YAAT,CAAsBnP,IAAtB,EAA4BqF,KAA5B,EAAmC;AAC/B;AAAM;AAAiBuC,EAAAA,KAAK,GAAG,CAAC4G,OAAO,CAACxO,IAAD,EAAO,KAAP,EAAcqF,KAAd,CAAvC;AACA;AAAM;AAAiBwC,EAAAA,KAAK,GAAG,CAAC2G,OAAO,CAACxO,IAAD,EAAO,MAAP,EAAeqF,KAAf,CAAvC;AACA;AAAM;AAAiBgK,EAAAA,QAAQ,GAAGzH,KAAK,GAAGC,KAA1C;AACA;AAAM;AAAiByH,EAAAA,MAAM,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjD;AACA,SAAOnQ,IAAI,CAACoQ,KAAL,CAAWF,QAAQ,GAAGC,MAAtB,IAAgC,CAAvC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,CAAyBvD,IAAzB,EAA+BwD,GAA/B,EAAoCC,GAApC,EAAyC;AACrC;AACA;AAAM;AAAiBC,EAAAA,GAAG,GAAGF,GAAG,GAAGC,GAAN,GAAY,CAAzC,CAFqC,CAGrC;;AACA;AAAM;AAAiBE,EAAAA,KAAK,GAAG,CAAClK,aAAa,CAACuG,IAAD,EAAO,CAAP,EAAU0D,GAAV,CAAb,CAA4B1I,SAA5B,KAA0CwI,GAA1C,GAAgD,CAAjD,IAAsD,CAArF;AACA,SAAO,CAACG,KAAD,GAASD,GAAT,GAAe,CAAtB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4B5D,IAA5B,EAAkC6D,IAAlC,EAAwCC,OAAxC,EAAiDN,GAAjD,EAAsDC,GAAtD,EAA2D;AACvD;AAAM;AAAiBM,EAAAA,YAAY,GAAG,CAAC,IAAID,OAAJ,GAAcN,GAAf,IAAsB,CAA5D;AACA;AAAM;AAAiBQ,EAAAA,UAAU,GAAGT,eAAe,CAACvD,IAAD,EAAOwD,GAAP,EAAYC,GAAZ,CAAnD;AACA;AAAM;AAAiBQ,EAAAA,SAAS,GAAG,IAAI,KAAKJ,IAAI,GAAG,CAAZ,CAAJ,GAAqBE,YAArB,GAAoCC,UAAvE;AACA;AAAI;AAAiBE,EAAAA,OAArB;AACA;AAAI;AAAiBC,EAAAA,YAArB;;AACA,MAAIF,SAAS,IAAI,CAAjB,EAAoB;AAChBC,IAAAA,OAAO,GAAGlE,IAAI,GAAG,CAAjB;AACAmE,IAAAA,YAAY,GAAGpE,UAAU,CAACmE,OAAD,CAAV,GAAsBD,SAArC;AACH,GAHD,MAIK,IAAIA,SAAS,GAAGlE,UAAU,CAACC,IAAD,CAA1B,EAAkC;AACnCkE,IAAAA,OAAO,GAAGlE,IAAI,GAAG,CAAjB;AACAmE,IAAAA,YAAY,GAAGF,SAAS,GAAGlE,UAAU,CAACC,IAAD,CAArC;AACH,GAHI,MAIA;AACDkE,IAAAA,OAAO,GAAGlE,IAAV;AACAmE,IAAAA,YAAY,GAAGF,SAAf;AACH;;AACD,SAAO;AACHjE,IAAAA,IAAI,EAAEkE,OADH;AAEHD,IAAAA,SAAS,EAAEE;AAFR,GAAP;AAIH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBrQ,IAApB,EAA0ByP,GAA1B,EAA+BC,GAA/B,EAAoCrK,KAApC,EAA2C;AACvC;AAAM;AAAiB4K,EAAAA,UAAU,GAAGT,eAAe,CAAClJ,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAAZ,EAA2BoK,GAA3B,EAAgCC,GAAhC,CAAnD;AACA;AAAM;AAAiBI,EAAAA,IAAI,GAAG3Q,IAAI,CAACE,KAAL,CAAW,CAAC8P,YAAY,CAACnP,IAAD,EAAOqF,KAAP,CAAZ,GAA4B4K,UAA5B,GAAyC,CAA1C,IAA+C,CAA1D,IAA+D,CAA7F;AACA;AAAI;AAAiBK,EAAAA,OAArB;AACA;AAAI;AAAiBH,EAAAA,OAArB;;AACA,MAAIL,IAAI,GAAG,CAAX,EAAc;AACVK,IAAAA,OAAO,GAAG7J,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAAX,GAA2B,CAArC;AACAiL,IAAAA,OAAO,GAAGR,IAAI,GAAGS,WAAW,CAACJ,OAAD,EAAUV,GAAV,EAAeC,GAAf,CAA5B;AACH,GAHD,MAIK,IAAII,IAAI,GAAGS,WAAW,CAACjK,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAAZ,EAA2BoK,GAA3B,EAAgCC,GAAhC,CAAtB,EAA4D;AAC7DY,IAAAA,OAAO,GAAGR,IAAI,GAAGS,WAAW,CAACjK,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAAZ,EAA2BoK,GAA3B,EAAgCC,GAAhC,CAA5B;AACAS,IAAAA,OAAO,GAAG7J,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAAX,GAA2B,CAArC;AACH,GAHI,MAIA;AACD8K,IAAAA,OAAO,GAAG7J,WAAW,CAACtG,IAAD,EAAOqF,KAAP,CAArB;AACAiL,IAAAA,OAAO,GAAGR,IAAV;AACH;;AACD,SAAO;AACHA,IAAAA,IAAI,EAAEQ,OADH;AAEHrE,IAAAA,IAAI,EAAEkE;AAFH,GAAP;AAIH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,CAAqBtE,IAArB,EAA2BwD,GAA3B,EAAgCC,GAAhC,EAAqC;AACjC;AAAM;AAAiBO,EAAAA,UAAU,GAAGT,eAAe,CAACvD,IAAD,EAAOwD,GAAP,EAAYC,GAAZ,CAAnD;AACA;AAAM;AAAiBc,EAAAA,cAAc,GAAGhB,eAAe,CAACvD,IAAI,GAAG,CAAR,EAAWwD,GAAX,EAAgBC,GAAhB,CAAvD;AACA,SAAO,CAAC1D,UAAU,CAACC,IAAD,CAAV,GAAmBgE,UAAnB,GAAgCO,cAAjC,IAAmD,CAA1D;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBC,gBAAgB,GAAG,+BAA1C;AACA;AAAM;AAAiBC,mBAAmB,GAAG,wFAAwFC,KAAxF,CAA8F,GAA9F,CAA7C;AACA;AAAM;AAAiBC,wBAAwB,GAAG,kDAAkDD,KAAlD,CAAwD,GAAxD,CAAlD;AACA;AAAM;AAAiBE,qBAAqB,GAAG,2DAA2DF,KAA3D,CAAiE,GAAjE,CAA/C;AACA;AAAM;AAAiBG,0BAA0B,GAAG,8BAA8BH,KAA9B,CAAoC,GAApC,CAApD;AACA;AAAM;AAAiBI,wBAAwB,GAAG,uBAAuBJ,KAAvB,CAA6B,GAA7B,CAAlD;AACA;AAAM;AAAiBK,qBAAqB,GAAG;AAC3CC,EAAAA,GAAG,EAAE,WADsC;AAE3CC,EAAAA,EAAE,EAAE,QAFuC;AAG3CC,EAAAA,CAAC,EAAE,YAHwC;AAI3CC,EAAAA,EAAE,EAAE,cAJuC;AAK3CC,EAAAA,GAAG,EAAE,qBALsC;AAM3CC,EAAAA,IAAI,EAAE;AANqC,CAA/C;AAQA;AAAM;AAAiBC,cAAc,GAAG,IAAxC;AACA;AAAM;AAAiBC,6BAA6B,GAAG,SAAvD;AACA;AAAM;AAAiBC,uBAAuB,GAAG1I,SAAjD;AACA;AAAM;AAAiB2I,kBAAkB,GAAG3I,SAA5C;;IACM4I,M;AACF;AACJ;AACA;AACI,kBAAYxH,MAAZ,EAAoB;AAAA;;AAChB,QAAI,CAAC,CAACA,MAAN,EAAc;AACV,WAAKyH,GAAL,CAASzH,MAAT;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;;WACI,aAAIA,MAAJ,EAAY;AACR;AAAI;AAAiB0H,MAAAA,OAArB;;AACA,WAAKA,OAAL,IAAgB1H,MAAhB,EAAwB;AACpB,YAAI,CAACA,MAAM,CAACtJ,cAAP,CAAsBgR,OAAtB,CAAL,EAAqC;AACjC;AACH;;AACD;AAAM;AAAiBjP,QAAAA,IAAI,GAAGuH,MAAM;AAAC;AAAkB0H,QAAAA,OAAnB,CAApC;AACA;AAAM;AAAiBC,QAAAA,GAAG;AAAG;AAAmB3R,QAAAA,UAAU,CAACyC,IAAD,CAAV,GAAmBiP,OAAnB,cAAiCA,OAAjC,CAAhD;AACA,aAAKC,GAAL;AAAY;AAAkBlP,QAAAA,IAA9B;AACH;;AACD,WAAKmP,OAAL,GAAe5H,MAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAAS2H,GAAT,EAAc9R,IAAd,EAAoBgS,GAApB,EAAyB;AACrB;AAAM;AAAiBzM,MAAAA,MAAM,GAAG,KAAK0M,SAAL,CAAeH,GAAf,KAAuB,KAAKG,SAAL,CAAe,UAAf,CAAvD;AACA,aAAO9R,UAAU,CAACoF,MAAD,CAAV,GAAqBA,MAAM,CAACzF,IAAP,CAAY,IAAZ,EAAkBE,IAAlB,EAAwBgS,GAAxB,CAArB,GAAoDzM,MAA3D;AACH;AACD;AACJ;AACA;AACA;;;;WACI,wBAAeuM,GAAf,EAAoB;AAChB;AAAM;AAAiB/M,MAAAA,MAAM,GAAG,KAAKmN,eAAL,CAAqBJ,GAArB,CAAhC;;AACA;AAAM;AAAiBK,MAAAA,WAAW,GAAG,KAAKD,eAAL,CAAqBJ,GAAG,CAACM,WAAJ,EAArB,CAArC;;AACA,UAAIrN,MAAM,IAAI,CAACoN,WAAf,EAA4B;AACxB,eAAOpN,MAAP;AACH;;AACD,WAAKmN,eAAL,CAAqBJ,GAArB,IAA4BK,WAAW,CAAC1M,OAAZ,CAAoB,kBAApB,EAAwC,UAAU4M,GAAV,EAAe;AAC/E,eAAOA,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP;AACH,OAF2B,CAA5B;AAGA,aAAO,KAAKJ,eAAL,CAAqBJ,GAArB,CAAP;AACH;AACD;AACJ;AACA;;;;SACI,eAAkB;AACd,aAAO,KAAKS,YAAZ;AACH;AACD;AACJ;AACA;AACA;;SACI,aAAgBF,GAAhB,EAAqB;AACjB,WAAKE,YAAL,GAAoBF,GAApB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,iBAAQnT,GAAR,EAAaoF,KAAb,EAAoB;AAChB,aAAO,KAAKkO,QAAL,CAAc/M,OAAd,CAAsB,IAAtB,EAA4BvG,GAAG,CAACW,QAAJ,CAAa,EAAb,CAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAASN,GAAT,EAAc;AACV,aAAOA,GAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oBAAWA,GAAX,EAAgB;AACZ,aAAOA,GAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAaL,GAAb,EAAkBuT,aAAlB,EAAiClT,GAAjC,EAAsCmT,QAAtC,EAAgD;AAC5C;AAAM;AAAiBnN,MAAAA,MAAM,GAAG,KAAKoN,aAAL,CAAmBpT,GAAnB,CAAhC;AACA,aAAQY,UAAU,CAACoF,MAAD,CAAX,GACHA,MAAM,CAACrG,GAAD,EAAMuT,aAAN,EAAqBlT,GAArB,EAA0BmT,QAA1B,CADH,GAEHnN,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsBvG,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAtB,CAFJ;AAGH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW+S,IAAX,EAAiBrN,MAAjB,EAAyB;AACrB;AAAM;AAAiBR,MAAAA,MAAM,GAAG,KAAK4N,aAAL,CAAmBC,IAAI,GAAG,CAAP,GAAW,QAAX,GAAsB,MAAzC,CAAhC;AACA,aAAOzS,UAAU,CAAC4E,MAAD,CAAV,GAAqBA,MAAM,CAACQ,MAAD,CAA3B,GAAsCR,MAAM,CAACU,OAAP,CAAe,KAAf,EAAsBF,MAAtB,CAA7C;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOvF,IAAP,EAAa+E,MAAb,EAAoC;AAAA,UAAfM,KAAe,uEAAP,KAAO;;AAChC,UAAI,CAACrF,IAAL,EAAW;AACP,eAAOO,OAAO,CAAC,KAAKsS,OAAN,CAAP,GACD,KAAKA,OADJ,GAED,KAAKA,OAAL,CAAaC,UAFnB;AAGH;;AACD,UAAIvS,OAAO,CAAC,KAAKsS,OAAN,CAAX,EAA2B;AACvB,eAAO,KAAKA,OAAL,CAAazL,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAArB,CAAP;AACH;;AACD;AAAM;AAAiByM,MAAAA,GAAG,GAAG,CAAC,KAAKe,OAAL,CAAaE,QAAb,IAAyBtC,gBAA1B,EAA4CuC,IAA5C,CAAiDjO,MAAjD,IACvB,QADuB,GAEvB,YAFN;AAGA,aAAO,KAAK8N,OAAL,CAAaf,GAAb,EAAkB1K,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAA1B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAYrF,IAAZ,EAAkB+E,MAAlB,EAAyC;AAAA,UAAfM,KAAe,uEAAP,KAAO;;AACrC,UAAI,CAACrF,IAAL,EAAW;AACP,eAAOO,OAAO,CAAC,KAAK0S,YAAN,CAAP,GACD,KAAKA,YADJ,GAED,KAAKA,YAAL,CAAkBH,UAFxB;AAGH;;AACD,UAAIvS,OAAO,CAAC,KAAK0S,YAAN,CAAX,EAAgC;AAC5B,eAAO,KAAKA,YAAL,CAAkB7L,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAA1B,CAAP;AACH;;AACD;AAAM;AAAiByM,MAAAA,GAAG,GAAGrB,gBAAgB,CAACuC,IAAjB,CAAsBjO,MAAtB,IAAgC,QAAhC,GAA2C,YAAxE;AACA,aAAO,KAAKkO,YAAL,CAAkBnB,GAAlB,EAAuB1K,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAY6N,SAAZ,EAAuBnO,MAAvB,EAA+BoO,MAA/B,EAAuC;AACnC;AAAI;AAAiBnT,MAAAA,IAArB;AACA;AAAI;AAAiBkJ,MAAAA,KAArB;;AACA,UAAI,KAAKkK,iBAAT,EAA4B;AACxB,eAAO,KAAKC,sBAAL,CAA4BH,SAA5B,EAAuCnO,MAAvC,EAA+CoO,MAA/C,CAAP;AACH;;AACD,UAAI,CAAC,KAAKG,YAAV,EAAwB;AACpB,aAAKA,YAAL,GAAoB,EAApB;AACA,aAAKC,gBAAL,GAAwB,EAAxB;AACA,aAAKC,iBAAL,GAAyB,EAAzB;AACH,OAVkC,CAWnC;AACA;AACA;;;AACA;AAAI;AAAiBrO,MAAAA,CAArB;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB;AACAnF,QAAAA,IAAI,GAAG,IAAIN,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAAS,IAAT,EAAeX,CAAf,CAAT,CAAP;;AACA,YAAIgO,MAAM,IAAI,CAAC,KAAKI,gBAAL,CAAsBpO,CAAtB,CAAf,EAAyC;AACrC;AAAM;AAAiB0N,UAAAA,OAAO,GAAG,KAAKnG,MAAL,CAAY1M,IAAZ,EAAkB,EAAlB,EAAsB,IAAtB,EAA4ByF,OAA5B,CAAoC,GAApC,EAAyC,EAAzC,CAAjC;;AACA;AAAM;AAAiBgO,UAAAA,YAAY,GAAG,KAAKhH,WAAL,CAAiBzM,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B,EAAiCyF,OAAjC,CAAyC,GAAzC,EAA8C,EAA9C,CAAtC;;AACA,eAAK8N,gBAAL,CAAsBpO,CAAtB,IAA2B,IAAIoE,MAAJ,YAAesJ,OAAf,QAA2B,GAA3B,CAA3B;AACA,eAAKW,iBAAL,CAAuBrO,CAAvB,IAA4B,IAAIoE,MAAJ,YAAekK,YAAf,QAAgC,GAAhC,CAA5B;AACH;;AACD,YAAI,CAACN,MAAD,IAAW,CAAC,KAAKG,YAAL,CAAkBnO,CAAlB,CAAhB,EAAsC;AAClC+D,UAAAA,KAAK,cAAO,KAAKwD,MAAL,CAAY1M,IAAZ,EAAkB,EAAlB,EAAsB,IAAtB,CAAP,eAAuC,KAAKyM,WAAL,CAAiBzM,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B,CAAvC,CAAL;AACA,eAAKsT,YAAL,CAAkBnO,CAAlB,IAAuB,IAAIoE,MAAJ,CAAWL,KAAK,CAACzD,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAX,EAAmC,GAAnC,CAAvB;AACH,SAZoB,CAarB;;;AACA,YAAI0N,MAAM,IAAIpO,MAAM,KAAK,MAArB;AAAgC;AAAkB,aAAKwO,gBAAL,CAAsBpO,CAAtB,CAAnB,CAA8C6N,IAA9C,CAAmDE,SAAnD,CAAnC,EAAkG;AAC9F,iBAAO/N,CAAP;AACH;;AACD,YAAIgO,MAAM,IAAIpO,MAAM,KAAK,KAArB;AAA+B;AAAkB,aAAKyO,iBAAL,CAAuBrO,CAAvB,CAAnB,CAA+C6N,IAA/C,CAAoDE,SAApD,CAAlC,EAAkG;AAC9F,iBAAO/N,CAAP;AACH;;AACD,YAAI,CAACgO,MAAD,IAAW,KAAKG,YAAL,CAAkBnO,CAAlB,EAAqB6N,IAArB,CAA0BE,SAA1B,CAAf,EAAqD;AACjD,iBAAO/N,CAAP;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,qBAAYiE,QAAZ,EAAsB;AAClB,UAAI,KAAKgK,iBAAT,EAA4B;AACxB,YAAI,CAAC1S,UAAU,CAAC,IAAD,EAAO,cAAP,CAAf,EAAuC;AACnC,eAAKgT,kBAAL;AACH;;AACD,YAAItK,QAAJ,EAAc;AACV,iBAAO,KAAKuK,kBAAZ;AACH;;AACD,eAAO,KAAKC,YAAZ;AACH;;AACD,UAAI,CAAClT,UAAU,CAAC,IAAD,EAAO,cAAP,CAAf,EAAuC;AACnC,aAAKkT,YAAL,GAAoBlC,kBAApB;AACH;;AACD,aAAO,KAAKiC,kBAAL,IAA2BvK,QAA3B,GACH,KAAKuK,kBADF,GACuB,KAAKC,YADnC;AAEH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBxK,QAAjB,EAA2B;AACvB,UAAI,KAAKgK,iBAAT,EAA4B;AACxB,YAAI,CAAC1S,UAAU,CAAC,IAAD,EAAO,cAAP,CAAf,EAAuC;AACnC,eAAKgT,kBAAL;AACH;;AACD,YAAItK,QAAJ,EAAc;AACV,iBAAO,KAAKyK,uBAAZ;AACH;;AACD,eAAO,KAAKC,iBAAZ;AACH;;AACD,UAAI,CAACpT,UAAU,CAAC,IAAD,EAAO,mBAAP,CAAf,EAA4C;AACxC,aAAKoT,iBAAL,GAAyBrC,uBAAzB;AACH;;AACD,aAAO,KAAKoC,uBAAL,IAAgCzK,QAAhC,GACH,KAAKyK,uBADF,GAC4B,KAAKC,iBADxC;AAEH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,cAAK9T,IAAL,EAAWqF,KAAX,EAAkB;AACd,aAAOgL,UAAU,CAACrQ,IAAD,EAAO,KAAK+T,KAAL,CAAWtE,GAAlB,EAAuB,KAAKsE,KAAL,CAAWrE,GAAlC,EAAuCrK,KAAvC,CAAV,CAAwDyK,IAA/D;AACH;AACD;AACJ;AACA;;;;WACI,0BAAiB;AACb,aAAO,KAAKiE,KAAL,CAAWtE,GAAlB;AACH;AACD;AACJ;AACA;;;;WACI,0BAAiB;AACb,aAAO,KAAKsE,KAAL,CAAWrE,GAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAAS1P,IAAT,EAAe+E,MAAf,EAAuBM,KAAvB,EAA8B;AAC1B,UAAI,CAACrF,IAAL,EAAW;AACP,eAAOO,OAAO,CAAC,KAAKyT,SAAN,CAAP,GACD,KAAKA,SADJ,GAED,KAAKA,SAAL,CAAelB,UAFrB;AAGH;;AACD,UAAIvS,OAAO,CAAC,KAAKyT,SAAN,CAAX,EAA6B;AACzB,eAAO,KAAKA,SAAL,CAAehN,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAArB,CAAP;AACH;;AACD;AAAM;AAAiB4O,MAAAA,IAAI,GAAG,KAAKD,SAAL,CAAejB,QAAf,CAAwBC,IAAxB,CAA6BjO,MAA7B,IACxB,QADwB,GAExB,YAFN;;AAGA,aAAO,KAAKiP,SAAL,CAAeC,IAAf,EAAqBjN,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAYrF,IAAZ,EAAkB+E,MAAlB,EAA0BM,KAA1B,EAAiC;AAC7B,aAAOrF,IAAI,GAAG,KAAKkU,YAAL,CAAkBlN,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAAxB,CAAH,GAA4C,KAAK6O,YAA5D;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAclU,IAAd,EAAoB+E,MAApB,EAA4BM,KAA5B,EAAmC;AAC/B,aAAOrF,IAAI,GAAG,KAAKmU,cAAL,CAAoBnN,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAA1B,CAAH,GAA8C,KAAK8O,cAA9D;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAcC,WAAd,EAA2BrP,MAA3B,EAAmCoO,MAAnC,EAA2C;AACvC;AAAI;AAAiBhO,MAAAA,CAArB;AACA;AAAI;AAAiB+D,MAAAA,KAArB;;AACA,UAAI,KAAKmL,mBAAT,EAA8B;AAC1B,eAAO,KAAKC,qBAAL,CAA2BF,WAA3B,EAAwCrP,MAAxC,EAAgDoO,MAAhD,CAAP;AACH;;AACD,UAAI,CAAC,KAAKoB,cAAV,EAA0B;AACtB,aAAKA,cAAL,GAAsB,EAAtB;AACA,aAAKC,iBAAL,GAAyB,EAAzB;AACA,aAAKC,mBAAL,GAA2B,EAA3B;AACA,aAAKC,kBAAL,GAA0B,EAA1B;AACH;;AACD,WAAKvP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB;AACA;AACA;AAAM;AAAiBnF,QAAAA,IAAI,GAAG2U,YAAY,CAAC,IAAIjV,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAAS,IAAT,EAAe,CAAf,CAAT,CAAD,EAA8BX,CAA9B,EAAiC,IAAjC,EAAuC,IAAvC,CAA1C;;AACA,YAAIgO,MAAM,IAAI,CAAC,KAAKuB,kBAAL,CAAwBvP,CAAxB,CAAf,EAA2C;AACvC,eAAKuP,kBAAL,CAAwBvP,CAAxB,IAA6B,IAAIoE,MAAJ,YAAe,KAAKqL,QAAL,CAAc5U,IAAd,EAAoB,EAApB,EAAwB,IAAxB,EAA8ByF,OAA9B,CAAsC,GAAtC,EAA2C,KAA3C,CAAf,QAAqE,GAArE,CAA7B;AACA,eAAKgP,mBAAL,CAAyBtP,CAAzB,IAA8B,IAAIoE,MAAJ,YAAe,KAAKsL,aAAL,CAAmB7U,IAAnB,EAAyB,EAAzB,EAA6B,IAA7B,EAAmCyF,OAAnC,CAA2C,GAA3C,EAAgD,KAAhD,CAAf,QAA0E,GAA1E,CAA9B;AACA,eAAK+O,iBAAL,CAAuBrP,CAAvB,IAA4B,IAAIoE,MAAJ,YAAe,KAAKuL,WAAL,CAAiB9U,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B,EAAiCyF,OAAjC,CAAyC,GAAzC,EAA8C,KAA9C,CAAf,QAAwE,GAAxE,CAA5B;AACH;;AACD,YAAI,CAAC,KAAK8O,cAAL,CAAoBpP,CAApB,CAAL,EAA6B;AACzB+D,UAAAA,KAAK,cAAO,KAAK0L,QAAL,CAAc5U,IAAd,EAAoB,EAApB,EAAwB,IAAxB,CAAP,eAAyC,KAAK6U,aAAL,CAAmB7U,IAAnB,EAAyB,EAAzB,EAA6B,IAA7B,CAAzC,eAAgF,KAAK8U,WAAL,CAAiB9U,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B,CAAhF,CAAL;AACA,eAAKuU,cAAL,CAAoBpP,CAApB,IAAyB,IAAIoE,MAAJ,CAAWL,KAAK,CAACzD,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAX,EAAmC,GAAnC,CAAzB;AACH;;AACD,YAAI,CAAClF,OAAO,CAAC,KAAKmU,kBAAN,CAAR,IACG,CAACnU,OAAO,CAAC,KAAKkU,mBAAN,CADX,IAEG,CAAClU,OAAO,CAAC,KAAKiU,iBAAN,CAFX,IAGG,CAACjU,OAAO,CAAC,KAAKgU,cAAN,CAHf,EAGsC;AAClC;AACH,SAlBmB,CAmBpB;;;AACA,YAAIpB,MAAM,IAAIpO,MAAM,KAAK,MAArB,IAA+B,KAAK2P,kBAAL,CAAwBvP,CAAxB,EAA2B6N,IAA3B,CAAgCoB,WAAhC,CAAnC,EAAiF;AAC7E,iBAAOjP,CAAP;AACH,SAFD,MAGK,IAAIgO,MAAM,IAAIpO,MAAM,KAAK,KAArB,IAA8B,KAAK0P,mBAAL,CAAyBtP,CAAzB,EAA4B6N,IAA5B,CAAiCoB,WAAjC,CAAlC,EAAiF;AAClF,iBAAOjP,CAAP;AACH,SAFI,MAGA,IAAIgO,MAAM,IAAIpO,MAAM,KAAK,IAArB,IAA6B,KAAKyP,iBAAL,CAAuBrP,CAAvB,EAA0B6N,IAA1B,CAA+BoB,WAA/B,CAAjC,EAA8E;AAC/E,iBAAOjP,CAAP;AACH,SAFI,MAGA,IAAI,CAACgO,MAAD,IAAW,KAAKoB,cAAL,CAAoBpP,CAApB,EAAuB6N,IAAvB,CAA4BoB,WAA5B,CAAf,EAAyD;AAC1D,iBAAOjP,CAAP;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,uBAAciE,QAAd,EAAwB;AACpB,UAAI,KAAKiL,mBAAT,EAA8B;AAC1B,YAAI,CAAC3T,UAAU,CAAC,IAAD,EAAO,gBAAP,CAAf,EAAyC;AACrC,eAAKqU,oBAAL;AACH;;AACD,YAAI3L,QAAJ,EAAc;AACV,iBAAO,KAAK4L,oBAAZ;AACH,SAFD,MAGK;AACD,iBAAO,KAAKC,cAAZ;AACH;AACJ,OAVD,MAWK;AACD,YAAI,CAACvU,UAAU,CAAC,IAAD,EAAO,gBAAP,CAAf,EAAyC;AACrC,eAAKuU,cAAL,GAAsBlM,SAAtB;AACH;;AACD,eAAO,KAAKiM,oBAAL,IAA6B5L,QAA7B,GACH,KAAK4L,oBADF,GACyB,KAAKC,cADrC;AAEH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,4BAAmB7L,QAAnB,EAA6B;AACzB,UAAI,KAAKiL,mBAAT,EAA8B;AAC1B,YAAI,CAAC3T,UAAU,CAAC,IAAD,EAAO,gBAAP,CAAf,EAAyC;AACrC,eAAKqU,oBAAL;AACH;;AACD,YAAI3L,QAAJ,EAAc;AACV,iBAAO,KAAK8L,yBAAZ;AACH,SAFD,MAGK;AACD,iBAAO,KAAKC,mBAAZ;AACH;AACJ,OAVD,MAWK;AACD,YAAI,CAACzU,UAAU,CAAC,IAAD,EAAO,qBAAP,CAAf,EAA8C;AAC1C,eAAKyU,mBAAL,GAA2BpM,SAA3B;AACH;;AACD,eAAO,KAAKmM,yBAAL,IAAkC9L,QAAlC,GACH,KAAK8L,yBADF,GAC8B,KAAKC,mBAD1C;AAEH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB/L,QAAjB,EAA2B;AACvB,UAAI,KAAKiL,mBAAT,EAA8B;AAC1B,YAAI,CAAC3T,UAAU,CAAC,IAAD,EAAO,gBAAP,CAAf,EAAyC;AACrC,eAAKqU,oBAAL;AACH;;AACD,YAAI3L,QAAJ,EAAc;AACV,iBAAO,KAAKgM,uBAAZ;AACH,SAFD,MAGK;AACD,iBAAO,KAAKC,iBAAZ;AACH;AACJ,OAVD,MAWK;AACD,YAAI,CAAC3U,UAAU,CAAC,IAAD,EAAO,mBAAP,CAAf,EAA4C;AACxC,eAAK2U,iBAAL,GAAyBtM,SAAzB;AACH;;AACD,eAAO,KAAKqM,uBAAL,IAAgChM,QAAhC,GACH,KAAKgM,uBADF,GAC4B,KAAKC,iBADxC;AAEH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,cAAK7U,KAAL,EAAY;AACR;AACA;AACA,aAAOA,KAAK,CAAC2B,WAAN,GAAoBmT,MAApB,CAA2B,CAA3B,MAAkC,GAAzC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAASC,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;AAC9B,UAAIF,KAAK,GAAG,EAAZ,EAAgB;AACZ,eAAOE,OAAO,GAAG,IAAH,GAAU,IAAxB;AACH;;AACD,aAAOA,OAAO,GAAG,IAAH,GAAU,IAAxB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,wBAAe3D,GAAf,EAAoB;AAChB,WAAKI,eAAL,GAAuB,KAAKA,eAAL,GAAuB,KAAKA,eAA5B,GAA8ClB,qBAArE;AACA;AAAM;AAAiBjM,MAAAA,MAAM,GAAG,KAAKmN,eAAL,CAAqBJ,GAArB,CAAhC;;AACA;AAAM;AAAiBK,MAAAA,WAAW,GAAG,KAAKD,eAAL,CAAqBJ,GAAG,CAACM,WAAJ,EAArB,CAArC;;AACA,UAAIrN,MAAM,IAAI,CAACoN,WAAf,EAA4B;AACxB,eAAOpN,MAAP;AACH;;AACD,WAAKmN,eAAL,CAAqBJ,GAArB,IAA4BK,WAAW,CAAC1M,OAAZ,CAAoB,kBAApB,EAAwC,UAAC4M,GAAD,EAAS;AACzE,eAAOA,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP;AACH,OAF2B,CAA5B;AAGA,aAAO,KAAKJ,eAAL,CAAqBJ,GAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gCAAuBoB,SAAvB,EAAkCnO,MAAlC,EAA0CoO,MAA1C,EAAkD;AAC9C;AAAM;AAAiBuC,MAAAA,GAAG,GAAGxC,SAAS,CAACyC,iBAAV,EAA7B;AACA;AAAI;AAAiBxQ,MAAAA,CAArB;AACA;AAAI;AAAiByQ,MAAAA,EAArB;AACA;AAAI;AAAiBC,MAAAA,GAArB;;AACA,UAAI,CAAC,KAAKvC,YAAV,EAAwB;AACpB;AACA,aAAKA,YAAL,GAAoB,EAApB;AACA,aAAKC,gBAAL,GAAwB,EAAxB;AACA,aAAKC,iBAAL,GAAyB,EAAzB;;AACA,aAAKrO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoB,EAAEA,CAAtB,EAAyB;AACrB0Q,UAAAA,GAAG,GAAG,IAAInW,IAAJ,CAAS,IAAT,EAAeyF,CAAf,CAAN;AACA,eAAKqO,iBAAL,CAAuBrO,CAAvB,IAA4B,KAAKsH,WAAL,CAAiBoJ,GAAjB,EAAsB,EAAtB,EAA0BF,iBAA1B,EAA5B;AACA,eAAKpC,gBAAL,CAAsBpO,CAAtB,IAA2B,KAAKuH,MAAL,CAAYmJ,GAAZ,EAAiB,EAAjB,EAAqBF,iBAArB,EAA3B;AACH;AACJ;;AACD,UAAIxC,MAAJ,EAAY;AACR,YAAIpO,MAAM,KAAK,KAAf,EAAsB;AAClB6Q,UAAAA,EAAE;AAAI;AAAkB,eAAKpC,iBAAxB,CAA4CsC,OAA5C,CAAoDJ,GAApD,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;;AACDA,QAAAA,EAAE;AAAI;AAAkB,aAAKrC,gBAAxB,CAA2CuC,OAA3C,CAAmDJ,GAAnD,CAAL;AACA,eAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;;AACD,UAAI7Q,MAAM,KAAK,KAAf,EAAsB;AAClB6Q,QAAAA,EAAE;AAAI;AAAkB,aAAKpC,iBAAxB,CAA4CsC,OAA5C,CAAoDJ,GAApD,CAAL;;AACA,YAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,iBAAOA,EAAP;AACH;;AACDA,QAAAA,EAAE;AAAI;AAAkB,aAAKrC,gBAAxB,CAA2CuC,OAA3C,CAAmDJ,GAAnD,CAAL;AACA,eAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;;AACDA,MAAAA,EAAE;AAAI;AAAkB,WAAKrC,gBAAxB,CAA2CuC,OAA3C,CAAmDJ,GAAnD,CAAL;;AACA,UAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,eAAOA,EAAP;AACH;;AACDA,MAAAA,EAAE;AAAI;AAAkB,WAAKpC,iBAAxB,CAA4CsC,OAA5C,CAAoDJ,GAApD,CAAL;AACA,aAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,+BAAsBxB,WAAtB,EAAmCrP,MAAnC,EAA2CoO,MAA3C,EAAmD;AAC/C;AAAI;AAAiByC,MAAAA,EAArB;AACA;AAAM;AAAiBF,MAAAA,GAAG,GAAGtB,WAAW,CAACuB,iBAAZ,EAA7B;;AACA,UAAI,CAAC,KAAKpB,cAAV,EAA0B;AACtB,aAAKA,cAAL,GAAsB,EAAtB;AACA,aAAKE,mBAAL,GAA2B,EAA3B;AACA,aAAKD,iBAAL,GAAyB,EAAzB;AACA;AAAI;AAAiBrP,QAAAA,CAArB;;AACA,aAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmB,EAAEA,CAArB,EAAwB;AACpB;AAAM;AAAiBnF,UAAAA,IAAI,GAAG2U,YAAY,CAAC,IAAIjV,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAAS,IAAT,EAAe,CAAf,CAAT,CAAD,EAA8BX,CAA9B,EAAiC,IAAjC,EAAuC,IAAvC,CAA1C;AACA,eAAKqP,iBAAL,CAAuBrP,CAAvB,IAA4B,KAAK2P,WAAL,CAAiB9U,IAAjB,EAAuB2V,iBAAvB,EAA5B;AACA,eAAKlB,mBAAL,CAAyBtP,CAAzB,IAA8B,KAAK0P,aAAL,CAAmB7U,IAAnB,EAAyB2V,iBAAzB,EAA9B;AACA,eAAKpB,cAAL,CAAoBpP,CAApB,IAAyB,KAAKyP,QAAL,CAAc5U,IAAd,EAAoB,EAApB,EAAwB2V,iBAAxB,EAAzB;AACH;AACJ;;AACD,UAAI,CAACpV,OAAO,CAAC,KAAKgU,cAAN,CAAR,IACG,CAAChU,OAAO,CAAC,KAAKkU,mBAAN,CADX,IAEG,CAAClU,OAAO,CAAC,KAAKiU,iBAAN,CAFf,EAEyC;AACrC;AACH;;AACD,UAAIrB,MAAJ,EAAY;AACR,YAAIpO,MAAM,KAAK,MAAf,EAAuB;AACnB6Q,UAAAA,EAAE,GAAG,KAAKrB,cAAL,CAAoBuB,OAApB,CAA4BJ,GAA5B,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH,SAHD,MAIK,IAAI7Q,MAAM,KAAK,KAAf,EAAsB;AACvB6Q,UAAAA,EAAE,GAAG,KAAKnB,mBAAL,CAAyBqB,OAAzB,CAAiCJ,GAAjC,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH,SAHI,MAIA;AACDA,UAAAA,EAAE,GAAG,KAAKpB,iBAAL,CAAuBsB,OAAvB,CAA+BJ,GAA/B,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;AACJ,OAbD,MAcK;AACD,YAAI7Q,MAAM,KAAK,MAAf,EAAuB;AACnB6Q,UAAAA,EAAE,GAAG,KAAKrB,cAAL,CAAoBuB,OAApB,CAA4BJ,GAA5B,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKnB,mBAAL,CAAyBqB,OAAzB,CAAiCJ,GAAjC,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKpB,iBAAL,CAAuBsB,OAAvB,CAA+BJ,GAA/B,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH,SAXD,MAYK,IAAI7Q,MAAM,KAAK,KAAf,EAAsB;AACvB6Q,UAAAA,EAAE,GAAG,KAAKnB,mBAAL,CAAyBqB,OAAzB,CAAiCJ,GAAjC,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKrB,cAAL,CAAoBuB,OAApB,CAA4BJ,GAA5B,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKpB,iBAAL,CAAuBsB,OAAvB,CAA+BJ,GAA/B,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH,SAXI,MAYA;AACDA,UAAAA,EAAE,GAAG,KAAKpB,iBAAL,CAAuBsB,OAAvB,CAA+BJ,GAA/B,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKrB,cAAL,CAAoBuB,OAApB,CAA4BJ,GAA5B,CAAL;;AACA,cAAIE,EAAE,KAAK,CAAC,CAAZ,EAAe;AACX,mBAAOA,EAAP;AACH;;AACDA,UAAAA,EAAE,GAAG,KAAKnB,mBAAL,CAAyBqB,OAAzB,CAAiCJ,GAAjC,CAAL;AACA,iBAAOE,EAAE,KAAK,CAAC,CAAR,GAAYA,EAAZ,GAAiB,IAAxB;AACH;AACJ;AACJ;AACD;AACJ;AACA;;;;WACI,8BAAqB;AACjB;AAAM;AAAiBG,MAAAA,WAAW,GAAG,EAArC;AACA;AAAM;AAAiBC,MAAAA,UAAU,GAAG,EAApC;AACA;AAAM;AAAiBC,MAAAA,WAAW,GAAG,EAArC;AACA;AAAI;AAAiBjW,MAAAA,IAArB;AACA;AAAI;AAAiBmF,MAAAA,CAArB;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB;AACAnF,QAAAA,IAAI,GAAG,IAAIN,IAAJ,CAAS,IAAT,EAAeyF,CAAf,CAAP;AACA4Q,QAAAA,WAAW,CAACG,IAAZ,CAAiB,KAAKzJ,WAAL,CAAiBzM,IAAjB,EAAuB,EAAvB,CAAjB;AACAgW,QAAAA,UAAU,CAACE,IAAX,CAAgB,KAAKxJ,MAAL,CAAY1M,IAAZ,EAAkB,EAAlB,CAAhB;AACAiW,QAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKxJ,MAAL,CAAY1M,IAAZ,EAAkB,EAAlB,CAAjB;AACAiW,QAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKzJ,WAAL,CAAiBzM,IAAjB,EAAuB,EAAvB,CAAjB;AACH,OAbgB,CAcjB;AACA;;;AACA+V,MAAAA,WAAW,CAACI,IAAZ,CAAiBC,SAAjB;AACAJ,MAAAA,UAAU,CAACG,IAAX,CAAgBC,SAAhB;AACAH,MAAAA,WAAW,CAACE,IAAZ,CAAiBC,SAAjB;;AACA,WAAKjR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB4Q,QAAAA,WAAW,CAAC5Q,CAAD,CAAX,GAAiBsE,WAAW,CAACsM,WAAW,CAAC5Q,CAAD,CAAZ,CAA5B;AACA6Q,QAAAA,UAAU,CAAC7Q,CAAD,CAAV,GAAgBsE,WAAW,CAACuM,UAAU,CAAC7Q,CAAD,CAAX,CAA3B;AACH;;AACD,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB8Q,QAAAA,WAAW,CAAC9Q,CAAD,CAAX,GAAiBsE,WAAW,CAACwM,WAAW,CAAC9Q,CAAD,CAAZ,CAA5B;AACH;;AACD,WAAKyO,YAAL,GAAoB,IAAIrK,MAAJ,aAAgB0M,WAAW,CAACI,IAAZ,CAAiB,GAAjB,CAAhB,QAA0C,GAA1C,CAApB;AACA,WAAKvC,iBAAL,GAAyB,KAAKF,YAA9B;AACA,WAAKD,kBAAL,GAA0B,IAAIpK,MAAJ,aAAgByM,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAAhB,QAAyC,GAAzC,CAA1B;AACA,WAAKxC,uBAAL,GAA+B,IAAItK,MAAJ,aAAgBwM,WAAW,CAACM,IAAZ,CAAiB,GAAjB,CAAhB,QAA0C,GAA1C,CAA/B;AACH;AACD;AACJ;AACA;;;;WACI,gCAAuB;AACnB;AAAM;AAAiBC,MAAAA,SAAS,GAAG,EAAnC;AACA;AAAM;AAAiBP,MAAAA,WAAW,GAAG,EAArC;AACA;AAAM;AAAiBC,MAAAA,UAAU,GAAG,EAApC;AACA;AAAM;AAAiBC,MAAAA,WAAW,GAAG,EAArC;AACA;AAAI;AAAiB9Q,MAAAA,CAArB;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB;AACA;AACA;AAAM;AAAiBnF,QAAAA,IAAI,GAAG2U,YAAY,CAAC,IAAIjV,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAAS,IAAT,EAAe,CAAf,CAAT,CAAD,EAA8BX,CAA9B,EAAiC,IAAjC,EAAuC,IAAvC,CAA1C;AACA;AAAM;AAAiBoR,QAAAA,IAAI,GAAG,KAAKzB,WAAL,CAAiB9U,IAAjB,CAA9B;AACA;AAAM;AAAiBwW,QAAAA,MAAM,GAAG,KAAK3B,aAAL,CAAmB7U,IAAnB,CAAhC;AACA;AAAM;AAAiByW,QAAAA,KAAK,GAAG,KAAK7B,QAAL,CAAc5U,IAAd,CAA/B;AACAsW,QAAAA,SAAS,CAACJ,IAAV,CAAeK,IAAf;AACAR,QAAAA,WAAW,CAACG,IAAZ,CAAiBM,MAAjB;AACAR,QAAAA,UAAU,CAACE,IAAX,CAAgBO,KAAhB;AACAR,QAAAA,WAAW,CAACC,IAAZ,CAAiBK,IAAjB;AACAN,QAAAA,WAAW,CAACC,IAAZ,CAAiBM,MAAjB;AACAP,QAAAA,WAAW,CAACC,IAAZ,CAAiBO,KAAjB;AACH,OAnBkB,CAoBnB;AACA;;;AACAH,MAAAA,SAAS,CAACH,IAAV,CAAeC,SAAf;AACAL,MAAAA,WAAW,CAACI,IAAZ,CAAiBC,SAAjB;AACAJ,MAAAA,UAAU,CAACG,IAAX,CAAgBC,SAAhB;AACAH,MAAAA,WAAW,CAACE,IAAZ,CAAiBC,SAAjB;;AACA,WAAKjR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB4Q,QAAAA,WAAW,CAAC5Q,CAAD,CAAX,GAAiBsE,WAAW,CAACsM,WAAW,CAAC5Q,CAAD,CAAZ,CAA5B;AACA6Q,QAAAA,UAAU,CAAC7Q,CAAD,CAAV,GAAgBsE,WAAW,CAACuM,UAAU,CAAC7Q,CAAD,CAAX,CAA3B;AACA8Q,QAAAA,WAAW,CAAC9Q,CAAD,CAAX,GAAiBsE,WAAW,CAACwM,WAAW,CAAC9Q,CAAD,CAAZ,CAA5B;AACH;;AACD,WAAK8P,cAAL,GAAsB,IAAI1L,MAAJ,aAAgB0M,WAAW,CAACI,IAAZ,CAAiB,GAAjB,CAAhB,QAA0C,GAA1C,CAAtB;AACA,WAAKlB,mBAAL,GAA2B,KAAKF,cAAhC;AACA,WAAKI,iBAAL,GAAyB,KAAKJ,cAA9B;AACA,WAAKD,oBAAL,GAA4B,IAAIzL,MAAJ,aAAgByM,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAAhB,QAAyC,GAAzC,CAA5B;AACA,WAAKnB,yBAAL,GAAiC,IAAI3L,MAAJ,aAAgBwM,WAAW,CAACM,IAAZ,CAAiB,GAAjB,CAAhB,QAA0C,GAA1C,CAAjC;AACA,WAAKjB,uBAAL,GAA+B,IAAI7L,MAAJ,aAAgB+M,SAAS,CAACD,IAAV,CAAe,GAAf,CAAhB,QAAwC,GAAxC,CAA/B;AACH;;;;;AAEL;AACA;AACA;AACA;AACA;;;AACA,SAASD,SAAT,CAAmBzV,CAAnB,EAAsBC,CAAtB,EAAyB;AACrB,SAAOA,CAAC,CAACM,MAAF,GAAWP,CAAC,CAACO,MAApB;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBwV,eAAe,GAAG;AACrCC,EAAAA,OAAO,EAAE,eAD4B;AAErCC,EAAAA,OAAO,EAAE,kBAF4B;AAGrCC,EAAAA,QAAQ,EAAE,cAH2B;AAIrCC,EAAAA,OAAO,EAAE,mBAJ4B;AAKrCC,EAAAA,QAAQ,EAAE,qBAL2B;AAMrCC,EAAAA,QAAQ,EAAE;AAN2B,CAAzC;AASA;AACA;AACA;AACA;;AACA;AAAM;AAAiBC,kBAAkB,GAAG,cAA5C;AACA;AAAM;AAAiBC,iBAAiB,GAAG;AACvCzH,EAAAA,GAAG,EAAE,CADkC;AAEvC;AACAC,EAAAA,GAAG,EAAE,CAHkC,CAGhC;;AAHgC,CAA3C;AAKA;AAAM;AAAiByH,0BAA0B,GAAG,eAApD;AACA;AAAM;AAAiBC,mBAAmB,GAAG;AACzCC,EAAAA,MAAM,EAAE,OADiC;AAEzCC,EAAAA,IAAI,EAAE,QAFmC;AAGzClR,EAAAA,CAAC,EAAE,eAHsC;AAIzCmR,EAAAA,EAAE,EAAE,YAJqC;AAKzC3R,EAAAA,CAAC,EAAE,UALsC;AAMzC4R,EAAAA,EAAE,EAAE,YANqC;AAOzCtR,EAAAA,CAAC,EAAE,SAPsC;AAQzCuR,EAAAA,EAAE,EAAE,UARqC;AASzC5R,EAAAA,CAAC,EAAE,OATsC;AAUzC6R,EAAAA,EAAE,EAAE,SAVqC;AAWzCvR,EAAAA,CAAC,EAAE,SAXsC;AAYzCwR,EAAAA,EAAE,EAAE,WAZqC;AAazChS,EAAAA,CAAC,EAAE,QAbsC;AAczCiS,EAAAA,EAAE,EAAE;AAdqC,CAA7C;AAgBA;AAAM;AAAiBC,UAAU,GAAG;AAChCC,EAAAA,QAAQ,EAAEpB,eADsB;AAEhCqB,EAAAA,cAAc,EAAE/G,qBAFgB;AAGhCgH,EAAAA,WAAW,EAAEf,kBAHmB;AAIhCzS,EAAAA,OAAO,EAAE+M,cAJuB;AAKhC0G,EAAAA,sBAAsB,EAAEzG,6BALQ;AAMhC0G,EAAAA,YAAY,EAAEd,mBANkB;AAOhC1K,EAAAA,MAAM,EAAEgE,mBAPwB;AAQhCjE,EAAAA,WAAW,EAAEmE,wBARmB;AAShCd,EAAAA,IAAI,EAAEoH,iBAT0B;AAUhCtC,EAAAA,QAAQ,EAAE/D,qBAVsB;AAWhCiE,EAAAA,WAAW,EAAE/D,wBAXmB;AAYhC8D,EAAAA,aAAa,EAAE/D,0BAZiB;AAahCqH,EAAAA,aAAa,EAAEhB;AAbiB,CAApC;AAgBA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASiB,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,WAAvC,EAAoD;AAChD;AAAM;AAAiBC,EAAAA,GAAG,GAAGrZ,IAAI,CAACiO,GAAL,CAASiL,MAAM,CAACnX,MAAhB,EAAwBoX,MAAM,CAACpX,MAA/B,CAA7B;AACA;AAAM;AAAiBuX,EAAAA,UAAU,GAAGtZ,IAAI,CAACuE,GAAL,CAAS2U,MAAM,CAACnX,MAAP,GAAgBoX,MAAM,CAACpX,MAAhC,CAApC;AACA;AAAI;AAAiBwX,EAAAA,KAAK,GAAG,CAA7B;AACA;AAAI;AAAiBvT,EAAAA,CAArB;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqT,GAAhB,EAAqBrT,CAAC,EAAtB,EAA0B;AACtB,QAAKoT,WAAW,IAAIF,MAAM,CAAClT,CAAD,CAAN,KAAcmT,MAAM,CAACnT,CAAD,CAApC,IACI,CAACoT,WAAD,IAAgBlX,KAAK,CAACgX,MAAM,CAAClT,CAAD,CAAP,CAAL,KAAqB9D,KAAK,CAACiX,MAAM,CAACnT,CAAD,CAAP,CADlD,EACgE;AAC5DuT,MAAAA,KAAK;AACR;AACJ;;AACD,SAAOA,KAAK,GAAGD,UAAf;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASE,QAAT,GAAoB;AAChBtU,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAOgU,OAAO,CAAC5Y,IAAD,EAAO4E,IAAI,CAACC,MAAZ,CAAP,CACFhF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB;AACxD,WAAO6Y,UAAU,CAAC7Y,IAAD,CAAV,CACFH,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CALgB,CAShB;;AACAkC,EAAAA,YAAY,CAAC,MAAD,EAAS,GAAT,CAAZ;AACAA,EAAAA,YAAY,CAAC,SAAD,EAAY,GAAZ,CAAZ,CAXgB,CAYhB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAmC,EAAAA,iBAAiB,CAAC,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,CAAD,EAAyB,UAAU5J,KAAV,EAAiBsP,IAAjB,EAAuB3F,MAAvB,EAA+B7F,KAA/B,EAAsC;AAC5EwL,IAAAA,IAAI,CAACxL,KAAK,CAACL,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAJ,GAA2B5C,KAAK,CAACb,KAAD,CAAhC;AACA,WAAO2J,MAAP;AACH,GAHgB,CAAjB,CAjBgB,CAqBhB;AACA;AACA;AACA;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyO,OAAT,CAAiB5Y,IAAjB,EAAoD;AAAA,MAA7B6E,MAA6B,uEAApBiU,SAAS,EAAW;AAAA,MAAPzT,KAAO;AAChD,SAAOR,MAAM,CAACiL,IAAP,CAAY9P,IAAZ,EAAkBqF,KAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASwT,UAAT,CAAoB7Y,IAApB,EAA0BqF,KAA1B,EAAiC;AAC7B,SAAOgL,UAAU,CAACrQ,IAAD,EAAO,CAAP,EAAU,CAAV,EAAaqF,KAAb,CAAV,CAA8ByK,IAArC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASiJ,YAAT,GAAwB;AACpB1U,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAP,EAAyB,IAAzB,EAA+B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC/D;AACA,WAAO,CAACoU,WAAW,CAAChZ,IAAD,EAAO4E,IAAI,CAACC,MAAZ,CAAX,GAAiC,GAAlC,EAAuChF,QAAvC,EAAP;AACH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAP,EAAyB,IAAzB,EAA+B,UAAUrE,IAAV,EAAgB;AACzD;AACA,WAAO,CAACiZ,cAAc,CAACjZ,IAAD,CAAd,GAAuB,GAAxB,EAA6BH,QAA7B,EAAP;AACH,GAHa,CAAd;AAIAqZ,EAAAA,sBAAsB,CAAC,MAAD,EAASC,oBAAT,CAAtB;AACAD,EAAAA,sBAAsB,CAAC,OAAD,EAAUC,oBAAV,CAAtB;AACAD,EAAAA,sBAAsB,CAAC,MAAD,EAASE,uBAAT,CAAtB;AACAF,EAAAA,sBAAsB,CAAC,OAAD,EAAUE,uBAAV,CAAtB,CAZoB,CAapB;;AACArX,EAAAA,YAAY,CAAC,UAAD,EAAa,IAAb,CAAZ;AACAA,EAAAA,YAAY,CAAC,aAAD,EAAgB,IAAhB,CAAZ,CAfoB,CAgBpB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAML,WAAN,CAAb;AACAK,EAAAA,aAAa,CAAC,GAAD,EAAML,WAAN,CAAb;AACAK,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,MAAD,EAASR,SAAT,EAAoBN,MAApB,CAAb;AACAc,EAAAA,aAAa,CAAC,MAAD,EAASR,SAAT,EAAoBN,MAApB,CAAb;AACAc,EAAAA,aAAa,CAAC,OAAD,EAAUP,SAAV,EAAqBN,MAArB,CAAb;AACAa,EAAAA,aAAa,CAAC,OAAD,EAAUP,SAAV,EAAqBN,MAArB,CAAb;AACAgC,EAAAA,iBAAiB,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,OAA1B,CAAD,EAAqC,UAAU5J,KAAV,EAAiBsP,IAAjB,EAAuB3F,MAAvB,EAA+B7F,KAA/B,EAAsC;AACxFwL,IAAAA,IAAI,CAACxL,KAAK,CAACL,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAJ,GAA2B5C,KAAK,CAACb,KAAD,CAAhC;AACA,WAAO2J,MAAP;AACH,GAHgB,CAAjB;AAIAC,EAAAA,iBAAiB,CAAC,CAAC,IAAD,EAAO,IAAP,CAAD,EAAe,UAAU5J,KAAV,EAAiBsP,IAAjB,EAAuB3F,MAAvB,EAA+B7F,KAA/B,EAAsC;AAClEwL,IAAAA,IAAI,CAACxL,KAAD,CAAJ,GAAcwH,iBAAiB,CAACtL,KAAD,CAA/B;AACA,WAAO2J,MAAP;AACH,GAHgB,CAAjB;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS+O,sBAAT,CAAgC5U,KAAhC,EAAuC+U,MAAvC,EAA+C;AAC3ChV,EAAAA,cAAc,CAAC,IAAD,EAAO,CAACC,KAAD,EAAQA,KAAK,CAACpD,MAAd,EAAsB,KAAtB,CAAP,EAAqC,IAArC,EAA2CmY,MAA3C,CAAd;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASF,oBAAT,CAA8BnZ,IAA9B,EAAoC4E,IAApC,EAA0C;AACtC,SAAOoU,WAAW,CAAChZ,IAAD,EAAO4E,IAAI,CAACC,MAAZ,CAAX,CAA+BhF,QAA/B,EAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASuZ,uBAAT,CAAiCpZ,IAAjC,EAAuC;AACnC,SAAOiZ,cAAc,CAACjZ,IAAD,CAAd,CAAqBH,QAArB,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmZ,WAAT,CAAqBhZ,IAArB,EAAwD;AAAA,MAA7B6E,MAA6B,uEAApBiU,SAAS,EAAW;AAAA,MAAPzT,KAAO;AACpD,SAAOgL,UAAU,CAACrQ,IAAD,EAAO6E,MAAM,CAAC6C,cAAP,EAAP,EAAgC7C,MAAM,CAACyU,cAAP,EAAhC,EAAyDjU,KAAzD,CAAV,CAA0E4G,IAAjF;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASgN,cAAT,CAAwBjZ,IAAxB,EAA8BqF,KAA9B,EAAqC;AACjC,SAAOgL,UAAU,CAACrQ,IAAD,EAAO,CAAP,EAAU,CAAV,EAAaqF,KAAb,CAAV,CAA8B4G,IAArC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASsN,YAAT,GAAwB;AACpB;AACAlV,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAOA,IAAI,CAACS,KAAL,GAAa,KAAb,GAAqB,EAA5B;AACH,GAFa,CAAd;AAGAhB,EAAAA,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACnD,WAAOA,IAAI,CAACS,KAAL,GAAa,4BAAb,GAA4C,EAAnD;AACH,GAFa,CAAd;AAGH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASmU,aAAT,GAAyB;AACrB;AACAnV,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB;AAC5C,WAAOsH,IAAI,CAACtH,IAAD,CAAJ,CACFH,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB;AAC5C,WAAOA,IAAI,CAACuH,OAAL,GACF1H,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CANqB,CAUrB;;AACAoJ,EAAAA,aAAa,CAAC,GAAD,EAAML,WAAN,CAAb;AACAK,EAAAA,aAAa,CAAC,GAAD,EAAMH,cAAN,CAAb;AACAkB,EAAAA,aAAa,CAAC,GAAD,EAAM,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAC/CA,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,CAASga,UAAU,CAAClZ,KAAD,CAAV,GAAoB,IAA7B,CAAZ;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIAH,EAAAA,aAAa,CAAC,GAAD,EAAM,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAC/CA,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,CAAS2B,KAAK,CAACb,KAAD,CAAd,CAAZ;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASwP,UAAT,GAAsB;AAClB;AACAtV,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAOgC,UAAU,CAAC5G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAV,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CAFkB,CAMlB;;AACAkC,EAAAA,YAAY,CAAC,QAAD,EAAW,GAAX,CAAZ,CAPkB,CAQlB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACA+B,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc9G,MAAd,CAAb;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAAS0W,WAAT,GAAuB;AACnB;AACAvV,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAOiV,UAAU,CAAC7Z,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAV,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CAFmB,CAMnB;;AACAkC,EAAAA,YAAY,CAAC,SAAD,EAAY,GAAZ,CAAZ,CAPmB,CAQnB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMjB,MAAN,CAAb;AACAgC,EAAAA,aAAa,CAAC,GAAD,EAAM,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AAC/CnF,IAAAA,KAAK,CAAClC,KAAD,CAAL,GAAe,CAACzB,KAAK,CAACb,KAAD,CAAL,GAAe,CAAhB,IAAqB,CAApC;AACA,WAAO2J,MAAP;AACH,GAHY,CAAb;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS0P,UAAT,CAAoB7Z,IAApB,EAAyC;AAAA,MAAfqF,KAAe,uEAAP,KAAO;AACrC,SAAOlG,IAAI,CAACC,IAAL,CAAU,CAACgI,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAR,GAAwB,CAAzB,IAA8B,CAAxC,CAAP;AACH,C,CACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyU,oBAAT,CAA8BxV,KAA9B,EAAqCyV,SAArC,EAAgD;AAC5C1V,EAAAA,cAAc,CAACC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUtE,IAAV,EAAgBmK,MAAhB,EAAwB;AACtD;AAAI;AAAiB7E,IAAAA,MAAM,GAAG0U,YAAY,CAACha,IAAD,EAAO;AAAEia,MAAAA,MAAM,EAAE9P,MAAM,CAAC9E,KAAjB;AAAwB6U,MAAAA,OAAO,EAAE/P,MAAM,CAAC7E;AAAxC,KAAP,CAA1C;AACA;AAAI;AAAiB1B,IAAAA,IAAI,GAAG,GAA5B;;AACA,QAAI0B,MAAM,GAAG,CAAb,EAAgB;AACZA,MAAAA,MAAM,GAAG,CAACA,MAAV;AACA1B,MAAAA,IAAI,GAAG,GAAP;AACH;;AACD,WAAOA,IAAI,GAAGN,QAAQ,CAAC,CAAC,EAAEgC,MAAM,GAAG,EAAX,CAAF,EAAkB,CAAlB,CAAf,GAAsCyU,SAAtC,GAAkDzW,QAAQ,CAAC,CAAC,CAAEgC,MAAH,GAAa,EAAd,EAAkB,CAAlB,CAAjE;AACH,GARa,CAAd;AASH;AACD;AACA;AACA;;;AACA,SAAS6U,UAAT,GAAsB;AAClBL,EAAAA,oBAAoB,CAAC,GAAD,EAAM,GAAN,CAApB;AACAA,EAAAA,oBAAoB,CAAC,IAAD,EAAO,EAAP,CAApB,CAFkB,CAGlB;;AACA7Q,EAAAA,aAAa,CAAC,GAAD,EAAMJ,gBAAN,CAAb;AACAI,EAAAA,aAAa,CAAC,IAAD,EAAOJ,gBAAP,CAAb;AACAmB,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACvDA,IAAAA,MAAM,CAACiQ,OAAP,GAAiB,IAAjB;AACAjQ,IAAAA,MAAM,CAACkQ,IAAP,GAAcC,gBAAgB,CAACzR,gBAAD,EAAmBrI,KAAnB,CAA9B;AACA,WAAO2J,MAAP;AACH,GAJY,CAAb;AAKH,C,CACD;AACA;AACA;AACA;;;AACA;AAAM;AAAiBoQ,WAAW,GAAG,iBAArC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,gBAAT,CAA0BE,OAA1B,EAAmCjb,GAAnC,EAAwC;AACpC;AAAM;AAAiBkb,EAAAA,OAAO,GAAG,CAAClb,GAAG,IAAI,EAAR,EAAY0F,KAAZ,CAAkBuV,OAAlB,CAAjC;;AACA,MAAIC,OAAO,KAAK,IAAhB,EAAsB;AAClB,WAAO,IAAP;AACH;;AACD;AAAM;AAAiBC,EAAAA,KAAK,GAAGD,OAAO,CAACA,OAAO,CAACvZ,MAAR,GAAiB,CAAlB,CAAtC;AACA;AAAM;AAAiByZ,EAAAA,KAAK,GAAGD,KAAK,CAACzV,KAAN,CAAYsV,WAAZ,KAA4B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3D;AACA;AAAM;AAAiB/E,EAAAA,OAAO,GAAGzJ,QAAQ,CAAC4O,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,EAAzB,GAA8BtZ,KAAK,CAACsZ,KAAK,CAAC,CAAD,CAAN,CAApE;;AACA;AAAM;AAAiBC,EAAAA,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,GAAmBnF,OAAnB,GAA6B,CAACA,OAA5D;;AACA,SAAOA,OAAO,KAAK,CAAZ,GAAgB,CAAhB,GAAoBoF,IAA3B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBra,KAAzB,EAAgCR,IAAhC,EAAmD;AAAA,MAAbmK,MAAa,uEAAJ,EAAI;;AAC/C,MAAI,CAACA,MAAM,CAAC8P,MAAZ,EAAoB;AAChB,WAAOzZ,KAAP;AACH;;AACD;AAAM;AAAiBwO,EAAAA,GAAG,GAAGT,SAAS,CAACvO,IAAD,CAAtC,CAJ+C,CAK/C;;AACA;AAAM;AAAiB8a,EAAAA,UAAU,GAAG,CAAC3Q,MAAM,CAAC+P,OAAP,IAAkB,CAAnB,IAAwB,KAA5D;AACA;AAAM;AAAiBtH,EAAAA,IAAI,GAAGpS,KAAK,CAAC+G,OAAN,KAAkByH,GAAG,CAACzH,OAAJ,EAAlB,GAAkCuT,UAAhE,CAP+C,CAQ/C;;AACA9L,EAAAA,GAAG,CAACV,OAAJ,CAAYU,GAAG,CAACzH,OAAJ,KAAgBqL,IAA5B,EAT+C,CAU/C;AACA;;AACA,SAAO5D,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS+L,aAAT,CAAuB/a,IAAvB,EAA6B;AACzB;AACA;AACA,SAAO,CAACb,IAAI,CAACoQ,KAAL,CAAWvP,IAAI,CAACgb,iBAAL,KAA2B,EAAtC,CAAD,GAA6C,EAApD;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAShB,YAAT,CAAsBha,IAAtB,EAAyC;AAAA,MAAbmK,MAAa,uEAAJ,EAAI;;AACrC;AAAM;AAAiB+P,EAAAA,OAAO,GAAG/P,MAAM,CAAC+P,OAAP,IAAkB,CAAnD;;AACA,SAAO/P,MAAM,CAAC8P,MAAP,GAAgBC,OAAhB,GAA0Ba,aAAa,CAAC/a,IAAD,CAA9C;AACH,C,CACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASib,UAAT,GAAsB;AAClB;AACA5W,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAO8B,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAV,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CAFkB,CAMlB;;AACAkC,EAAAA,YAAY,CAAC,QAAD,EAAW,GAAX,CAAZ,CAPkB,CAQlB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACA+B,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc/G,MAAd,CAAb;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASiY,eAAT,GAA2B;AACvB7W,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAO,CAAC,CAAC,EAAEkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,GAAtC,CAAF,EAA8CxF,QAA9C,CAAuD,EAAvD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAP,EAAyB,IAAzB,EAA+B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC/D,WAAO,CAAC,CAAC,EAAEkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,EAAtC,CAAF,EAA6CxF,QAA7C,CAAsD,EAAtD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAP,EAA0B,IAA1B,EAAgC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAChE,WAAQkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAhB,CAAoCxF,QAApC,CAA6C,EAA7C,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,MAAD,EAAS,CAAT,EAAY,KAAZ,CAAP,EAA2B,IAA3B,EAAiC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACjE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,EAArC,EAAyCxF,QAAzC,CAAkD,EAAlD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,OAAD,EAAU,CAAV,EAAa,KAAb,CAAP,EAA4B,IAA5B,EAAkC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,GAArC,EAA0CxF,QAA1C,CAAmD,EAAnD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,QAAD,EAAW,CAAX,EAAc,KAAd,CAAP,EAA6B,IAA7B,EAAmC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACnE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,IAArC,EAA2CxF,QAA3C,CAAoD,EAApD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,SAAD,EAAY,CAAZ,EAAe,KAAf,CAAP,EAA8B,IAA9B,EAAoC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,KAArC,EAA4CxF,QAA5C,CAAqD,EAArD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,UAAD,EAAa,CAAb,EAAgB,KAAhB,CAAP,EAA+B,IAA/B,EAAqC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACrE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,MAArC,EAA6CxF,QAA7C,CAAsD,EAAtD,CAAP;AACH,GAFa,CAAd;AAGAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,CAAd,EAAiB,KAAjB,CAAP,EAAgC,IAAhC,EAAsC,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACtE,WAAO,CAACkC,eAAe,CAAC9G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,GAAoC,OAArC,EAA8CxF,QAA9C,CAAuD,EAAvD,CAAP;AACH,GAFa,CAAd,CAzBuB,CA4BvB;;AACAkC,EAAAA,YAAY,CAAC,aAAD,EAAgB,IAAhB,CAAZ,CA7BuB,CA8BvB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMT,SAAN,EAAiBR,MAAjB,CAAb;AACAiB,EAAAA,aAAa,CAAC,IAAD,EAAOT,SAAP,EAAkBP,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,KAAD,EAAQT,SAAR,EAAmBN,MAAnB,CAAb;AACA;AAAI;AAAiB5D,EAAAA,KAArB;;AACA,OAAKA,KAAK,GAAG,MAAb,EAAqBA,KAAK,CAACpD,MAAN,IAAgB,CAArC,EAAwCoD,KAAK,IAAI,GAAjD,EAAsD;AAClD2E,IAAAA,aAAa,CAAC3E,KAAD,EAAQqE,aAAR,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASwS,OAAT,CAAiB3a,KAAjB,EAAwBwE,KAAxB,EAA+BmF,MAA/B,EAAuC;AACnCnF,IAAAA,KAAK,CAAC7B,WAAD,CAAL,GAAqB9B,KAAK,CAACqY,UAAU,aAAMlZ,KAAN,EAAV,GAA2B,IAA5B,CAA1B;AACA,WAAO2J,MAAP;AACH;;AACD,OAAK7F,KAAK,GAAG,GAAb,EAAkBA,KAAK,CAACpD,MAAN,IAAgB,CAAlC,EAAqCoD,KAAK,IAAI,GAA9C,EAAmD;AAC/C0F,IAAAA,aAAa,CAAC1F,KAAD,EAAQ6W,OAAR,CAAb;AACH,GAlDsB,CAmDvB;;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASC,QAAT,GAAoB;AAChB;AACJ;AACA;AACA;AACA;AACI,WAASC,OAAT,CAAiBrb,IAAjB,EAAuBqF,KAAvB,EAA8B;AAC1B,WAAOmB,QAAQ,CAACxG,IAAD,EAAOqF,KAAP,CAAR,GAAwB,EAAxB,IAA8B,EAArC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI,WAASiW,OAAT,CAAiBtb,IAAjB,EAAuBqF,KAAvB,EAA8B;AAC1B,WAAOmB,QAAQ,CAACxG,IAAD,EAAOqF,KAAP,CAAR,IAAyB,EAAhC;AACH;;AACDhB,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAO4B,QAAQ,CAACxG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAR,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAOyW,OAAO,CAACrb,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAP,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,GAAD,EAAM,CAAC,IAAD,EAAO,CAAP,EAAU,KAAV,CAAN,EAAwB,IAAxB,EAA8B,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAC9D,WAAO0W,OAAO,CAACtb,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAP,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpD;AAAM;AAAiB2W,IAAAA,EAAE,GAAGF,OAAO,CAACrb,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAnC;;AACA;AAAM;AAAiBmW,IAAAA,GAAG,GAAGlY,QAAQ,CAACoD,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA,qBAAUkW,EAAV,SAAeC,GAAf;AACH,GAJa,CAAd;AAKAnX,EAAAA,cAAc,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACtD;AAAM;AAAiB2W,IAAAA,EAAE,GAAGF,OAAO,CAACrb,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAnC;;AACA;AAAM;AAAiBmW,IAAAA,GAAG,GAAGlY,QAAQ,CAACoD,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA;AAAM;AAAiBoW,IAAAA,GAAG,GAAGnY,QAAQ,CAACsD,UAAU,CAAC5G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA,qBAAUkW,EAAV,SAAeC,GAAf,SAAqBC,GAArB;AACH,GALa,CAAd;AAMApX,EAAAA,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpD;AAAM;AAAiB8W,IAAAA,EAAE,GAAGlV,QAAQ,CAACxG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAApC;;AACA;AAAM;AAAiBmW,IAAAA,GAAG,GAAGlY,QAAQ,CAACoD,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA,qBAAUqW,EAAV,SAAeF,GAAf;AACH,GAJa,CAAd;AAKAnX,EAAAA,cAAc,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACtD;AAAM;AAAiB8W,IAAAA,EAAE,GAAGlV,QAAQ,CAACxG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAApC;;AACA;AAAM;AAAiBmW,IAAAA,GAAG,GAAGlY,QAAQ,CAACoD,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA;AAAM;AAAiBoW,IAAAA,GAAG,GAAGnY,QAAQ,CAACsD,UAAU,CAAC5G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAX,EAA+B,CAA/B,CAArC;;AACA,qBAAUqW,EAAV,SAAeF,GAAf,SAAqBC,GAArB;AACH,GALa,CAAd;AAMA;AACJ;AACA;AACA;AACA;;AACI,WAASlQ,QAAT,CAAkBjH,KAAlB,EAAyBqX,SAAzB,EAAoC;AAChCtX,IAAAA,cAAc,CAACC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUtE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpD,aAAOA,IAAI,CAACC,MAAL,CAAY0G,QAAZ,CAAqB/E,QAAQ,CAACxG,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAA7B,EAAiDqB,UAAU,CAAC1G,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAA3D,EAA+EsW,SAA/E,CAAP;AACH,KAFa,CAAd;AAGH;;AACDpQ,EAAAA,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR;AACAA,EAAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,CAAR,CA9DgB,CA+DhB;;AACAxJ,EAAAA,YAAY,CAAC,MAAD,EAAS,GAAT,CAAZ;AACA;AACJ;AACA;AACA;AACA;;AACI,WAAS6Z,aAAT,CAAuBxS,QAAvB,EAAiCvE,MAAjC,EAAyC;AACrC,WAAOA,MAAM,CAACgX,cAAd;AACH;;AACD5S,EAAAA,aAAa,CAAC,GAAD,EAAM2S,aAAN,CAAb;AACA3S,EAAAA,aAAa,CAAC,GAAD,EAAM2S,aAAN,CAAb;AACA3S,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,IAAD,EAAOZ,SAAP,EAAkBJ,MAAlB,CAAb;AACAgB,EAAAA,aAAa,CAAC,KAAD,EAAQX,SAAR,CAAb;AACAW,EAAAA,aAAa,CAAC,OAAD,EAAUV,SAAV,CAAb;AACAU,EAAAA,aAAa,CAAC,KAAD,EAAQX,SAAR,CAAb;AACAW,EAAAA,aAAa,CAAC,OAAD,EAAUV,SAAV,CAAb;AACAyB,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAchH,IAAd,CAAb;AACAgH,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACvD;AAAM;AAAiB2R,IAAAA,MAAM,GAAGza,KAAK,CAACb,KAAD,CAArC;AACAwE,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc8Y,MAAM,KAAK,EAAX,GAAgB,CAAhB,GAAoBA,MAAlC;AACA,WAAO3R,MAAP;AACH,GAJY,CAAb;AAKAH,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACtDA,IAAAA,MAAM,CAAC4R,KAAP,GAAe5R,MAAM,CAAC0C,OAAP,CAAemP,IAAf,CAAoBxb,KAApB,CAAf;AACA2J,IAAAA,MAAM,CAAC8R,SAAP,GAAmBzb,KAAnB;AACA,WAAO2J,MAAP;AACH,GAJY,CAAb;AAKAH,EAAAA,aAAa,CAAC,CAAC,GAAD,EAAM,IAAN,CAAD,EAAc,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACvDnF,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc3B,KAAK,CAACb,KAAD,CAAnB;AACAkL,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwB+R,OAAxB,GAAkC,IAAlC;AACA,WAAO/R,MAAP;AACH,GAJY,CAAb;AAKAH,EAAAA,aAAa,CAAC,KAAD,EAAQ,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACjD;AAAM;AAAiBgS,IAAAA,GAAG,GAAG3b,KAAK,CAACU,MAAN,GAAe,CAA5C;AACA8D,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc3B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAa,CAAb,EAAgBkY,GAAhB,CAAD,CAAnB;AACAnX,IAAAA,KAAK,CAAC/B,MAAD,CAAL,GAAgB5B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAakY,GAAb,CAAD,CAArB;AACAzQ,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwB+R,OAAxB,GAAkC,IAAlC;AACA,WAAO/R,MAAP;AACH,GANY,CAAb;AAOAH,EAAAA,aAAa,CAAC,OAAD,EAAU,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACnD;AAAM;AAAiBiS,IAAAA,IAAI,GAAG5b,KAAK,CAACU,MAAN,GAAe,CAA7C;AACA;AAAM;AAAiBmb,IAAAA,IAAI,GAAG7b,KAAK,CAACU,MAAN,GAAe,CAA7C;AACA8D,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc3B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAa,CAAb,EAAgBmY,IAAhB,CAAD,CAAnB;AACApX,IAAAA,KAAK,CAAC/B,MAAD,CAAL,GAAgB5B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAamY,IAAb,EAAmB,CAAnB,CAAD,CAArB;AACApX,IAAAA,KAAK,CAAC9B,MAAD,CAAL,GAAgB7B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAaoY,IAAb,CAAD,CAArB;AACA3Q,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwB+R,OAAxB,GAAkC,IAAlC;AACA,WAAO/R,MAAP;AACH,GARY,CAAb;AASAH,EAAAA,aAAa,CAAC,KAAD,EAAQ,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACjD;AAAM;AAAiBgS,IAAAA,GAAG,GAAG3b,KAAK,CAACU,MAAN,GAAe,CAA5C;AACA8D,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc3B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAa,CAAb,EAAgBkY,GAAhB,CAAD,CAAnB;AACAnX,IAAAA,KAAK,CAAC/B,MAAD,CAAL,GAAgB5B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAakY,GAAb,CAAD,CAArB;AACA,WAAOhS,MAAP;AACH,GALY,CAAb;AAMAH,EAAAA,aAAa,CAAC,OAAD,EAAU,UAAUxJ,KAAV,EAAiBwE,KAAjB,EAAwBmF,MAAxB,EAAgC;AACnD;AAAM;AAAiBiS,IAAAA,IAAI,GAAG5b,KAAK,CAACU,MAAN,GAAe,CAA7C;AACA;AAAM;AAAiBmb,IAAAA,IAAI,GAAG7b,KAAK,CAACU,MAAN,GAAe,CAA7C;AACA8D,IAAAA,KAAK,CAAChC,IAAD,CAAL,GAAc3B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAa,CAAb,EAAgBmY,IAAhB,CAAD,CAAnB;AACApX,IAAAA,KAAK,CAAC/B,MAAD,CAAL,GAAgB5B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAamY,IAAb,EAAmB,CAAnB,CAAD,CAArB;AACApX,IAAAA,KAAK,CAAC9B,MAAD,CAAL,GAAgB7B,KAAK,CAACb,KAAK,CAACyD,MAAN,CAAaoY,IAAb,CAAD,CAArB;AACA,WAAOlS,MAAP;AACH,GAPY,CAAb;AAQH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBmS,OAAO,GAAG,EAAjC;AACA;AAAM;AAAiBC,cAAc,GAAG,EAAxC;AACA;AAAI;AAAiBC,YAArB;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyB3K,GAAzB,EAA8B;AAC1B,SAAOA,GAAG,GAAGA,GAAG,CAAC3P,WAAJ,GAAkBsD,OAAlB,CAA0B,GAA1B,EAA+B,GAA/B,CAAH,GAAyCqM,GAAnD;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS4K,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AAAI;AAAiBC,EAAAA,IAArB;AACA;AAAI;AAAiB/X,EAAAA,MAArB;AACA;AAAI;AAAiBM,EAAAA,CAAC,GAAG,CAAzB;;AACA,SAAOA,CAAC,GAAGwX,KAAK,CAACzb,MAAjB,EAAyB;AACrB;AAAM;AAAiByP,IAAAA,KAAK,GAAG8L,eAAe,CAACE,KAAK,CAACxX,CAAD,CAAN,CAAf,CAA0BwL,KAA1B,CAAgC,GAAhC,CAA/B;AACA;AAAI;AAAiBnL,IAAAA,CAAC,GAAGmL,KAAK,CAACzP,MAA/B;AACA0b,IAAAA,IAAI,GAAGH,eAAe,CAACE,KAAK,CAACxX,CAAC,GAAG,CAAL,CAAN,CAAtB;AACAyX,IAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAACjM,KAAL,CAAW,GAAX,CAAH,GAAqB,IAAhC;;AACA,WAAOnL,CAAC,GAAG,CAAX,EAAc;AACVX,MAAAA,MAAM,GAAGgY,UAAU,CAAClM,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAe9M,CAAf,EAAkB6Q,IAAlB,CAAuB,GAAvB,CAAD,CAAnB;;AACA,UAAIxR,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;;AACD,UAAI+X,IAAI,IAAIA,IAAI,CAAC1b,MAAL,IAAesE,CAAvB,IAA4B4S,aAAa,CAACzH,KAAD,EAAQiM,IAAR,EAAc,IAAd,CAAb,IAAoCpX,CAAC,GAAG,CAAxE,EAA2E;AACvE;AACA;AACH;;AACDA,MAAAA,CAAC;AACJ;;AACDL,IAAAA,CAAC;AACJ;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS2X,YAAT,CAAsBC,YAAtB,EAAoCC,WAApC,EAAiD;AAC7C;AAAM;AAAiBhO,EAAAA,GAAG,GAAGrP,MAAM,CAACwN,MAAP,CAAc,EAAd,EAAkB4P,YAAlB,CAA7B;;AACA,OAAK;AAAM;AAAiBE,EAAAA,SAA5B,IAAyCD,WAAzC,EAAsD;AAClD,QAAI,CAACtc,UAAU,CAACsc,WAAD,EAAcC,SAAd,CAAf,EAAyC;AACrC;AACH;;AACD,QAAInc,QAAQ,CAACic,YAAY,CAACE,SAAD,CAAb,CAAR,IAAqCnc,QAAQ,CAACkc,WAAW,CAACC,SAAD,CAAZ,CAAjD,EAA2E;AACvEjO,MAAAA,GAAG,CAACiO,SAAD,CAAH,GAAiB,EAAjB;AACAtd,MAAAA,MAAM,CAACwN,MAAP,CAAc6B,GAAG,CAACiO,SAAD,CAAjB,EAA8BF,YAAY,CAACE,SAAD,CAA1C;AACAtd,MAAAA,MAAM,CAACwN,MAAP,CAAc6B,GAAG,CAACiO,SAAD,CAAjB,EAA8BD,WAAW,CAACC,SAAD,CAAzC;AACH,KAJD,MAKK,IAAID,WAAW,CAACC,SAAD,CAAX,IAA0B,IAA9B,EAAoC;AACrCjO,MAAAA,GAAG,CAACiO,SAAD,CAAH,GAAiBD,WAAW,CAACC,SAAD,CAA5B;AACH,KAFI,MAGA;AACD,aAAOjO,GAAG,CAACiO,SAAD,CAAV;AACH;AACJ;;AACD;AAAI;AAAiBC,EAAAA,UAArB;;AACA,OAAKA,UAAL,IAAmBH,YAAnB,EAAiC;AAC7B,QAAIrc,UAAU,CAACqc,YAAD,EAAeG,UAAf,CAAV,IACA,CAACxc,UAAU,CAACsc,WAAD,EAAcE,UAAd,CADX,IAEApc,QAAQ,CAACic,YAAY;AAAC;AAAkBG,IAAAA,UAAnB,CAAb,CAFZ,EAE2D;AACvD;AACAlO,MAAAA,GAAG;AAAC;AAAkBkO,MAAAA,UAAnB,CAAH,GAAqCvd,MAAM,CAACwN,MAAP,CAAc,EAAd,EAAkB6B,GAAG;AAAC;AAAkBkO,MAAAA,UAAnB,CAArB,CAArC;AACH;AACJ;;AACD,SAAOlO,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS6N,UAAT,CAAoBM,IAApB,EAA0B;AACtB;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,MAAI,CAACb,OAAO,CAACa,IAAD,CAAZ,EAAoB;AAChB;AACAC,IAAAA,OAAO,CAACC,KAAR,sDAA2DF,IAA3D,yBAFgB,CAGhB;AACH;;AACD,SAAOb,OAAO,CAACa,IAAD,CAAd;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASG,kBAAT,CAA4BxL,GAA5B,EAAiCyL,MAAjC,EAAyC;AACrC;AAAI;AAAiBC,EAAAA,IAArB;;AACA,MAAI1L,GAAJ,EAAS;AACL,QAAI1Q,WAAW,CAACmc,MAAD,CAAf,EAAyB;AACrBC,MAAAA,IAAI,GAAG1E,SAAS,CAAChH,GAAD,CAAhB;AACH,KAFD,MAGK,IAAIxS,QAAQ,CAACwS,GAAD,CAAZ,EAAmB;AACpB0L,MAAAA,IAAI,GAAGC,YAAY,CAAC3L,GAAD,EAAMyL,MAAN,CAAnB;AACH;;AACD,QAAIC,IAAJ,EAAU;AACNhB,MAAAA,YAAY,GAAGgB,IAAf;AACH;AACJ;;AACD,SAAOhB,YAAY,IAAIA,YAAY,CAACkB,KAApC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASD,YAAT,CAAsBN,IAAtB,EAA4BhT,MAA5B,EAAoC;AAChC,MAAIA,MAAM,KAAK,IAAf,EAAqB;AACjB;AACA,WAAOmS,OAAO,CAACa,IAAD,CAAd;AACAX,IAAAA,YAAY,GAAG1D,SAAS,CAAC,IAAD,CAAxB;AACA,WAAO,IAAP;AACH;;AACD,MAAI,CAAC3O,MAAL,EAAa;AACT;AACH;;AACD;AAAI;AAAiB4S,EAAAA,YAAY,GAAGlF,UAApC;AACA1N,EAAAA,MAAM,CAACwT,IAAP,GAAcR,IAAd;;AACA,MAAIhT,MAAM,CAACyT,YAAP,IAAuB,IAA3B,EAAiC;AAC7B,QAAItB,OAAO,CAACnS,MAAM,CAACyT,YAAR,CAAP,IAAgC,IAApC,EAA0C;AACtCb,MAAAA,YAAY,GAAGT,OAAO,CAACnS,MAAM,CAACyT,YAAR,CAAP,CAA6B7L,OAA5C;AACH,KAFD,MAGK;AACD,UAAI,CAACwK,cAAc,CAACpS,MAAM,CAACyT,YAAR,CAAnB,EAA0C;AACtCrB,QAAAA,cAAc,CAACpS,MAAM,CAACyT,YAAR,CAAd,GAAsC,EAAtC;AACH;;AACDrB,MAAAA,cAAc,CAACpS,MAAM,CAACyT,YAAR,CAAd,CAAoC1H,IAApC,CAAyC;AAAEiH,QAAAA,IAAI,EAAJA,IAAF;AAAQhT,QAAAA,MAAM,EAANA;AAAR,OAAzC;AACA,aAAO,IAAP;AACH;AACJ;;AACDmS,EAAAA,OAAO,CAACa,IAAD,CAAP,GAAgB,IAAIxL,MAAJ,CAAWmL,YAAY,CAACC,YAAD,EAAe5S,MAAf,CAAvB,CAAhB;;AACA,MAAIoS,cAAc,CAACY,IAAD,CAAlB,EAA0B;AACtBZ,IAAAA,cAAc,CAACY,IAAD,CAAd,CAAqBU,OAArB,CAA6B,UAAU7e,CAAV,EAAa;AACtCye,MAAAA,YAAY,CAACze,CAAC,CAACme,IAAH,EAASne,CAAC,CAACmL,MAAX,CAAZ;AACH,KAFD;AAGH,GA7B+B,CA8BhC;AACA;AACA;;;AACAmT,EAAAA,kBAAkB,CAACH,IAAD,CAAlB;AACA,SAAOb,OAAO,CAACa,IAAD,CAAd;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASW,YAAT,CAAsBX,IAAtB,EAA4BhT,MAA5B,EAAoC;AAChC;AAAI;AAAiB4H,EAAAA,OAAO,GAAG5H,MAA/B;;AACA,MAAI4H,OAAO,IAAI,IAAf,EAAqB;AACjB;AAAI;AAAiBgL,IAAAA,YAAY,GAAGlF,UAApC,CADiB,CAEjB;;AACA;AAAM;AAAiBkG,IAAAA,SAAS,GAAGlB,UAAU,CAACM,IAAD,CAA7C;;AACA,QAAIY,SAAS,IAAI,IAAjB,EAAuB;AACnBhB,MAAAA,YAAY,GAAGgB,SAAS,CAAChM,OAAzB;AACH;;AACDA,IAAAA,OAAO,GAAG+K,YAAY,CAACC,YAAD,EAAehL,OAAf,CAAtB;AACA;AAAM;AAAiBlN,IAAAA,MAAM,GAAG,IAAI8M,MAAJ,CAAWI,OAAX,CAAhC;AACAlN,IAAAA,MAAM,CAAC+Y,YAAP,GAAsBtB,OAAO,CAACa,IAAD,CAA7B;AACAb,IAAAA,OAAO,CAACa,IAAD,CAAP,GAAgBtY,MAAhB,CAViB,CAWjB;;AACAyY,IAAAA,kBAAkB,CAACH,IAAD,CAAlB;AACH,GAbD,MAcK;AACD;AACA,QAAIb,OAAO,CAACa,IAAD,CAAP,IAAiB,IAArB,EAA2B;AACvB,UAAIb,OAAO,CAACa,IAAD,CAAP,CAAcS,YAAd,IAA8B,IAAlC,EAAwC;AACpCtB,QAAAA,OAAO,CAACa,IAAD,CAAP,GAAgBb,OAAO,CAACa,IAAD,CAAP,CAAcS,YAA9B;AACH,OAFD,MAGK,IAAItB,OAAO,CAACa,IAAD,CAAP,IAAiB,IAArB,EAA2B;AAC5B,eAAOb,OAAO,CAACa,IAAD,CAAd;AACH;AACJ;AACJ;;AACD,SAAOb,OAAO,CAACa,IAAD,CAAd;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASrE,SAAT,CAAmBhH,GAAnB,EAAwB;AACpBkM,EAAAA,gBAAgB;;AAChB,MAAI,CAAClM,GAAL,EAAU;AACN,WAAO0K,YAAP;AACH,GAJmB,CAKpB;;;AACA;AAAM;AAAiBvI,EAAAA,IAAI,GAAG1T,OAAO,CAACuR,GAAD,CAAP,GAAeA,GAAf,GAAqB,CAACA,GAAD,CAAnD;;AACA,SAAO4K,YAAY,CAACzI,IAAD,CAAnB;AACH;AACD;AACA;AACA;;;AACA,SAASgK,WAAT,GAAuB;AACnB,SAAOte,MAAM,CAACue,IAAP,CAAY5B,OAAZ,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAAS0B,gBAAT,GAA4B;AACxB,MAAI1B,OAAO,MAAX,EAAmB;AACf,WAAO/Z,SAAP;AACH;;AACD+a,EAAAA,kBAAkB,CAAC,IAAD,EAAO;AACrBrF,IAAAA,sBAAsB,EAAE,sBADH;;AAErB;AACR;AACA;AACA;AACQzT,IAAAA,OANqB,mBAMbtF,GANa,EAMR;AACT;AAAM;AAAiB0B,MAAAA,CAAC,GAAG1B,GAAG,GAAG,EAAjC;AACA;AAAM;AAAiBqG,MAAAA,MAAM,GAAGlE,KAAK,CAAEnC,GAAG,GAAG,GAAP,GAAc,EAAf,CAAL,KAA4B,CAA5B,GAC1B,IAD0B,GAE1B0B,CAAC,KAAK,CAAN,GAAU,IAAV,GAAiBA,CAAC,KAAK,CAAN,GAAU,IAAV,GAAiBA,CAAC,KAAK,CAAN,GAAU,IAAV,GAAiB,IAFzD;AAGA,aAAO1B,GAAG,GAAGqG,MAAb;AACH;AAZoB,GAAP,CAAlB;AAcAoT,EAAAA,QAAQ;AACRI,EAAAA,YAAY;AACZlN,EAAAA,QAAQ;AACR0N,EAAAA,YAAY;AACZC,EAAAA,aAAa;AACbG,EAAAA,UAAU;AACVC,EAAAA,WAAW;AACXO,EAAAA,UAAU;AACV3N,EAAAA,SAAS;AACTyO,EAAAA,UAAU;AACVC,EAAAA,eAAe;AACfE,EAAAA,QAAQ;AACRlM,EAAAA,aAAa;AACbiP,EAAAA,aAAa;AACb3T,EAAAA,cAAc;AACjB;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiB4T,QAAQ,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,OAA5C,EAAqD,SAArD,EAAgE,SAAhE,EAA2E,cAA3E,CAAlC;;AACA,IAAMC,EAAE,GAAG,SAALA,EAAK,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACvBD,EAAAA,GAAG,CAACC,KAAD,CAAH,GAAa,IAAb;AACA,SAAOD,GAAP;AACH,CAHD;;AAIA;AAAM;AAAiBE,YAAY,GAAGJ,QAAQ,CAACK,MAAT,CAAgBJ,EAAhB,EAAoB,EAApB,CAAtC;AACA;AACA;AACA;AACA;;AACA,SAASK,eAAT,CAAyBC,QAAzB,EAAmC;AAC/B;AAAM;AAAiBC,EAAAA,YAAY,GAAGjf,MAAM,CAACue,IAAP,CAAYS,QAAZ,CAAtC;;AACA,MAAIC,YAAY,CACXC,IADD,CACM,UAAC/M,GAAD,EAAS;AACf,WAAQA,GAAG,IAAI0M,YAAR,IACAG,QAAQ,CAAC7M,GAAD,CAAR,KAAkB,IADlB,IAEA5R,KAAK,CAACye,QAAQ,CAAC7M,GAAD,CAAT,CAFZ;AAGH,GALG,CAAJ,EAKI;AACA,WAAO,KAAP;AACH,GAT8B,CAU/B;AACA;AACA;AACA;AACA;;;AACA;AAAI;AAAiBgN,EAAAA,cAAc,GAAG,KAAtC;;AACA,OAAK;AAAI;AAAiB3Z,EAAAA,CAAC,GAAG,CAA9B,EAAiCA,CAAC,GAAGiZ,QAAQ,CAACld,MAA9C,EAAsD,EAAEiE,CAAxD,EAA2D;AACvD,QAAIwZ,QAAQ,CAACP,QAAQ,CAACjZ,CAAD,CAAT,CAAZ,EAA2B;AACvB;AACA,UAAI2Z,cAAJ,EAAoB;AAChB,eAAO,KAAP;AACH;;AACD,UAAIH,QAAQ,CAACP,QAAQ,CAACjZ,CAAD,CAAT,CAAR,KAA0B9D,KAAK,CAACsd,QAAQ,CAACP,QAAQ,CAACjZ,CAAD,CAAT,CAAT,CAAnC,EAA4D;AACxD2Z,QAAAA,cAAc,GAAG,IAAjB;AACH;AACJ;AACJ;;AACD,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,SAAOA,MAAM,GAAG,CAAT,GAAa7f,IAAI,CAACE,KAAL,CAAW2f,MAAX,CAAb,GAAkC7f,IAAI,CAACC,IAAL,CAAU4f,MAAV,CAAzC;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACjB;AAAI;AAAiB3R,EAAAA,YAAY,GAAG2R,GAAG,CAACC,aAAxC;AACA;AAAI;AAAiBC,EAAAA,IAAI,GAAGF,GAAG,CAACG,KAAhC;AACA;AAAI;AAAiB3S,EAAAA,MAAM,GAAGwS,GAAG,CAACrM,OAAlC;AACA;AAAM;AAAiB2K,EAAAA,IAAI,GAAG0B,GAAG,CAACI,KAAlC,CAJiB,CAKjB;AACA;;AACA,MAAI,EAAG/R,YAAY,IAAI,CAAhB,IAAqB6R,IAAI,IAAI,CAA7B,IAAkC1S,MAAM,IAAI,CAA7C,IACDa,YAAY,IAAI,CAAhB,IAAqB6R,IAAI,IAAI,CAA7B,IAAkC1S,MAAM,IAAI,CAD7C,CAAJ,EACsD;AAClDa,IAAAA,YAAY,IAAIwR,OAAO,CAACQ,YAAY,CAAC7S,MAAD,CAAZ,GAAuB0S,IAAxB,CAAP,GAAuC,KAAvD;AACAA,IAAAA,IAAI,GAAG,CAAP;AACA1S,IAAAA,MAAM,GAAG,CAAT;AACH,GAZgB,CAajB;AACA;;;AACA8Q,EAAAA,IAAI,CAACjQ,YAAL,GAAoBA,YAAY,GAAG,IAAnC;AACA;AAAM;AAAiBN,EAAAA,OAAO,GAAGhO,QAAQ,CAACsO,YAAY,GAAG,IAAhB,CAAzC;AACAiQ,EAAAA,IAAI,CAACvQ,OAAL,GAAeA,OAAO,GAAG,EAAzB;AACA;AAAM;AAAiBuI,EAAAA,OAAO,GAAGvW,QAAQ,CAACgO,OAAO,GAAG,EAAX,CAAzC;AACAuQ,EAAAA,IAAI,CAAChI,OAAL,GAAeA,OAAO,GAAG,EAAzB;AACA;AAAM;AAAiBD,EAAAA,KAAK,GAAGtW,QAAQ,CAACuW,OAAO,GAAG,EAAX,CAAvC;AACAgI,EAAAA,IAAI,CAACjI,KAAL,GAAaA,KAAK,GAAG,EAArB;AACA6J,EAAAA,IAAI,IAAIngB,QAAQ,CAACsW,KAAK,GAAG,EAAT,CAAhB,CAtBiB,CAuBjB;;AACA;AAAM;AAAiBiK,EAAAA,cAAc,GAAGvgB,QAAQ,CAACwgB,YAAY,CAACL,IAAD,CAAb,CAAhD;AACA1S,EAAAA,MAAM,IAAI8S,cAAV;AACAJ,EAAAA,IAAI,IAAIL,OAAO,CAACQ,YAAY,CAACC,cAAD,CAAb,CAAf,CA1BiB,CA2BjB;;AACA;AAAM;AAAiBE,EAAAA,KAAK,GAAGzgB,QAAQ,CAACyN,MAAM,GAAG,EAAV,CAAvC;AACAA,EAAAA,MAAM,IAAI,EAAV;AACA8Q,EAAAA,IAAI,CAACxQ,GAAL,GAAWoS,IAAX;AACA5B,EAAAA,IAAI,CAACpR,KAAL,GAAaM,MAAb;AACA8Q,EAAAA,IAAI,CAACvR,IAAL,GAAYyT,KAAZ;AACA,SAAOR,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASO,YAAT,CAAsBzS,GAAtB,EAA2B;AACvB;AACA;AACA,SAAOA,GAAG,GAAG,IAAN,GAAa,MAApB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASuS,YAAT,CAAsBnT,KAAtB,EAA6B;AACzB;AACA,SAAOA,KAAK,GAAG,MAAR,GAAiB,IAAxB;AACH;AAED;AACA;AACA;AACA;;;AACA;AAAI;AAAiBmD,KAAK,GAAGpQ,IAAI,CAACoQ,KAAlC;AACA;AAAM;AAAiBoQ,UAAU,GAAG;AAChCpI,EAAAA,EAAE,EAAE,EAD4B;AAEhC;AACAnR,EAAAA,CAAC,EAAE,EAH6B;AAIhC;AACAR,EAAAA,CAAC,EAAE,EAL6B;AAMhC;AACAM,EAAAA,CAAC,EAAE,EAP6B;AAQhC;AACAL,EAAAA,CAAC,EAAE,EAT6B;AAUhC;AACAM,EAAAA,CAAC,EAAE,EAX6B,CAW1B;;AAX0B,CAApC;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASyZ,iBAAT,CAA2BrgB,GAA3B,EAAgCL,GAAhC,EAAqCuT,aAArC,EAAoDC,QAApD,EAA8D7N,MAA9D,EAAsE;AAClE,SAAOA,MAAM,CAACqT,YAAP,CAAoBhZ,GAAG,IAAI,CAA3B,EAA8B,CAAC,CAACuT,aAAhC,EAA+ClT,GAA/C,EAAoDmT,QAApD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwF,YAAT,CAAsB2H,cAAtB,EAAsCpN,aAAtC,EAAqD5N,MAArD,EAA6D;AACzD;AAAM;AAAiB8Z,EAAAA,QAAQ,GAAGmB,cAAc,CAACD,cAAD,CAAd,CAA+Bnc,GAA/B,EAAlC;AACA;AAAM;AAAiBuJ,EAAAA,OAAO,GAAGsC,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAAtC;AACA;AAAM;AAAiBvK,EAAAA,OAAO,GAAGjG,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAAtC;AACA;AAAM;AAAiBxK,EAAAA,KAAK,GAAGhG,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAApC;AACA;AAAM;AAAiBX,EAAAA,IAAI,GAAG7P,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAAnC;AACA;AAAM;AAAiBrT,EAAAA,MAAM,GAAG6C,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAArC;AACA;AAAM;AAAiBL,EAAAA,KAAK,GAAGnQ,KAAK,CAACoP,QAAQ,CAACoB,EAAT,CAAY,GAAZ,CAAD,CAApC;AACA;AAAM;AAAiBpf,EAAAA,CAAC,GAAGsM,OAAO,IAAI0S,UAAU,CAAC,IAAD,CAArB,IAA+B,CAAC,GAAD,EAAM1S,OAAN,CAA/B,IACvBA,OAAO,GAAG0S,UAAU,CAAC,GAAD,CAApB,IAA6B,CAAC,IAAD,EAAO1S,OAAP,CADN,IAEvBuI,OAAO,IAAI,CAAX,IAAgB,CAAC,GAAD,CAFO,IAGvBA,OAAO,GAAGmK,UAAU,CAAC,GAAD,CAApB,IAA6B,CAAC,IAAD,EAAOnK,OAAP,CAHN,IAIvBD,KAAK,IAAI,CAAT,IAAc,CAAC,GAAD,CAJS,IAKvBA,KAAK,GAAGoK,UAAU,CAAC,GAAD,CAAlB,IAA2B,CAAC,IAAD,EAAOpK,KAAP,CALJ,IAMvB6J,IAAI,IAAI,CAAR,IAAa,CAAC,GAAD,CANU,IAOvBA,IAAI,GAAGO,UAAU,CAAC,GAAD,CAAjB,IAA0B,CAAC,IAAD,EAAOP,IAAP,CAPH,IAQvB1S,MAAM,IAAI,CAAV,IAAe,CAAC,GAAD,CARQ,IASvBA,MAAM,GAAGiT,UAAU,CAAC,GAAD,CAAnB,IAA4B,CAAC,IAAD,EAAOjT,MAAP,CATL,IAUvBgT,KAAK,IAAI,CAAT,IAAc,CAAC,GAAD,CAVS,IAUA,CAAC,IAAD,EAAOA,KAAP,CAV3B;AAWA;AAAM;AAAiB9e,EAAAA,CAAC,GAAG,CAACD,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAa8R,aAAb,EAA4B,CAACoN,cAAD,GAAkB,CAA9C,EAAiDhb,MAAjD,CAA3B,CAnByD,CAoBzD;AACA;AACA;;AACA,SAAO+a,iBAAiB,CAAClb,KAAlB,CAAwB,IAAxB,EAA8B9D,CAA9B,CAAP;AACH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;IACMof,Q;AACF;AACJ;AACA;AACA;AACI,oBAAYrB,QAAZ,EAAmC;AAAA,QAAbxU,MAAa,uEAAJ,EAAI;;AAAA;;AAC/B,SAAKmV,KAAL,GAAa,EAAb;AACA,SAAKzS,OAAL,GAAeiM,SAAS,EAAxB;AACA,SAAKjM,OAAL,GAAe1C,MAAM,IAAIA,MAAM,CAAC0C,OAAjB,IAA4BiM,SAAS,EAApD,CAH+B,CAI/B;;AACA;AAAM;AAAiBpW,IAAAA,eAAe,GAAGic,QAAzC;AACA;AAAM;AAAiBe,IAAAA,KAAK,GAAGhd,eAAe,CAACuJ,IAAhB,IAAwB,CAAvD;AACA;AAAM;AAAiBgU,IAAAA,QAAQ,GAAGvd,eAAe,CAACwd,OAAhB,IAA2B,CAA7D;AACA;AAAM;AAAiBxT,IAAAA,MAAM,GAAGhK,eAAe,CAAC0J,KAAhB,IAAyB,CAAzD;AACA;AAAM;AAAiB+T,IAAAA,KAAK,GAAGzd,eAAe,CAACoN,IAAhB,IAAwB,CAAvD;AACA;AAAM;AAAiBsP,IAAAA,IAAI,GAAG1c,eAAe,CAACsK,GAAhB,IAAuB,CAArD;AACA;AAAM;AAAiBuI,IAAAA,KAAK,GAAG7S,eAAe,CAAC6S,KAAhB,IAAyB,CAAxD;AACA;AAAM;AAAiBC,IAAAA,OAAO,GAAG9S,eAAe,CAAC8S,OAAhB,IAA2B,CAA5D;AACA;AAAM;AAAiBvI,IAAAA,OAAO,GAAGvK,eAAe,CAACuK,OAAhB,IAA2B,CAA5D;AACA;AAAM;AAAiBM,IAAAA,YAAY,GAAG7K,eAAe,CAAC6K,YAAhB,IAAgC,CAAtE;AACA,SAAK6S,QAAL,GAAgB1B,eAAe,CAAChc,eAAD,CAA/B,CAf+B,CAgB/B;;AACA,SAAKyc,aAAL,GAAqB,CAAC5R,YAAD,GACjBN,OAAO,GAAG,IADO,GAEjBuI,OAAO,GAAG,EAAV,GAAe,IAFE,GAEK;AACtB;AACAD,IAAAA,KAAK,GAAG,IAAR,GAAe,EAAf,GAAoB,EAJxB,CAjB+B,CAqBH;AAC5B;AACA;AACA;;AACA,SAAK8J,KAAL,GAAa,CAACD,IAAD,GACTe,KAAK,GAAG,CADZ,CAzB+B,CA2B/B;AACA;AACA;;AACA,SAAKtN,OAAL,GAAe,CAACnG,MAAD,GACXuT,QAAQ,GAAG,CADA,GAEXP,KAAK,GAAG,EAFZ,CA9B+B,CAiC/B;AACA;AACA;;AACA,WAAOT,MAAM,CAAC,IAAD,CAAb;AACH;AACD;AACJ;AACA;;;;;WACI,mBAAU;AACN,aAAO,KAAKmB,QAAZ;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAASC,UAAT,EAAqB;AACjB;AACA,UAAI,CAAC,KAAKC,OAAL,EAAL,EAAqB;AACjB,eAAO,KAAKC,UAAL,GAAkBvI,WAAzB;AACH;;AACD;AAAM;AAAiBnT,MAAAA,MAAM,GAAG,KAAK0b,UAAL,EAAhC;AACA;AAAI;AAAiBhb,MAAAA,MAAM,GAAG2S,YAAY,CAAC,IAAD,EAAO,CAACmI,UAAR,EAAoBxb,MAApB,CAA1C;;AACA,UAAIwb,UAAJ,EAAgB;AACZ9a,QAAAA,MAAM,GAAGV,MAAM,CAAC2b,UAAP,CAAkB,CAAC,IAAnB,EAAyBjb,MAAzB,CAAT;AACH;;AACD,aAAOV,MAAM,CAAC4b,UAAP,CAAkBlb,MAAlB,CAAP;AACH;AACD;AACJ;AACA;;;;WACI,sBAAa;AACT,aAAO,KAAKsH,OAAZ;AACH;AACD;AACJ;AACA;AACA;;;;WACI,gBAAO6T,SAAP,EAAkB;AACd,UAAI,CAACA,SAAL,EAAgB;AACZ,eAAO,KAAK7T,OAAL,CAAa6Q,KAApB;AACH;;AACD,WAAK7Q,OAAL,GAAeiM,SAAS,CAAC4H,SAAD,CAAT,IAAwB,KAAK7T,OAA5C;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;;;;WACI,eAAM;AACF;AAAM;AAAiB8T,MAAAA,OAAO,GAAGxhB,IAAI,CAACuE,GAAtC;AACA;AAAM;AAAiB8Z,MAAAA,IAAI,GAAG,KAAK8B,KAAnC;AACA,WAAKH,aAAL,GAAqBwB,OAAO,CAAC,KAAKxB,aAAN,CAA5B;AACA,WAAKE,KAAL,GAAasB,OAAO,CAAC,KAAKtB,KAAN,CAApB;AACA,WAAKxM,OAAL,GAAe8N,OAAO,CAAC,KAAK9N,OAAN,CAAtB;AACA2K,MAAAA,IAAI,CAACjQ,YAAL,GAAoBoT,OAAO,CAACnD,IAAI,CAACjQ,YAAN,CAA3B;AACAiQ,MAAAA,IAAI,CAACvQ,OAAL,GAAe0T,OAAO,CAACnD,IAAI,CAACvQ,OAAN,CAAtB;AACAuQ,MAAAA,IAAI,CAAChI,OAAL,GAAemL,OAAO,CAACnD,IAAI,CAAChI,OAAN,CAAtB;AACAgI,MAAAA,IAAI,CAACjI,KAAL,GAAaoL,OAAO,CAACnD,IAAI,CAACjI,KAAN,CAApB;AACAiI,MAAAA,IAAI,CAACpR,KAAL,GAAauU,OAAO,CAACnD,IAAI,CAACpR,KAAN,CAApB;AACAoR,MAAAA,IAAI,CAACvR,IAAL,GAAY0U,OAAO,CAACnD,IAAI,CAACvR,IAAN,CAAnB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,YAAG2U,MAAH,EAAW;AACP,UAAI,CAAC,KAAKN,OAAL,EAAL,EAAqB;AACjB,eAAOjU,GAAP;AACH;;AACD;AAAI;AAAiB+S,MAAAA,IAArB;AACA;AAAI;AAAiB1S,MAAAA,MAArB;AACA;AAAM;AAAiBa,MAAAA,YAAY,GAAG,KAAK4R,aAA3C;AACA;AAAM;AAAiB7c,MAAAA,KAAK,GAAGD,cAAc,CAACue,MAAD,CAA7C;;AACA,UAAIte,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,MAAnC,EAA2C;AACvC8c,QAAAA,IAAI,GAAG,KAAKC,KAAL,GAAa9R,YAAY,GAAG,KAAnC;AACAb,QAAAA,MAAM,GAAG,KAAKmG,OAAL,GAAe4M,YAAY,CAACL,IAAD,CAApC;AACA,eAAO9c,KAAK,KAAK,OAAV,GAAoBoK,MAApB,GAA6BA,MAAM,GAAG,EAA7C;AACH,OAZM,CAaP;;;AACA0S,MAAAA,IAAI,GAAG,KAAKC,KAAL,GAAalgB,IAAI,CAACoQ,KAAL,CAAWgQ,YAAY,CAAC,KAAK1M,OAAN,CAAvB,CAApB;;AACA,cAAQvQ,KAAR;AACI,aAAK,MAAL;AACI,iBAAO8c,IAAI,GAAG,CAAP,GAAW7R,YAAY,GAAG,MAAjC;;AACJ,aAAK,KAAL;AACI,iBAAO6R,IAAI,GAAG7R,YAAY,GAAG,KAA7B;;AACJ,aAAK,OAAL;AACI,iBAAO6R,IAAI,GAAG,EAAP,GAAY7R,YAAY,GAAG,IAAlC;;AACJ,aAAK,SAAL;AACI,iBAAO6R,IAAI,GAAG,IAAP,GAAc7R,YAAY,GAAG,GAApC;;AACJ,aAAK,SAAL;AACI,iBAAO6R,IAAI,GAAG,KAAP,GAAe7R,YAAY,GAAG,IAArC;AACJ;;AACA,aAAK,cAAL;AACI,iBAAOpO,IAAI,CAACE,KAAL,CAAW+f,IAAI,GAAG,KAAlB,IAA2B7R,YAAlC;;AACJ;AACI,gBAAM,IAAIsT,KAAJ,wBAA0Bve,KAA1B,EAAN;AAfR;AAiBH;AACD;AACJ;AACA;;;;WACI,mBAAU;AACN,UAAI,CAAC,KAAKge,OAAL,EAAL,EAAqB;AACjB,eAAOjU,GAAP;AACH;;AACD,aAAQ,KAAK8S,aAAL,GACJ,KAAKE,KAAL,GAAa,KADT,GAEH,KAAKxM,OAAL,GAAe,EAAhB,GAAsB,MAFlB,GAGJxR,KAAK,CAAC,KAAKwR,OAAL,GAAe,EAAhB,CAAL,GAA2B,OAH/B;AAIH;;;;;AAEL;AACA;AACA;AACA;;;AACA,SAASiO,UAAT,CAAoB9f,GAApB,EAAyB;AACrB,SAAOA,GAAG,YAAYgf,QAAtB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASM,OAAT,CAAiBnW,MAAjB,EAAyB;AACrB,MAAIA,MAAM,CAACiW,QAAP,IAAmB,IAAvB,EAA6B;AACzB;AAAM;AAAiBW,IAAAA,KAAK,GAAGrV,eAAe,CAACvB,MAAD,CAA9C;AACA;AAAM;AAAiB6W,IAAAA,WAAW,GAAGvgB,KAAK,CAACb,SAAN,CAAgBif,IAAhB,CAAqB/e,IAArB,CAA0BihB,KAAK,CAACzV,eAAhC,EAAiD,UAAUnG,CAAV,EAAa;AAC/F,aAAOA,CAAC,IAAI,IAAZ;AACH,KAFoC,CAArC;AAGA;AAAI;AAAiB8b,IAAAA,UAAU,GAAG,CAAC/gB,KAAK,CAACiK,MAAM,CAACsP,EAAP,IAAatP,MAAM,CAACsP,EAAP,CAAUxZ,OAAV,EAAd,CAAN,IAC9B8gB,KAAK,CAAChW,QAAN,GAAiB,CADa,IAE9B,CAACgW,KAAK,CAACnW,KAFuB,IAG9B,CAACmW,KAAK,CAAC7V,YAHuB,IAI9B,CAAC6V,KAAK,CAACG,cAJuB,IAK9B,CAACH,KAAK,CAACtV,eALuB,IAM9B,CAACsV,KAAK,CAAC9V,SANuB,IAO9B,CAAC8V,KAAK,CAAC5V,aAPuB,IAQ9B,CAAC4V,KAAK,CAAC3V,eARuB,KAS7B,CAAC2V,KAAK,CAACxV,QAAP,IAAoBwV,KAAK,CAACxV,QAAN,IAAkByV,WATT,CAAlC;;AAUA,QAAI7W,MAAM,CAACb,OAAX,EAAoB;AAChB2X,MAAAA,UAAU,GAAGA,UAAU,IACnBF,KAAK,CAAC/V,aAAN,KAAwB,CADf,IAET+V,KAAK,CAAClW,YAAN,CAAmB3J,MAAnB,KAA8B,CAFrB,IAGT6f,KAAK,CAAC7E,OAAN,KAAkB3Z,SAHtB;AAIH;;AACD,QAAI5C,MAAM,CAACwhB,QAAP,IAAmB,IAAnB,IAA2B,CAACxhB,MAAM,CAACwhB,QAAP,CAAgBhX,MAAhB,CAAhC,EAAyD;AACrDA,MAAAA,MAAM,CAACiW,QAAP,GAAkBa,UAAlB;AACH,KAFD,MAGK;AACD,aAAOA,UAAP;AACH;AACJ;;AACD,SAAO9W,MAAM,CAACiW,QAAd;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASgB,aAAT,CAAuBjX,MAAvB,EAA+B4W,KAA/B,EAAsC;AAClC5W,EAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,CAAS2M,GAAT,CAAZ;AACA1M,EAAAA,MAAM,CAACwN,MAAP,CAAczB,eAAe,CAACvB,MAAD,CAA7B,EAAuC4W,KAAK,IAAI;AAAE3V,IAAAA,eAAe,EAAE;AAAnB,GAAhD;AACA,SAAOjB,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASkX,WAAT,CAAqBlX,MAArB,EAA6B;AACzBA,EAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,SAAOjW,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAM;AAAiBmX,gBAAgB,GAAG,kJAA1C,C,CACA;;AACA;AAAM;AAAiBC,aAAa,GAAG,6IAAvC;AACA;AAAM;AAAiBC,OAAO,GAAG,uBAAjC;AACA;AAAM;AAAiBC,QAAQ,GAAG,CAC9B,CAAC,cAAD,EAAiB,qBAAjB,EAAwC,IAAxC,CAD8B,EAE9B,CAAC,YAAD,EAAe,iBAAf,EAAkC,IAAlC,CAF8B,EAG9B,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,IAAnC,CAH8B,EAI9B,CAAC,YAAD,EAAe,aAAf,EAA8B,KAA9B,CAJ8B,EAK9B,CAAC,UAAD,EAAa,aAAb,EAA4B,IAA5B,CAL8B,EAM9B,CAAC,SAAD,EAAY,YAAZ,EAA0B,KAA1B,CAN8B,EAO9B,CAAC,YAAD,EAAe,YAAf,EAA6B,IAA7B,CAP8B,EAQ9B,CAAC,UAAD,EAAa,OAAb,EAAsB,IAAtB,CAR8B,EAS9B;AACA,CAAC,YAAD,EAAe,aAAf,EAA8B,IAA9B,CAV8B,EAW9B,CAAC,WAAD,EAAc,aAAd,EAA6B,KAA7B,CAX8B,EAY9B,CAAC,SAAD,EAAY,OAAZ,EAAqB,IAArB,CAZ8B,CAAlC,C,CAcA;;AACA;AAAM;AAAiBC,QAAQ,GAAG,CAC9B,CAAC,eAAD,EAAkB,qBAAlB,CAD8B,EAE9B,CAAC,eAAD,EAAkB,oBAAlB,CAF8B,EAG9B,CAAC,UAAD,EAAa,gBAAb,CAH8B,EAI9B,CAAC,OAAD,EAAU,WAAV,CAJ8B,EAK9B,CAAC,aAAD,EAAgB,mBAAhB,CAL8B,EAM9B,CAAC,aAAD,EAAgB,kBAAhB,CAN8B,EAO9B,CAAC,QAAD,EAAW,cAAX,CAP8B,EAQ9B,CAAC,MAAD,EAAS,UAAT,CAR8B,EAS9B,CAAC,IAAD,EAAO,MAAP,CAT8B,CAAlC;AAWA;AAAM;AAAiBC,eAAe,GAAG,qBAAzC;AACA;AAAM;AAAiBC,UAAU,GAAG;AAChCC,EAAAA,EAAE,EAAE,CAD4B;AAEhCC,EAAAA,GAAG,EAAE,CAF2B;AAGhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EAHsB;AAIhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EAJsB;AAKhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EALsB;AAMhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EANsB;AAOhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EAPsB;AAQhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EARsB;AAShCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK,EATsB;AAUhCC,EAAAA,GAAG,EAAE,CAAC,CAAD,GAAK;AAVsB,CAApC,C,CAYA;AACA;;AACA;AAAM;AAAiB9W,OAAO,GAAG,yLAAjC;AACA;AACA;AACA;AACA;;AACA,SAAS+W,aAAT,CAAuBpY,MAAvB,EAA+B;AAC3B,MAAI,CAAC7K,QAAQ,CAAC6K,MAAM,CAACqY,EAAR,CAAb,EAA0B;AACtB,WAAOrY,MAAP;AACH;;AACD;AAAM;AAAiB3J,EAAAA,KAAK,GAAG2J,MAAM,CAACqY,EAAtC;AACA;AAAM;AAAiBvd,EAAAA,KAAK,GAAGqc,gBAAgB,CAACmB,IAAjB,CAAsBjiB,KAAtB,KAAgC+gB,aAAa,CAACkB,IAAd,CAAmBjiB,KAAnB,CAA/D;AACA;AAAI;AAAiBkiB,EAAAA,SAArB;AACA;AAAI;AAAiBC,EAAAA,UAArB;AACA;AAAI;AAAiBC,EAAAA,UAArB;AACA;AAAI;AAAiBC,EAAAA,QAArB;;AACA,MAAI,CAAC5d,KAAL,EAAY;AACRkF,IAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,WAAOjW,MAAP;AACH,GAb0B,CAc3B;;;AACA;AAAI;AAAiBhF,EAAAA,CAArB;AACA;AAAI;AAAiB2d,EAAAA,CAArB;;AACA,OAAK3d,CAAC,GAAG,CAAJ,EAAO2d,CAAC,GAAGrB,QAAQ,CAACvgB,MAAzB,EAAiCiE,CAAC,GAAG2d,CAArC,EAAwC3d,CAAC,EAAzC,EAA6C;AACzC,QAAIsc,QAAQ,CAACtc,CAAD,CAAR,CAAY,CAAZ,EAAesd,IAAf,CAAoBxd,KAAK,CAAC,CAAD,CAAzB,CAAJ,EAAmC;AAC/B0d,MAAAA,UAAU,GAAGlB,QAAQ,CAACtc,CAAD,CAAR,CAAY,CAAZ,CAAb;AACAud,MAAAA,SAAS,GAAGjB,QAAQ,CAACtc,CAAD,CAAR,CAAY,CAAZ,MAAmB,KAA/B;AACA;AACH;AACJ;;AACD,MAAIwd,UAAU,IAAI,IAAlB,EAAwB;AACpBxY,IAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,WAAOjW,MAAP;AACH;;AACD,MAAIlF,KAAK,CAAC,CAAD,CAAT,EAAc;AACV,SAAKE,CAAC,GAAG,CAAJ,EAAO2d,CAAC,GAAGpB,QAAQ,CAACxgB,MAAzB,EAAiCiE,CAAC,GAAG2d,CAArC,EAAwC3d,CAAC,EAAzC,EAA6C;AACzC,UAAIuc,QAAQ,CAACvc,CAAD,CAAR,CAAY,CAAZ,EAAesd,IAAf,CAAoBxd,KAAK,CAAC,CAAD,CAAzB,CAAJ,EAAmC;AAC/B;AACA2d,QAAAA,UAAU,GAAG,CAAC3d,KAAK,CAAC,CAAD,CAAL,IAAY,GAAb,IAAoByc,QAAQ,CAACvc,CAAD,CAAR,CAAY,CAAZ,CAAjC;AACA;AACH;AACJ;;AACD,QAAIyd,UAAU,IAAI,IAAlB,EAAwB;AACpBzY,MAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,aAAOjW,MAAP;AACH;AACJ;;AACD,MAAI,CAACuY,SAAD,IAAcE,UAAU,IAAI,IAAhC,EAAsC;AAClCzY,IAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,WAAOjW,MAAP;AACH;;AACD,MAAIlF,KAAK,CAAC,CAAD,CAAT,EAAc;AACV,QAAIuc,OAAO,CAACiB,IAAR,CAAaxd,KAAK,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AACxB4d,MAAAA,QAAQ,GAAG,GAAX;AACH,KAFD,MAGK;AACD1Y,MAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,aAAOjW,MAAP;AACH;AACJ;;AACDA,EAAAA,MAAM,CAAC4Y,EAAP,GAAYJ,UAAU,IAAIC,UAAU,IAAI,EAAlB,CAAV,IAAmCC,QAAQ,IAAI,EAA/C,CAAZ;AACA,SAAOG,yBAAyB,CAAC7Y,MAAD,CAAhC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8Y,yBAAT,CAAmCC,OAAnC,EAA4CC,QAA5C,EAAsDC,MAAtD,EAA8DC,OAA9D,EAAuEC,SAAvE,EAAkFC,SAAlF,EAA6F;AACzF;AAAM;AAAiBC,EAAAA,MAAM,GAAG,CAC5BC,cAAc,CAACP,OAAD,CADc,EAE5BtS,wBAAwB,CAACkF,OAAzB,CAAiCqN,QAAjC,CAF4B,EAG5BpX,QAAQ,CAACqX,MAAD,EAAS,EAAT,CAHoB,EAI5BrX,QAAQ,CAACsX,OAAD,EAAU,EAAV,CAJoB,EAK5BtX,QAAQ,CAACuX,SAAD,EAAY,EAAZ,CALoB,CAAhC;;AAOA,MAAIC,SAAJ,EAAe;AACXC,IAAAA,MAAM,CAACtN,IAAP,CAAYnK,QAAQ,CAACwX,SAAD,EAAY,EAAZ,CAApB;AACH;;AACD,SAAOC,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBP,OAAxB,EAAiC;AAC7B;AAAM;AAAiBjX,EAAAA,IAAI,GAAGF,QAAQ,CAACmX,OAAD,EAAU,EAAV,CAAtC;AACA,SAAOjX,IAAI,IAAI,EAAR,GAAaA,IAAI,GAAG,IAApB,GAA2BA,IAAlC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASyX,iBAAT,CAA2BnkB,GAA3B,EAAgC;AAC5B;AACA,SAAOA,GAAG,CACLkG,OADE,CACM,mBADN,EAC2B,GAD3B,EAEFA,OAFE,CAEM,UAFN,EAEkB,GAFlB,EAEuBke,IAFvB,EAAP;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,WAAlC,EAA+C3Z,MAA/C,EAAuD;AACnD,MAAI0Z,UAAJ,EAAgB;AACZ;AACA;AAAM;AAAiBE,IAAAA,eAAe,GAAGjT,0BAA0B,CAACgF,OAA3B,CAAmC+N,UAAnC,CAAzC;AACA;AAAM;AAAiBG,IAAAA,aAAa,GAAG,IAAItkB,IAAJ,CAASokB,WAAW,CAAC,CAAD,CAApB,EAAyBA,WAAW,CAAC,CAAD,CAApC,EAAyCA,WAAW,CAAC,CAAD,CAApD,EAAyD9c,MAAzD,EAAvC;;AACA,QAAI+c,eAAe,KAAKC,aAAxB,EAAuC;AACnCtY,MAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBsB,eAAxB,GAA0C,IAA1C;AACAtB,MAAAA,MAAM,CAACiW,QAAP,GAAkB,KAAlB;AACA,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6D,eAAT,CAAyBC,SAAzB,EAAoCC,cAApC,EAAoDC,SAApD,EAA+D;AAC3D,MAAIF,SAAJ,EAAe;AACX,WAAOtC,UAAU,CAACsC,SAAD,CAAjB;AACH,GAFD,MAGK,IAAIC,cAAJ,EAAoB;AACrB;AACA,WAAO,CAAP;AACH,GAHI,MAIA;AACD;AAAM;AAAiBE,IAAAA,EAAE,GAAGtY,QAAQ,CAACqY,SAAD,EAAY,EAAZ,CAApC;AACA;AAAM;AAAiBxe,IAAAA,CAAC,GAAGye,EAAE,GAAG,GAAhC;AACA;AAAM;AAAiBne,IAAAA,CAAC,GAAG,CAACme,EAAE,GAAGze,CAAN,IAAW,GAAtC;AACA,WAAOM,CAAC,GAAG,EAAJ,GAASN,CAAhB;AACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAAS0e,iBAAT,CAA2Bna,MAA3B,EAAmC;AAC/B,MAAI,CAAC7K,QAAQ,CAAC6K,MAAM,CAACqY,EAAR,CAAb,EAA0B;AACtB,WAAOrY,MAAP;AACH;;AACD;AAAM;AAAiBlF,EAAAA,KAAK,GAAGuG,OAAO,CAACiX,IAAR,CAAaiB,iBAAiB,CAACvZ,MAAM,CAACqY,EAAR,CAA9B,CAA/B;;AACA,MAAI,CAACvd,KAAL,EAAY;AACR,WAAOoc,WAAW,CAAClX,MAAD,CAAlB;AACH;;AACD;AAAM;AAAiBoa,EAAAA,WAAW,GAAGtB,yBAAyB,CAAChe,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAApC,EAAyCA,KAAK,CAAC,CAAD,CAA9C,EAAmDA,KAAK,CAAC,CAAD,CAAxD,CAA9D;;AACA,MAAI,CAAC2e,YAAY,CAAC3e,KAAK,CAAC,CAAD,CAAN,EAAWsf,WAAX,EAAwBpa,MAAxB,CAAjB,EAAkD;AAC9C,WAAOA,MAAP;AACH;;AACDA,EAAAA,MAAM,CAACI,EAAP,GAAYga,WAAZ;AACApa,EAAAA,MAAM,CAACkQ,IAAP,GAAc4J,eAAe,CAAChf,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,EAAD,CAA1B,CAA7B;AACAkF,EAAAA,MAAM,CAACsP,EAAP,GAAY/T,aAAa,CAAChB,KAAd,CAAoB,IAApB,EAA0ByF,MAAM,CAACI,EAAjC,CAAZ;;AACAJ,EAAAA,MAAM,CAACsP,EAAP,CAAU1L,aAAV,CAAwB5D,MAAM,CAACsP,EAAP,CAAU9S,aAAV,KAA4BwD,MAAM,CAACkQ,IAA3D;;AACA3O,EAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBqB,OAAxB,GAAkC,IAAlC;AACA,SAAOrB,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASqa,gBAAT,CAA0Bra,MAA1B,EAAkC;AAC9B,MAAI,CAAC7K,QAAQ,CAAC6K,MAAM,CAACqY,EAAR,CAAb,EAA0B;AACtB,WAAOrY,MAAP;AACH;;AACD;AAAM;AAAiBT,EAAAA,OAAO,GAAGiY,eAAe,CAACc,IAAhB,CAAqBtY,MAAM,CAACqY,EAA5B,CAAjC;;AACA,MAAI9Y,OAAO,KAAK,IAAhB,EAAsB;AAClBS,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,CAAS,CAACgK,OAAO,CAAC,CAAD,CAAjB,CAAZ;AACA,WAAOS,MAAP;AACH,GAR6B,CAS9B;AACA;AACA;;;AACAoY,EAAAA,aAAa,CAACpY,MAAD,CAAb;;AACA,MAAIA,MAAM,CAACiW,QAAP,KAAoB,KAAxB,EAA+B;AAC3B,WAAOjW,MAAM,CAACiW,QAAd;AACH,GAFD,MAGK;AACD,WAAOjW,MAAP;AACH;;AACDma,EAAAA,iBAAiB,CAACna,MAAD,CAAjB;;AACA,MAAIA,MAAM,CAACiW,QAAP,KAAoB,KAAxB,EAA+B;AAC3B,WAAOjW,MAAM,CAACiW,QAAd;AACH,GAFD,MAGK;AACD,WAAOjW,MAAP;AACH,GAzB6B,CA0B9B;AACA;;;AACA,SAAOiX,aAAa,CAACjX,MAAD,CAApB;AACH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsa,UAAT,CAAoBzkB,IAApB,EAA0B+E,MAA1B,EAAkCF,MAAlC,EAA0CQ,KAA1C,EAA6D;AAAA,MAAZC,MAAY,uEAAH,CAAG;;AACzD;AAAM;AAAiBuH,EAAAA,OAAO,GAAGiM,SAAS,CAACjU,MAAM,IAAI,IAAX,CAA1C;;AACA,MAAI,CAACgI,OAAL,EAAc;AACV,UAAM,IAAIgU,KAAJ,oBAAqBhc,MAArB,iEAAN;AACH;;AACD;AAAM;AAAiB6f,EAAAA,OAAO,GAAG3f,MAAM,KAAKM,KAAK,GAAG,wBAAH,GAA8B,sBAAxC,CAAvC;;AACA;AAAM;AAAiBE,EAAAA,MAAM,GAAGof,YAAY,CAAC3kB,IAAD,EAAO0kB,OAAP,EAAgB7X,OAAhB,EAAyBxH,KAAzB,EAAgCC,MAAhC,CAA5C;;AACA,MAAI,CAACC,MAAL,EAAa;AACT,WAAOA,MAAP;AACH;;AACD,SAAOsH,OAAO,CAAC4T,UAAR,CAAmBlb,MAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASof,YAAT,CAAsB3kB,IAAtB,EAA4B0kB,OAA5B,EAAqC7f,MAArC,EAA6CQ,KAA7C,EAAgE;AAAA,MAAZC,MAAY,uEAAH,CAAG;;AAC5D,MAAI,CAACvF,WAAW,CAACC,IAAD,CAAhB,EAAwB;AACpB,WAAO6E,MAAM,CAACmT,WAAd;AACH;;AACD;AAAM;AAAiBjT,EAAAA,MAAM,GAAG6f,YAAY,CAACF,OAAD,EAAU7f,MAAV,CAA5C;AACAX,EAAAA,eAAe,CAACa,MAAD,CAAf,GAA0Bb,eAAe,CAACa,MAAD,CAAf,IAA2BD,kBAAkB,CAACC,MAAD,CAAvE;AACA,SAAOb,eAAe,CAACa,MAAD,CAAf,CAAwB/E,IAAxB,EAA8B6E,MAA9B,EAAsCQ,KAAtC,EAA6CC,MAA7C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASsf,YAAT,CAAsBF,OAAtB,EAA+B7f,MAA/B,EAAuC;AACnC;AAAI;AAAiBE,EAAAA,MAAM,GAAG2f,OAA9B;AACA;AAAI;AAAiBvf,EAAAA,CAAC,GAAG,CAAzB;AACA;AAAM;AAAiB0f,EAAAA,qBAAqB,GAAG,4CAA/C;;AACA;AAAM;AAAiBC,EAAAA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACtkB,KAAD,EAAW;AAC5D,WAAOqE,MAAM,CAACkgB,cAAP,CAAsBvkB,KAAtB,KAAgCA,KAAvC;AACH,GAFD;;AAGAqkB,EAAAA,qBAAqB,CAACG,SAAtB,GAAkC,CAAlC;;AACA,SAAO7f,CAAC,IAAI,CAAL,IAAU0f,qBAAqB,CAAC7R,IAAtB,CAA2BjO,MAA3B,CAAjB,EAAqD;AACjDA,IAAAA,MAAM,GAAGA,MAAM,CAACU,OAAP,CAAeof,qBAAf,EAAsCC,2BAAtC,CAAT;AACAD,IAAAA,qBAAqB,CAACG,SAAtB,GAAkC,CAAlC;AACA7f,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,SAAOJ,MAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkgB,QAAT,CAAkBtkB,CAAlB,EAAqBC,CAArB,EAAwBskB,CAAxB,EAA2B;AACvB,MAAIvkB,CAAC,IAAI,IAAT,EAAe;AACX,WAAOA,CAAP;AACH;;AACD,MAAIC,CAAC,IAAI,IAAT,EAAe;AACX,WAAOA,CAAP;AACH;;AACD,SAAOskB,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0Bhb,MAA1B,EAAkC;AAC9B;AAAM;AAAiBib,EAAAA,QAAQ,GAAG,IAAI1lB,IAAJ,EAAlC;;AACA,MAAIyK,MAAM,CAACiQ,OAAX,EAAoB;AAChB,WAAO,CAACgL,QAAQ,CAACrf,cAAT,EAAD,EAA4Bqf,QAAQ,CAAC/d,WAAT,EAA5B,EAAoD+d,QAAQ,CAACje,UAAT,EAApD,CAAP;AACH;;AACD,SAAO,CAACie,QAAQ,CAAC9e,WAAT,EAAD,EAAyB8e,QAAQ,CAAChe,QAAT,EAAzB,EAA8Cge,QAAQ,CAACle,OAAT,EAA9C,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASme,eAAT,CAAyBlb,MAAzB,EAAiC;AAC7B;AAAM;AAAiB3J,EAAAA,KAAK,GAAG,EAA/B;AACA;AAAI;AAAiB2E,EAAAA,CAArB;AACA;AAAI;AAAiBnF,EAAAA,IAArB;AACA;AAAI;AAAiBslB,EAAAA,WAArB;AACA;AAAI;AAAiBC,EAAAA,eAArB;AACA;AAAI;AAAiBC,EAAAA,SAArB;;AACA,MAAIrb,MAAM,CAACsP,EAAX,EAAe;AACX,WAAOtP,MAAP;AACH;;AACDmb,EAAAA,WAAW,GAAGH,gBAAgB,CAAChb,MAAD,CAA9B,CAV6B,CAW7B;;AACA,MAAIA,MAAM,CAACE,EAAP,IAAaF,MAAM,CAACI,EAAP,CAAUxH,IAAV,KAAmB,IAAhC,IAAwCoH,MAAM,CAACI,EAAP,CAAUzH,KAAV,KAAoB,IAAhE,EAAsE;AAClE2iB,IAAAA,qBAAqB,CAACtb,MAAD,CAArB;AACH,GAd4B,CAe7B;;;AACA,MAAIA,MAAM,CAACiF,UAAP,IAAqB,IAAzB,EAA+B;AAC3BoW,IAAAA,SAAS,GAAGP,QAAQ,CAAC9a,MAAM,CAACI,EAAP,CAAU1H,IAAV,CAAD,EAAkByiB,WAAW,CAACziB,IAAD,CAA7B,CAApB;;AACA,QAAIsH,MAAM,CAACiF,UAAP,GAAoBpD,UAAU,CAACwZ,SAAD,CAA9B,IAA6Crb,MAAM,CAACiF,UAAP,KAAsB,CAAvE,EAA0E;AACtE1D,MAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBub,kBAAxB,GAA6C,IAA7C;AACH;;AACD1lB,IAAAA,IAAI,GAAG,IAAIN,IAAJ,CAASA,IAAI,CAACoG,GAAL,CAAS0f,SAAT,EAAoB,CAApB,EAAuBrb,MAAM,CAACiF,UAA9B,CAAT,CAAP;AACAjF,IAAAA,MAAM,CAACI,EAAP,CAAUzH,KAAV,IAAmB9C,IAAI,CAACqH,WAAL,EAAnB;AACA8C,IAAAA,MAAM,CAACI,EAAP,CAAUxH,IAAV,IAAkB/C,IAAI,CAACmH,UAAL,EAAlB;AACH,GAxB4B,CAyB7B;AACA;AACA;AACA;AACA;;;AACA,OAAKhC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAJ,IAASgF,MAAM,CAACI,EAAP,CAAUpF,CAAV,KAAgB,IAArC,EAA2C,EAAEA,CAA7C,EAAgD;AAC5CgF,IAAAA,MAAM,CAACI,EAAP,CAAUpF,CAAV,IAAe3E,KAAK,CAAC2E,CAAD,CAAL,GAAWmgB,WAAW,CAACngB,CAAD,CAArC;AACH,GAhC4B,CAiC7B;;;AACA,SAAOA,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACfgF,IAAAA,MAAM,CAACI,EAAP,CAAUpF,CAAV,IAAe3E,KAAK,CAAC2E,CAAD,CAAL,GAAYgF,MAAM,CAACI,EAAP,CAAUpF,CAAV,KAAgB,IAAjB,GAA0BA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAAxC,GAA6CgF,MAAM,CAACI,EAAP,CAAUpF,CAAV,CAAvE;AACH,GApC4B,CAqC7B;;;AACA,MAAIgF,MAAM,CAACI,EAAP,CAAUvH,IAAV,MAAoB,EAApB,IACAmH,MAAM,CAACI,EAAP,CAAUtH,MAAV,MAAsB,CADtB,IAEAkH,MAAM,CAACI,EAAP,CAAUrH,MAAV,MAAsB,CAFtB,IAGAiH,MAAM,CAACI,EAAP,CAAUpH,WAAV,MAA2B,CAH/B,EAGkC;AAC9BgH,IAAAA,MAAM,CAACwb,QAAP,GAAkB,IAAlB;AACAxb,IAAAA,MAAM,CAACI,EAAP,CAAUvH,IAAV,IAAkB,CAAlB;AACH;;AACDmH,EAAAA,MAAM,CAACsP,EAAP,GAAY,CAACtP,MAAM,CAACiQ,OAAP,GAAiB1U,aAAjB,GAAiCO,UAAlC,EAA8CvB,KAA9C,CAAoD,IAApD,EAA0DlE,KAA1D,CAAZ;AACA+kB,EAAAA,eAAe,GAAGpb,MAAM,CAACiQ,OAAP,GAAiBjQ,MAAM,CAACsP,EAAP,CAAUxS,SAAV,EAAjB,GAAyCkD,MAAM,CAACsP,EAAP,CAAUzS,MAAV,EAA3D,CA9C6B,CA+C7B;AACA;;AACA,MAAImD,MAAM,CAACkQ,IAAP,IAAe,IAAnB,EAAyB;AACrBlQ,IAAAA,MAAM,CAACsP,EAAP,CAAU1L,aAAV,CAAwB5D,MAAM,CAACsP,EAAP,CAAU9S,aAAV,KAA4BwD,MAAM,CAACkQ,IAA3D;AACH;;AACD,MAAIlQ,MAAM,CAACwb,QAAX,EAAqB;AACjBxb,IAAAA,MAAM,CAACI,EAAP,CAAUvH,IAAV,IAAkB,EAAlB;AACH,GAtD4B,CAuD7B;;;AACA,MAAImH,MAAM,CAACE,EAAP,IAAa,OAAOF,MAAM,CAACE,EAAP,CAAU,GAAV,CAAP,KAA0B,WAAvC,IAAsDF,MAAM,CAACE,EAAP,CAAU,GAAV,MAAmBkb,eAA7E,EAA8F;AAC1F7Z,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBsB,eAAxB,GAA0C,IAA1C;AACH;;AACD,SAAOtB,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASsb,qBAAT,CAA+Btb,MAA/B,EAAuC;AACnC;AAAI;AAAiByb,EAAAA,CAArB;AAAwB;AAAiBC,EAAAA,QAAzC;AAAmD;AAAiB/V,EAAAA,IAApE;AAA0E;AAAiBC,EAAAA,OAA3F;AAAoG;AAAiBN,EAAAA,GAArH;AAA0H;AAAiBC,EAAAA,GAA3I;AAAgJ;AAAiBoW,EAAAA,IAAjK;AAAuK;AAAiBC,EAAAA,eAAxL;AACAH,EAAAA,CAAC,GAAGzb,MAAM,CAACE,EAAX;;AACA,MAAIub,CAAC,CAACI,EAAF,IAAQ,IAAR,IAAgBJ,CAAC,CAACK,CAAF,IAAO,IAAvB,IAA+BL,CAAC,CAACM,CAAF,IAAO,IAA1C,EAAgD;AAC5CzW,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,GAAG,GAAG,CAAN,CAF4C,CAG5C;AACA;AACA;AACA;;AACAmW,IAAAA,QAAQ,GAAGZ,QAAQ,CAACW,CAAC,CAACI,EAAH,EAAO7b,MAAM,CAACI,EAAP,CAAU1H,IAAV,CAAP,EAAwBwN,UAAU,CAAC,IAAI3Q,IAAJ,EAAD,EAAa,CAAb,EAAgB,CAAhB,CAAV,CAA6BuM,IAArD,CAAnB;AACA6D,IAAAA,IAAI,GAAGmV,QAAQ,CAACW,CAAC,CAACK,CAAH,EAAM,CAAN,CAAf;AACAlW,IAAAA,OAAO,GAAGkV,QAAQ,CAACW,CAAC,CAACM,CAAH,EAAM,CAAN,CAAlB;;AACA,QAAInW,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,CAA7B,EAAgC;AAC5BgW,MAAAA,eAAe,GAAG,IAAlB;AACH;AACJ,GAbD,MAcK;AACDtW,IAAAA,GAAG,GAAGtF,MAAM,CAAC0C,OAAP,CAAekH,KAAf,CAAqBtE,GAA3B;AACAC,IAAAA,GAAG,GAAGvF,MAAM,CAAC0C,OAAP,CAAekH,KAAf,CAAqBrE,GAA3B;AACA;AAAM;AAAiByW,IAAAA,OAAO,GAAG9V,UAAU,CAAC,IAAI3Q,IAAJ,EAAD,EAAa+P,GAAb,EAAkBC,GAAlB,CAA3C;AACAmW,IAAAA,QAAQ,GAAGZ,QAAQ,CAACW,CAAC,CAACQ,EAAH,EAAOjc,MAAM,CAACI,EAAP,CAAU1H,IAAV,CAAP,EAAwBsjB,OAAO,CAACla,IAAhC,CAAnB,CAJC,CAKD;;AACA6D,IAAAA,IAAI,GAAGmV,QAAQ,CAACW,CAAC,CAACA,CAAH,EAAMO,OAAO,CAACrW,IAAd,CAAf;;AACA,QAAI8V,CAAC,CAAC/f,CAAF,IAAO,IAAX,EAAiB;AACb;AACAkK,MAAAA,OAAO,GAAG6V,CAAC,CAAC/f,CAAZ;;AACA,UAAIkK,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,CAA7B,EAAgC;AAC5BgW,QAAAA,eAAe,GAAG,IAAlB;AACH;AACJ,KAND,MAOK,IAAIH,CAAC,CAACS,CAAF,IAAO,IAAX,EAAiB;AAClB;AACAtW,MAAAA,OAAO,GAAG6V,CAAC,CAACS,CAAF,GAAM5W,GAAhB;;AACA,UAAImW,CAAC,CAACS,CAAF,GAAM,CAAN,IAAWT,CAAC,CAACS,CAAF,GAAM,CAArB,EAAwB;AACpBN,QAAAA,eAAe,GAAG,IAAlB;AACH;AACJ,KANI,MAOA;AACD;AACAhW,MAAAA,OAAO,GAAGN,GAAV;AACH;AACJ;;AACD,MAAIK,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGS,WAAW,CAACsV,QAAD,EAAWpW,GAAX,EAAgBC,GAAhB,CAAlC,EAAwD;AACpDhE,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBmc,cAAxB,GAAyC,IAAzC;AACH,GAFD,MAGK,IAAIP,eAAe,IAAI,IAAvB,EAA6B;AAC9Bra,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBoc,gBAAxB,GAA2C,IAA3C;AACH,GAFI,MAGA;AACDT,IAAAA,IAAI,GAAGjW,kBAAkB,CAACgW,QAAD,EAAW/V,IAAX,EAAiBC,OAAjB,EAA0BN,GAA1B,EAA+BC,GAA/B,CAAzB;AACAvF,IAAAA,MAAM,CAACI,EAAP,CAAU1H,IAAV,IAAkBijB,IAAI,CAAC7Z,IAAvB;AACA9B,IAAAA,MAAM,CAACiF,UAAP,GAAoB0W,IAAI,CAAC5V,SAAzB;AACH;;AACD,SAAO/F,MAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASqc,aAAT,CAAuBrc,MAAvB,EAA+B;AAC3B;AAAI;AAAiBY,EAAAA,QAArB;AACA;AAAM;AAAiBpK,EAAAA,CAAC,GAAGwJ,MAAM,CAACI,EAAlC;;AACA,MAAI5J,CAAC,IAAI+K,eAAe,CAACvB,MAAD,CAAf,CAAwBY,QAAxB,KAAqC,CAAC,CAA/C,EAAkD;AAC9C;AACAA,IAAAA,QAAQ,GACJpK,CAAC,CAACmC,KAAD,CAAD,GAAW,CAAX,IAAgBnC,CAAC,CAACmC,KAAD,CAAD,GAAW,EAA3B,GAAgCA,KAAhC,GACInC,CAAC,CAACoC,IAAD,CAAD,GAAU,CAAV,IAAepC,CAAC,CAACoC,IAAD,CAAD,GAAUoJ,aAAa,CAACxL,CAAC,CAACkC,IAAD,CAAF,EAAUlC,CAAC,CAACmC,KAAD,CAAX,CAAtC,GAA4DC,IAA5D,GACIpC,CAAC,CAACqC,IAAD,CAAD,GAAU,CAAV,IAAerC,CAAC,CAACqC,IAAD,CAAD,GAAU,EAAzB,IAAgCrC,CAAC,CAACqC,IAAD,CAAD,KAAY,EAAZ,KAAmBrC,CAAC,CAACsC,MAAD,CAAD,KAAc,CAAd,IAAmBtC,CAAC,CAACuC,MAAD,CAAD,KAAc,CAAjC,IAAsCvC,CAAC,CAACwC,WAAD,CAAD,KAAmB,CAA5E,CAAhC,GAAkHH,IAAlH,GACIrC,CAAC,CAACsC,MAAD,CAAD,GAAY,CAAZ,IAAiBtC,CAAC,CAACsC,MAAD,CAAD,GAAY,EAA7B,GAAkCA,MAAlC,GACItC,CAAC,CAACuC,MAAD,CAAD,GAAY,CAAZ,IAAiBvC,CAAC,CAACuC,MAAD,CAAD,GAAY,EAA7B,GAAkCA,MAAlC,GACIvC,CAAC,CAACwC,WAAD,CAAD,GAAiB,CAAjB,IAAsBxC,CAAC,CAACwC,WAAD,CAAD,GAAiB,GAAvC,GAA6CA,WAA7C,GACI,CAAC,CAP7B;;AAQA,QAAIuI,eAAe,CAACvB,MAAD,CAAf,CAAwBub,kBAAxB,KAA+C3a,QAAQ,GAAGlI,IAAX,IAAmBkI,QAAQ,GAAGhI,IAA7E,CAAJ,EAAwF;AACpFgI,MAAAA,QAAQ,GAAGhI,IAAX;AACH;;AACD,QAAI2I,eAAe,CAACvB,MAAD,CAAf,CAAwBmc,cAAxB,IAA0Cvb,QAAQ,KAAK,CAAC,CAA5D,EAA+D;AAC3DA,MAAAA,QAAQ,GAAG3H,IAAX;AACH;;AACD,QAAIsI,eAAe,CAACvB,MAAD,CAAf,CAAwBoc,gBAAxB,IAA4Cxb,QAAQ,KAAK,CAAC,CAA9D,EAAiE;AAC7DA,MAAAA,QAAQ,GAAG1H,OAAX;AACH;;AACDqI,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBY,QAAxB,GAAmCA,QAAnC;AACH;;AACD,SAAOZ,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAM;AAAiBsc,QAAQ,GAAG,UAAlC,C,CACA;AACA;;AACA;AAAM;AAAiBC,QAAQ,GAAG,UAAlC;AACA;AACA;AACA;AACA;;AACA,SAAS1D,yBAAT,CAAmC7Y,MAAnC,EAA2C;AACvC;AACA,MAAIA,MAAM,CAAC4Y,EAAP,KAAc0D,QAAlB,EAA4B;AACxB,WAAOlE,aAAa,CAACpY,MAAD,CAApB;AACH;;AACD,MAAIA,MAAM,CAAC4Y,EAAP,KAAc2D,QAAlB,EAA4B;AACxB,WAAOpC,iBAAiB,CAACna,MAAD,CAAxB;AACH;;AACDA,EAAAA,MAAM,CAACI,EAAP,GAAY,EAAZ;AACAmB,EAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBS,KAAxB,GAAgC,IAAhC;;AACA,MAAIrK,OAAO,CAAC4J,MAAM,CAAC4Y,EAAR,CAAP,IAAuB,CAAC5Y,MAAM,CAACqY,EAAR,IAAcrY,MAAM,CAACqY,EAAP,KAAc,CAAvD,EAA2D;AACvD,WAAOrY,MAAP;AACH,GAZsC,CAavC;;;AACA;AAAI;AAAiB3J,EAAAA,KAAK,GAAG2J,MAAM,CAACqY,EAAP,CAAU3iB,QAAV,EAA7B;;AACA;AAAI;AAAiB8mB,EAAAA,sBAAsB,GAAG,CAA9C;AACA;AAAM;AAAiBC,EAAAA,WAAW,GAAGpmB,KAAK,CAACU,MAA3C;AACA;AAAM;AAAiB6I,EAAAA,MAAM,GAAG6a,YAAY,CAACza,MAAM,CAAC4Y,EAAR,EAAY5Y,MAAM,CAAC0C,OAAnB,CAAZ,CAAwC5H,KAAxC,CAA8Cb,gBAA9C,KAAmE,EAAnG;AACA;AAAI;AAAiBe,EAAAA,CAArB;AACA;AAAI;AAAiBb,EAAAA,KAArB;AACA;AAAI;AAAiBwf,EAAAA,WAArB;AACA;AAAI;AAAiB+C,EAAAA,OAArB;;AACA,OAAK1hB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4E,MAAM,CAAC7I,MAAvB,EAA+BiE,CAAC,EAAhC,EAAoC;AAChCb,IAAAA,KAAK,GAAGyF,MAAM,CAAC5E,CAAD,CAAd;AACA2e,IAAAA,WAAW,GAAG,CAACtjB,KAAK,CAACyE,KAAN,CAAYoE,qBAAqB,CAAC/E,KAAD,EAAQ6F,MAAM,CAAC0C,OAAf,CAAjC,KAA6D,EAA9D,EAAkE,CAAlE,CAAd;;AACA,QAAIiX,WAAJ,EAAiB;AACb+C,MAAAA,OAAO,GAAGrmB,KAAK,CAACyD,MAAN,CAAa,CAAb,EAAgBzD,KAAK,CAACsV,OAAN,CAAcgO,WAAd,CAAhB,CAAV;;AACA,UAAI+C,OAAO,CAAC3lB,MAAR,GAAiB,CAArB,EAAwB;AACpBwK,QAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBW,WAAxB,CAAoCoL,IAApC,CAAyC2Q,OAAzC;AACH;;AACDrmB,MAAAA,KAAK,GAAGA,KAAK,CAAC8R,KAAN,CAAY9R,KAAK,CAACsV,OAAN,CAAcgO,WAAd,IAA6BA,WAAW,CAAC5iB,MAArD,CAAR;AACAylB,MAAAA,sBAAsB,IAAI7C,WAAW,CAAC5iB,MAAtC;AACH,KAV+B,CAWhC;;;AACA,QAAIiD,oBAAoB,CAACG,KAAD,CAAxB,EAAiC;AAC7B,UAAIwf,WAAJ,EAAiB;AACbpY,QAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBS,KAAxB,GAAgC,KAAhC;AACH,OAFD,MAGK;AACDc,QAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBU,YAAxB,CAAqCqL,IAArC,CAA0C5R,KAA1C;AACH;;AACDgG,MAAAA,uBAAuB,CAAChG,KAAD,EAAQwf,WAAR,EAAqB3Z,MAArB,CAAvB;AACH,KARD,MASK,IAAIA,MAAM,CAACb,OAAP,IAAkB,CAACwa,WAAvB,EAAoC;AACrCpY,MAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBU,YAAxB,CAAqCqL,IAArC,CAA0C5R,KAA1C;AACH;AACJ,GA9CsC,CA+CvC;;;AACAoH,EAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBa,aAAxB,GAAwC4b,WAAW,GAAGD,sBAAtD;;AACA,MAAInmB,KAAK,CAACU,MAAN,GAAe,CAAnB,EAAsB;AAClBwK,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBW,WAAxB,CAAoCoL,IAApC,CAAyC1V,KAAzC;AACH,GAnDsC,CAoDvC;;;AACA,MAAI2J,MAAM,CAACI,EAAP,CAAUvH,IAAV,KAAmB,EAAnB,IACA0I,eAAe,CAACvB,MAAD,CAAf,CAAwB+R,OAAxB,KAAoC,IADpC,IAEA/R,MAAM,CAACI,EAAP,CAAUvH,IAAV,IAAkB,CAFtB,EAEyB;AACrB0I,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwB+R,OAAxB,GAAkC,KAAK,CAAvC;AACH;;AACDxQ,EAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBmB,eAAxB,GAA0CnB,MAAM,CAACI,EAAP,CAAU+H,KAAV,CAAgB,CAAhB,CAA1C;AACA5G,EAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBoB,QAAxB,GAAmCpB,MAAM,CAAC8R,SAA1C,CA3DuC,CA4DvC;;AACA9R,EAAAA,MAAM,CAACI,EAAP,CAAUvH,IAAV,IAAkB8jB,eAAe,CAAC3c,MAAM,CAAC0C,OAAR,EAAiB1C,MAAM,CAACI,EAAP,CAAUvH,IAAV,CAAjB,EAAkCmH,MAAM,CAAC8R,SAAzC,CAAjC;AACAoJ,EAAAA,eAAe,CAAClb,MAAD,CAAf;AACA,SAAOqc,aAAa,CAACrc,MAAD,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2c,eAAT,CAAyBjiB,MAAzB,EAAiCkiB,KAAjC,EAAwCxb,QAAxC,EAAkD;AAC9C;AAAI;AAAiB5J,EAAAA,IAAI,GAAGolB,KAA5B;;AACA,MAAIxb,QAAQ,IAAI,IAAhB,EAAsB;AAClB;AACA,WAAO5J,IAAP;AACH;;AACD,MAAIkD,MAAM,CAACmiB,YAAP,IAAuB,IAA3B,EAAiC;AAC7B,WAAOniB,MAAM,CAACmiB,YAAP,CAAoBrlB,IAApB,EAA0B4J,QAA1B,CAAP;AACH;;AACD,MAAI1G,MAAM,CAACmX,IAAP,IAAe,IAAnB,EAAyB;AACrB;AACA,WAAOra,IAAP;AACH,GAZ6C,CAa9C;;;AACA;AAAM;AAAiBslB,EAAAA,IAAI,GAAGpiB,MAAM,CAACmX,IAAP,CAAYzQ,QAAZ,CAA9B;;AACA,MAAI0b,IAAI,IAAItlB,IAAI,GAAG,EAAnB,EAAuB;AACnBA,IAAAA,IAAI,IAAI,EAAR;AACH;;AACD,MAAI,CAACslB,IAAD,IAAStlB,IAAI,KAAK,EAAtB,EAA0B;AACtBA,IAAAA,IAAI,GAAG,CAAP;AACH;;AACD,SAAOA,IAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASulB,wBAAT,CAAkC/c,MAAlC,EAA0C;AACtC;AAAI;AAAiBgd,EAAAA,UAArB;AACA;AAAI;AAAiBC,EAAAA,UAArB;AACA;AAAI;AAAiBC,EAAAA,WAArB;AACA;AAAI;AAAiBC,EAAAA,YAArB;;AACA,MAAI,CAACnd,MAAM,CAAC4Y,EAAR,IAAc5Y,MAAM,CAAC4Y,EAAP,CAAU7hB,MAAV,KAAqB,CAAvC,EAA0C;AACtCwK,IAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwBgB,aAAxB,GAAwC,IAAxC;AACA,WAAOiW,aAAa,CAACjX,MAAD,CAApB;AACH;;AACD;AAAI;AAAiBhF,EAAAA,CAArB;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgF,MAAM,CAAC4Y,EAAP,CAAU7hB,MAA1B,EAAkCiE,CAAC,EAAnC,EAAuC;AACnCmiB,IAAAA,YAAY,GAAG,CAAf;AACAH,IAAAA,UAAU,GAAGxnB,MAAM,CAACwN,MAAP,CAAc,EAAd,EAAkBhD,MAAlB,CAAb;;AACA,QAAIA,MAAM,CAACiQ,OAAP,IAAkB,IAAtB,EAA4B;AACxB+M,MAAAA,UAAU,CAAC/M,OAAX,GAAqBjQ,MAAM,CAACiQ,OAA5B;AACH;;AACD+M,IAAAA,UAAU,CAACpE,EAAX,GAAgB5Y,MAAM,CAAC4Y,EAAP,CAAU5d,CAAV,CAAhB;AACA6d,IAAAA,yBAAyB,CAACmE,UAAD,CAAzB;;AACA,QAAI,CAAC7G,OAAO,CAAC6G,UAAD,CAAZ,EAA0B;AACtB;AACH,KAVkC,CAWnC;;;AACAG,IAAAA,YAAY,IAAI5b,eAAe,CAACyb,UAAD,CAAf,CAA4Bnc,aAA5C,CAZmC,CAanC;;AACAsc,IAAAA,YAAY,IAAI5b,eAAe,CAACyb,UAAD,CAAf,CAA4Btc,YAA5B,CAAyC3J,MAAzC,GAAkD,EAAlE;AACAwK,IAAAA,eAAe,CAACyb,UAAD,CAAf,CAA4BI,KAA5B,GAAoCD,YAApC;;AACA,QAAID,WAAW,IAAI,IAAf,IAAuBC,YAAY,GAAGD,WAA1C,EAAuD;AACnDA,MAAAA,WAAW,GAAGC,YAAd;AACAF,MAAAA,UAAU,GAAGD,UAAb;AACH;AACJ;;AACD,SAAOxnB,MAAM,CAACwN,MAAP,CAAchD,MAAd,EAAsBid,UAAU,IAAID,UAApC,CAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASK,gBAAT,CAA0Brd,MAA1B,EAAkC;AAC9B,MAAIA,MAAM,CAACsP,EAAX,EAAe;AACX,WAAOtP,MAAP;AACH;;AACD;AAAM;AAAiB3J,EAAAA,KAAK,GAAG2J,MAAM,CAACqY,EAAtC;;AACA,MAAI1hB,QAAQ,CAACN,KAAD,CAAZ,EAAqB;AACjB;AAAM;AAAiB2E,IAAAA,CAAC,GAAG3C,oBAAoB;AAAC;AAAkBhC,IAAAA,KAAnB,CAA/C;AACA2J,IAAAA,MAAM,CAACI,EAAP,GAAY,CAACpF,CAAC,CAAC8G,IAAH,EAAS9G,CAAC,CAACiH,KAAX,EAAkBjH,CAAC,CAAC6H,GAApB,EAAyB7H,CAAC,CAACoQ,KAA3B,EAAkCpQ,CAAC,CAACqQ,OAApC,EAA6CrQ,CAAC,CAAC8H,OAA/C,EAAwD9H,CAAC,CAACoI,YAA1D,EACPka,GADO,CACH,UAAAzmB,GAAG;AAAA,aAAI1B,QAAQ,CAAC0B,GAAD,CAAR,GAAgB+K,QAAQ,CAAC/K,GAAD,EAAM,EAAN,CAAxB,GAAoCA,GAAxC;AAAA,KADA,CAAZ;AAEH;;AACD,SAAOqkB,eAAe,CAAClb,MAAD,CAAtB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASud,gBAAT,CAA0Bvd,MAA1B,EAAkC;AAC9B;AAAM;AAAiB6E,EAAAA,GAAG,GAAGwX,aAAa,CAACmB,aAAa,CAACxd,MAAD,CAAd,CAA1C,CAD8B,CAE9B;;AACA6E,EAAAA,GAAG,CAACyK,EAAJ,GAAS,IAAI/Z,IAAJ,CAASsP,GAAG,CAACyK,EAAJ,IAAU,IAAV,GAAiBzK,GAAG,CAACyK,EAAJ,CAAOxZ,OAAP,EAAjB,GAAoCoM,GAA7C,CAAT;;AACA,MAAI,CAACiU,OAAO,CAAC3gB,MAAM,CAACwN,MAAP,CAAc,EAAd,EAAkB6B,GAAlB,EAAuB;AAAEoR,IAAAA,QAAQ,EAAE;AAAZ,GAAvB,CAAD,CAAZ,EAA0D;AACtDpR,IAAAA,GAAG,CAACyK,EAAJ,GAAS,IAAI/Z,IAAJ,CAAS2M,GAAT,CAAT;AACH,GAN6B,CAO9B;;AACA;AACJ;AACA;AACA;AACA;;;AACI,SAAO2C,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS2Y,aAAT,CAAuBxd,MAAvB,EAA+B;AAC3B;AAAI;AAAiB3J,EAAAA,KAAK,GAAG2J,MAAM,CAACqY,EAApC;AACA;AAAM;AAAiBzd,EAAAA,MAAM,GAAGoF,MAAM,CAAC4Y,EAAvC;AACA5Y,EAAAA,MAAM,CAAC0C,OAAP,GAAiB1C,MAAM,CAAC0C,OAAP,IAAkBiM,SAAS,CAAC3O,MAAM,CAACyd,EAAR,CAA5C;;AACA,MAAIpnB,KAAK,KAAK,IAAV,IAAmBuE,MAAM,KAAKxC,SAAX,IAAwB/B,KAAK,KAAK,EAAzD,EAA8D;AAC1D,WAAO4gB,aAAa,CAACjX,MAAD,EAAS;AAAEc,MAAAA,SAAS,EAAE;AAAb,KAAT,CAApB;AACH;;AACD,MAAI3L,QAAQ,CAACkB,KAAD,CAAZ,EAAqB;AACjB2J,IAAAA,MAAM,CAACqY,EAAP,GAAYhiB,KAAK,GAAG2J,MAAM,CAAC0C,OAAP,CAAegb,QAAf,CAAwBrnB,KAAxB,CAApB;AACH;;AACD,MAAIhB,MAAM,CAACgB,KAAD,CAAV,EAAmB;AACf2J,IAAAA,MAAM,CAACsP,EAAP,GAAYlL,SAAS,CAAC/N,KAAD,CAArB;AACA,WAAO2J,MAAP;AACH,GAb0B,CAc3B;;;AACA,MAAI5J,OAAO,CAACwE,MAAD,CAAX,EAAqB;AACjBmiB,IAAAA,wBAAwB,CAAC/c,MAAD,CAAxB;AACH,GAFD,MAGK,IAAIpF,MAAJ,EAAY;AACbie,IAAAA,yBAAyB,CAAC7Y,MAAD,CAAzB;AACH,GAFI,MAGA;AACD2d,IAAAA,eAAe,CAAC3d,MAAD,CAAf;AACH;;AACD,MAAI,CAACmW,OAAO,CAACnW,MAAD,CAAZ,EAAsB;AAClBA,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAZ;AACH;;AACD,SAAOtP,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS2d,eAAT,CAAyB3d,MAAzB,EAAiC;AAC7B;AAAM;AAAiB3J,EAAAA,KAAK,GAAG2J,MAAM,CAACqY,EAAtC;;AACA,MAAIphB,WAAW,CAACZ,KAAD,CAAf,EAAwB;AACpB2J,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,EAAZ;AACH,GAFD,MAGK,IAAIF,MAAM,CAACgB,KAAD,CAAV,EAAmB;AACpB2J,IAAAA,MAAM,CAACsP,EAAP,GAAYlL,SAAS,CAAC/N,KAAD,CAArB;AACH,GAFI,MAGA,IAAIlB,QAAQ,CAACkB,KAAD,CAAZ,EAAqB;AACtBgkB,IAAAA,gBAAgB,CAACra,MAAD,CAAhB;AACH,GAFI,MAGA,IAAI5J,OAAO,CAACC,KAAD,CAAP,IAAkBA,KAAK,CAACU,MAA5B,EAAoC;AACrC;AAAM;AAAiB6mB,IAAAA,IAAI,GAAGvnB,KAAK,CAAC8R,KAAN,CAAY,CAAZ,CAA9B;;AACAnI,IAAAA,MAAM,CAACI,EAAP,GAAYwd,IAAI,CAACN,GAAL,CAAS,UAAAzmB,GAAG;AAAA,aAAI1B,QAAQ,CAAC0B,GAAD,CAAR,GAAgB+K,QAAQ,CAAC/K,GAAD,EAAM,EAAN,CAAxB,GAAoCA,GAAxC;AAAA,KAAZ,CAAZ;AACAqkB,IAAAA,eAAe,CAAClb,MAAD,CAAf;AACH,GAJI,MAKA,IAAIrJ,QAAQ,CAACN,KAAD,CAAZ,EAAqB;AACtBgnB,IAAAA,gBAAgB,CAACrd,MAAD,CAAhB;AACH,GAFI,MAGA,IAAI7J,QAAQ,CAACE,KAAD,CAAZ,EAAqB;AACtB;AACA2J,IAAAA,MAAM,CAACsP,EAAP,GAAY,IAAI/Z,IAAJ,CAASc,KAAT,CAAZ;AACH,GAHI,MAIA;AACD;AACA,WAAO4gB,aAAa,CAACjX,MAAD,CAApB;AACH;;AACD,SAAOA,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6d,gBAAT,CAA0BxnB,KAA1B,EAAiCuE,MAAjC,EAAyC2b,SAAzC,EAAoDvN,MAApD,EAA4D9N,KAA5D,EAAmE;AAC/D;AAAM;AAAiB8E,EAAAA,MAAM,GAAG,EAAhC;AACA;AAAI;AAAiB8d,EAAAA,MAAM,GAAGznB,KAA9B,CAF+D,CAG/D;AACA;AACA;AACA;AACA;AACA;;AACA,MAAKM,QAAQ,CAACmnB,MAAD,CAAR,IAAoBlnB,aAAa,CAACknB,MAAD,CAAlC,IAAgD1nB,OAAO,CAAC0nB,MAAD,CAAP,IAAmBA,MAAM,CAAC/mB,MAAP,KAAkB,CAAzF,EAA6F;AACzF+mB,IAAAA,MAAM,GAAG1lB,SAAT;AACH,GAX8D,CAY/D;AACA;AACA;;;AACA4H,EAAAA,MAAM,CAACiQ,OAAP,GAAiBjQ,MAAM,CAAC8P,MAAP,GAAgB5U,KAAjC;AACA8E,EAAAA,MAAM,CAACyd,EAAP,GAAYlH,SAAZ;AACAvW,EAAAA,MAAM,CAACqY,EAAP,GAAYyF,MAAZ;AACA9d,EAAAA,MAAM,CAAC4Y,EAAP,GAAYhe,MAAZ;AACAoF,EAAAA,MAAM,CAACb,OAAP,GAAiB6J,MAAjB;AACA,SAAOuU,gBAAgB,CAACvd,MAAD,CAAvB;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+d,SAAT,CAAmB1nB,KAAnB,EAA0BuE,MAA1B,EAAkC2b,SAAlC,EAA6CvN,MAA7C,EAAqD9N,KAArD,EAA4D;AACxD,MAAI7F,MAAM,CAACgB,KAAD,CAAV,EAAmB;AACf,WAAOA,KAAP;AACH;;AACD;AAAM;AAAiB2J,EAAAA,MAAM,GAAG6d,gBAAgB,CAACxnB,KAAD,EAAQuE,MAAR,EAAgB2b,SAAhB,EAA2BvN,MAA3B,EAAmC9N,KAAnC,CAAhD;AACA,SAAO8E,MAAM,CAACsP,EAAd;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAAS0O,QAAT,CAAkBjpB,GAAlB,EAAuB;AACnB,SAAOA,GAAG,GAAG,CAAN,GAAUC,IAAI,CAACoQ,KAAL,CAAWrQ,GAAG,GAAG,CAAC,CAAlB,IAAuB,CAAC,CAAlC,GAAsCC,IAAI,CAACoQ,KAAL,CAAWrQ,GAAX,CAA7C;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkpB,OAAT,CAAiBxgB,KAAjB,EAAwBC,KAAxB,EAAuD;AAAA,MAAxBvF,KAAwB,uEAAhB,cAAgB;;AACnD,MAAI,CAACsF,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,MAAIvF,KAAK,KAAK,cAAd,EAA8B;AAC1B,WAAOsF,KAAK,CAACL,OAAN,KAAkBM,KAAK,CAACN,OAAN,EAAzB;AACH;;AACD,SAAOM,KAAK,CAACN,OAAN,KAAkBiH,OAAO,CAAC5G,KAAD,EAAQtF,KAAR,CAAP,CAAsBiF,OAAtB,EAAzB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8gB,QAAT,CAAkBzgB,KAAlB,EAAyBC,KAAzB,EAAwD;AAAA,MAAxBvF,KAAwB,uEAAhB,cAAgB;;AACpD,MAAI,CAACsF,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,MAAIvF,KAAK,KAAK,cAAd,EAA8B;AAC1B,WAAOsF,KAAK,CAACL,OAAN,KAAkBM,KAAK,CAACN,OAAN,EAAzB;AACH;;AACD,SAAOqH,KAAK,CAAChH,KAAD,EAAQtF,KAAR,CAAL,CAAoBiF,OAApB,KAAgCM,KAAK,CAACN,OAAN,EAAvC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS+gB,aAAT,CAAuBtoB,IAAvB,EAA6BuoB,YAA7B,EAA2C;AACvC,MAAIA,YAAY,KAAKhmB,SAAjB,IAA8B,CAACgmB,YAA/B,IAA+C,CAACA,YAAY,CAACrnB,MAAjE,EAAyE;AACrE,WAAO,KAAP;AACH;;AACD,SAAOqnB,YAAY,CAAC1J,IAAb,CAAkB,UAAC7R,GAAD;AAAA,WAASA,GAAG,KAAKhN,IAAI,CAACgH,MAAL,EAAjB;AAAA,GAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwhB,MAAT,CAAgB5gB,KAAhB,EAAuBC,KAAvB,EAAsD;AAAA,MAAxBvF,KAAwB,uEAAhB,cAAgB;;AAClD,MAAI,CAACsF,KAAD,IAAU,CAACC,KAAf,EAAsB;AAClB,WAAO,KAAP;AACH;;AACD,MAAIvF,KAAK,KAAK,cAAd,EAA8B;AAC1B,WAAOsF,KAAK,CAACL,OAAN,OAAoBM,KAAK,CAACN,OAAN,EAA3B;AACH;;AACD;AAAM;AAAiBkhB,EAAAA,OAAO,GAAG5gB,KAAK,CAACN,OAAN,EAAjC;AACA,SAAQiH,OAAO,CAAC5G,KAAD,EAAQtF,KAAR,CAAP,CAAsBiF,OAAtB,MAAmCkhB,OAAnC,IACJA,OAAO,IAAI7Z,KAAK,CAAChH,KAAD,EAAQtF,KAAR,CAAL,CAAoBiF,OAApB,EADf;AAEH;AAED;AACA;AACA;AACA;;;AACA;AAAM;AAAiBmhB,WAAW,GAAG,0DAArC,C,CACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBC,QAAQ,GAAG,qKAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS7I,cAAT,CAAwBtf,KAAxB,EAA+BsR,GAA/B,EAAiD;AAAA,MAAb3H,MAAa,uEAAJ,EAAI;AAC7C;AAAM;AAAiBwU,EAAAA,QAAQ,GAAGiK,eAAe,CAACpoB,KAAD,EAAQsR,GAAR,CAAjD,CAD6C,CAE7C;;AACA,SAAO,IAAIkO,QAAJ,CAAarB,QAAb,EAAuBxU,MAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASye,eAAT,CAAyBpoB,KAAzB,EAAgCsR,GAAhC,EAAqC;AACjC;AACA,MAAItR,KAAK,IAAI,IAAb,EAAmB;AACf,WAAO,EAAP;AACH;;AACD,MAAIsgB,UAAU,CAACtgB,KAAD,CAAd,EAAuB;AACnB,WAAO;AACH+M,MAAAA,YAAY,EAAE/M,KAAK,CAAC2e,aADjB;AAEHnS,MAAAA,GAAG,EAAExM,KAAK,CAAC6e,KAFR;AAGHjT,MAAAA,KAAK,EAAE5L,KAAK,CAACqS;AAHV,KAAP;AAKH;;AACD,MAAIvS,QAAQ,CAACE,KAAD,CAAZ,EAAqB;AACjB;AACA,WAAOsR,GAAG,uBAAMA,GAAN,EAAYtR,KAAZ,IAAsB;AAAE+M,MAAAA,YAAY,EAAE/M;AAAhB,KAAhC;AACH;;AACD,MAAIlB,QAAQ,CAACkB,KAAD,CAAZ,EAAqB;AACjB;AAAI;AAAiByE,IAAAA,KAAK,GAAGyjB,WAAW,CAACjG,IAAZ,CAAiBjiB,KAAjB,CAA7B;;AACA,QAAIyE,KAAJ,EAAW;AACP;AAAM;AAAiBrB,MAAAA,IAAI,GAAIqB,KAAK,CAAC,CAAD,CAAL,KAAa,GAAd,GAAqB,CAAC,CAAtB,GAA0B,CAAxD;AACA,aAAO;AACHgH,QAAAA,IAAI,EAAE,CADH;AAEHe,QAAAA,GAAG,EAAE3L,KAAK,CAAC4D,KAAK,CAAClC,IAAD,CAAN,CAAL,GAAqBa,IAFvB;AAGH2R,QAAAA,KAAK,EAAElU,KAAK,CAAC4D,KAAK,CAACjC,IAAD,CAAN,CAAL,GAAqBY,IAHzB;AAIH4R,QAAAA,OAAO,EAAEnU,KAAK,CAAC4D,KAAK,CAAChC,MAAD,CAAN,CAAL,GAAuBW,IAJ7B;AAKHqJ,QAAAA,OAAO,EAAE5L,KAAK,CAAC4D,KAAK,CAAC/B,MAAD,CAAN,CAAL,GAAuBU,IAL7B;AAMH;AACA2J,QAAAA,YAAY,EAAElM,KAAK,CAAC8mB,QAAQ,CAAC9mB,KAAK,CAAC4D,KAAK,CAAC9B,WAAD,CAAN,CAAL,GAA4B,IAA7B,CAAT,CAAL,GAAoDS;AAP/D,OAAP;AASH;;AACDqB,IAAAA,KAAK,GAAG0jB,QAAQ,CAAClG,IAAT,CAAcjiB,KAAd,CAAR;;AACA,QAAIyE,KAAJ,EAAW;AACP;AAAM;AAAiBrB,MAAAA,MAAI,GAAIqB,KAAK,CAAC,CAAD,CAAL,KAAa,GAAd,GAAqB,CAAC,CAAtB,GAA2BA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAd,GAAqB,CAArB,GAAyB,CAAjF;;AACA,aAAO;AACHgH,QAAAA,IAAI,EAAE4c,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CADX;AAEHwI,QAAAA,KAAK,EAAEyc,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CAFZ;AAGHkM,QAAAA,IAAI,EAAE+Y,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CAHX;AAIHoJ,QAAAA,GAAG,EAAE6b,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CAJV;AAKH2R,QAAAA,KAAK,EAAEsT,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CALZ;AAMH4R,QAAAA,OAAO,EAAEqT,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX,CANd;AAOHqJ,QAAAA,OAAO,EAAE4b,QAAQ,CAAC5jB,KAAK,CAAC,CAAD,CAAN,EAAWrB,MAAX;AAPd,OAAP;AASH;AACJ;;AACD,MAAI9C,QAAQ,CAACN,KAAD,CAAR,KAAoB,UAAUA,KAAV,IAAmB,QAAQA,KAA/C,CAAJ,EAA2D;AACvD;AAAM;AAAiBsoB,IAAAA,OAAO,GAAGC,iBAAiB,CAACb,SAAS,CAAC1nB,KAAK,CAACwoB,IAAP,CAAV,EAAwBd,SAAS,CAAC1nB,KAAK,CAACyoB,EAAP,CAAjC,CAAlD;AACA,WAAO;AACH1b,MAAAA,YAAY,EAAEub,OAAO,CAACvb,YADnB;AAEHnB,MAAAA,KAAK,EAAE0c,OAAO,CAACpc;AAFZ,KAAP;AAIH;;AACD,SAAOlM,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASqoB,QAAT,CAAkBK,GAAlB,EAAuBtlB,IAAvB,EAA6B;AACzB;AACA;AACA;AACA;AAAM;AAAiBoL,EAAAA,GAAG,GAAGka,GAAG,IAAIxP,UAAU,CAACwP,GAAG,CAACzjB,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAD,CAA9C,CAJyB,CAKzB;;AACA,SAAO,CAACvF,KAAK,CAAC8O,GAAD,CAAL,GAAa,CAAb,GAAiBA,GAAlB,IAAyBpL,IAAhC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASulB,yBAAT,CAAmCC,IAAnC,EAAyCC,KAAzC,EAAgD;AAC5C;AAAM;AAAiBra,EAAAA,GAAG,GAAG;AAAEzB,IAAAA,YAAY,EAAE,CAAhB;AAAmBb,IAAAA,MAAM,EAAE;AAA3B,GAA7B;AACAsC,EAAAA,GAAG,CAACtC,MAAJ,GAAatF,QAAQ,CAACiiB,KAAD,CAAR,GAAkBjiB,QAAQ,CAACgiB,IAAD,CAA1B,GACT,CAAC9iB,WAAW,CAAC+iB,KAAD,CAAX,GAAqB/iB,WAAW,CAAC8iB,IAAD,CAAjC,IAA2C,EAD/C;;AAEA;AAAM;AAAiBE,EAAAA,SAAS,GAAGva,GAAG,CAACR,SAAS,CAAC6a,IAAD,CAAV,EAAkBpa,GAAG,CAACtC,MAAtB,EAA8B,OAA9B,CAAtC;;AACA,MAAI0b,OAAO,CAACkB,SAAD,EAAYD,KAAZ,CAAX,EAA+B;AAC3B,MAAEra,GAAG,CAACtC,MAAN;AACH;;AACDsC,EAAAA,GAAG,CAACzB,YAAJ,GAAmB,CAAC8b,KAAD,GAAS,CAAEta,GAAG,CAACR,SAAS,CAAC6a,IAAD,CAAV,EAAkBpa,GAAG,CAACtC,MAAtB,EAA8B,OAA9B,CAAjC;AACA,SAAOsC,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS+Z,iBAAT,CAA2BK,IAA3B,EAAiCC,KAAjC,EAAwC;AACpC,MAAI,EAAEtpB,WAAW,CAACqpB,IAAD,CAAX,IAAqBrpB,WAAW,CAACspB,KAAD,CAAlC,CAAJ,EAAgD;AAC5C,WAAO;AAAE9b,MAAAA,YAAY,EAAE,CAAhB;AAAmBb,MAAAA,MAAM,EAAE;AAA3B,KAAP;AACH;;AACD;AAAI;AAAiBsC,EAAAA,GAArB;;AACA;AAAM;AAAiBua,EAAAA,MAAM,GAAG1O,eAAe,CAACwO,KAAD,EAAQD,IAAR,EAAc;AAAElP,IAAAA,OAAO,EAAEkP,IAAI,CAACpO,iBAAL;AAAX,GAAd,CAA/C;;AACA,MAAIqN,QAAQ,CAACe,IAAD,EAAOG,MAAP,CAAZ,EAA4B;AACxBva,IAAAA,GAAG,GAAGma,yBAAyB,CAACC,IAAD,EAAOG,MAAP,CAA/B;AACH,GAFD,MAGK;AACDva,IAAAA,GAAG,GAAGma,yBAAyB,CAACI,MAAD,EAASH,IAAT,CAA/B;AACApa,IAAAA,GAAG,CAACzB,YAAJ,GAAmB,CAACyB,GAAG,CAACzB,YAAxB;AACAyB,IAAAA,GAAG,CAACtC,MAAJ,GAAa,CAACsC,GAAG,CAACtC,MAAlB;AACH;;AACD,SAAOsC,GAAP;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASD,GAAT,CAAa/O,IAAb,EAAmBqS,GAAnB,EAAwBmX,MAAxB,EAAgCnkB,KAAhC,EAAuC;AACnC;AAAM;AAAiB6Z,EAAAA,GAAG,GAAGY,cAAc,CAACzN,GAAD,EAAMmX,MAAN,CAA3C;AACA,SAAOC,WAAW,CAACzpB,IAAD,EAAOkf,GAAP,EAAY,CAAZ,EAAe7Z,KAAf,CAAlB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4J,QAAT,CAAkBjP,IAAlB,EAAwBqS,GAAxB,EAA6BmX,MAA7B,EAAqCnkB,KAArC,EAA4C;AACxC;AAAM;AAAiB6Z,EAAAA,GAAG,GAAGY,cAAc,CAACzN,GAAD,EAAMmX,MAAN,CAA3C;AACA,SAAOC,WAAW,CAACzpB,IAAD,EAAOkf,GAAP,EAAY,CAAC,CAAb,EAAgB7Z,KAAhB,CAAlB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASokB,WAAT,CAAqBzpB,IAArB,EAA2B2e,QAA3B,EAAqC+K,QAArC,EAA+CrkB,KAA/C,EAAsD;AAClD;AAAM;AAAiBkI,EAAAA,YAAY,GAAGoR,QAAQ,CAACQ,aAA/C;AACA;AAAM;AAAiBC,EAAAA,IAAI,GAAG+I,QAAQ,CAACxJ,QAAQ,CAACU,KAAV,CAAtC;AACA;AAAM;AAAiB3S,EAAAA,MAAM,GAAGyb,QAAQ,CAACxJ,QAAQ,CAAC9L,OAAV,CAAxC,CAHkD,CAIlD;AACA;;AACA,MAAInG,MAAJ,EAAY;AACRe,IAAAA,QAAQ,CAACzN,IAAD,EAAOoH,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAR,GAAwBqH,MAAM,GAAGgd,QAAxC,EAAkDrkB,KAAlD,CAAR;AACH;;AACD,MAAI+Z,IAAJ,EAAU;AACNhR,IAAAA,OAAO,CAACpO,IAAD,EAAOkH,OAAO,CAAClH,IAAD,EAAOqF,KAAP,CAAP,GAAuB+Z,IAAI,GAAGsK,QAArC,EAA+CrkB,KAA/C,CAAP;AACH;;AACD,MAAIkI,YAAJ,EAAkB;AACde,IAAAA,OAAO,CAACtO,IAAD,EAAOC,OAAO,CAACD,IAAD,CAAP,GAAgBuN,YAAY,GAAGmc,QAAtC,CAAP;AACH;;AACD,SAAOnb,SAAS,CAACvO,IAAD,CAAhB,CAfkD,CAgBlD;AACA;AACA;AACA;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASme,aAAT,GAAyB;AACrB;AACA9Z,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAOoC,MAAM,CAAChH,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAN,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd;AAIAwE,EAAAA,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACnD,WAAOA,IAAI,CAACC,MAAL,CAAYiQ,WAAZ,CAAwB9U,IAAxB,EAA8B4E,IAAI,CAACG,MAAnC,EAA2CH,IAAI,CAACS,KAAhD,CAAP;AACH,GAFa,CAAd;AAGAhB,EAAAA,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACpD,WAAOA,IAAI,CAACC,MAAL,CAAYgQ,aAAZ,CAA0B7U,IAA1B,EAAgC4E,IAAI,CAACG,MAArC,EAA6CH,IAAI,CAACS,KAAlD,CAAP;AACH,GAFa,CAAd;AAGAhB,EAAAA,cAAc,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,EAAqB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AACrD,WAAOA,IAAI,CAACC,MAAL,CAAY+P,QAAZ,CAAqB5U,IAArB,EAA2B4E,IAAI,CAACG,MAAhC,EAAwCH,IAAI,CAACS,KAA7C,CAAP;AACH,GAFa,CAAd;AAGAhB,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAO+kB,kBAAkB,CAAC3pB,IAAD,EAAO4E,IAAI,CAACC,MAAZ,EAAoBD,IAAI,CAACS,KAAzB,CAAlB,CACFxF,QADE,CACO,EADP,CAAP,CADkD,CAGlD;AACH,GAJa,CAAd;AAKAwE,EAAAA,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,UAAUrE,IAAV,EAAgB4E,IAAhB,EAAsB;AAClD,WAAOglB,eAAe,CAAC5pB,IAAD,EAAO4E,IAAI,CAACS,KAAZ,CAAf,CACFxF,QADE,CACO,EADP,CAAP;AAEH,GAHa,CAAd,CApBqB,CAwBrB;;AACAkC,EAAAA,YAAY,CAAC,KAAD,EAAQ,GAAR,CAAZ;AACAA,EAAAA,YAAY,CAAC,SAAD,EAAY,GAAZ,CAAZ;AACAA,EAAAA,YAAY,CAAC,YAAD,EAAe,GAAf,CAAZ,CA3BqB,CA4BrB;;AACAkH,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,GAAD,EAAMZ,SAAN,CAAb;AACAY,EAAAA,aAAa,CAAC,IAAD,EAAO,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC5C,WAAOA,MAAM,CAACglB,gBAAP,CAAwBzgB,QAAxB,CAAP;AACH,GAFY,CAAb;AAGAH,EAAAA,aAAa,CAAC,KAAD,EAAQ,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC7C,WAAOA,MAAM,CAACilB,kBAAP,CAA0B1gB,QAA1B,CAAP;AACH,GAFY,CAAb;AAGAH,EAAAA,aAAa,CAAC,MAAD,EAAS,UAAUG,QAAV,EAAoBvE,MAApB,EAA4B;AAC9C,WAAOA,MAAM,CAACklB,aAAP,CAAqB3gB,QAArB,CAAP;AACH,GAFY,CAAb;AAGAgB,EAAAA,iBAAiB,CAAC,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,CAAD,EAAwB,UAAU5J,KAAV,EAAiBsP,IAAjB,EAAuB3F,MAAvB,EAA+B7F,KAA/B,EAAsC;AAC3E;AAAM;AAAiByL,IAAAA,OAAO,GAAG5F,MAAM,CAAC0C,OAAP,CAAemd,aAAf,CAA6BxpB,KAA7B,EAAoC8D,KAApC,EAA2C6F,MAAM,CAACb,OAAlD,CAAjC,CAD2E,CAE3E;;;AACA,QAAIyG,OAAO,IAAI,IAAf,EAAqB;AACjBD,MAAAA,IAAI,CAAC,GAAD,CAAJ,GAAYC,OAAZ;AACH,KAFD,MAGK;AACDrE,MAAAA,eAAe,CAACvB,MAAD,CAAf,CAAwB+W,cAAxB,GAAyC,CAAC,CAAC1gB,KAA3C;AACH;;AACD,WAAO2J,MAAP;AACH,GAVgB,CAAjB;AAWAC,EAAAA,iBAAiB,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,EAAkB,UAAU5J,KAAV,EAAiBsP,IAAjB,EAAuB3F,MAAvB,EAA+B7F,KAA/B,EAAsC;AACrEwL,IAAAA,IAAI,CAACxL,KAAD,CAAJ,GAAcjD,KAAK,CAACb,KAAD,CAAnB;AACA,WAAO2J,MAAP;AACH,GAHgB,CAAjB;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS8f,YAAT,CAAsBzpB,KAAtB,EAA6BqE,MAA7B,EAAqC;AACjC,MAAI,CAACvF,QAAQ,CAACkB,KAAD,CAAb,EAAsB;AAClB,WAAOA,KAAP;AACH;;AACD;AAAM;AAAiB0pB,EAAAA,IAAI,GAAGne,QAAQ,CAACvL,KAAD,EAAQ,EAAR,CAAtC;;AACA,MAAI,CAACN,KAAK,CAACgqB,IAAD,CAAV,EAAkB;AACd,WAAOA,IAAP;AACH;;AACD;AAAM;AAAiBC,EAAAA,QAAQ,GAAGtlB,MAAM,CAACmlB,aAAP,CAAqBxpB,KAArB,CAAlC;;AACA,MAAIF,QAAQ,CAAC6pB,QAAD,CAAZ,EAAwB;AACpB,WAAOA,QAAP;AACH;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyB5pB,KAAzB,EAAsD;AAAA,MAAtBqE,MAAsB,uEAAbiU,SAAS,EAAI;;AAClD,MAAIxZ,QAAQ,CAACkB,KAAD,CAAZ,EAAqB;AACjB,WAAOqE,MAAM,CAACmlB,aAAP,CAAqBxpB,KAArB,IAA8B,CAA9B,IAAmC,CAA1C;AACH;;AACD,SAAOF,QAAQ,CAACE,KAAD,CAAR,IAAmBN,KAAK,CAACM,KAAD,CAAxB,GAAkC,IAAlC,GAAyCA,KAAhD;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmU,YAAT,CAAsB3U,IAAtB,EAA4BQ,KAA5B,EAAgE;AAAA,MAA7BqE,MAA6B,uEAApBiU,SAAS,EAAW;AAAA,MAAPzT,KAAO;AAC5D;AAAM;AAAiB2H,EAAAA,GAAG,GAAGhG,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAAnC;;AACA;AAAM;AAAiB4iB,EAAAA,MAAM,GAAGgC,YAAY,CAACzpB,KAAD,EAAQqE,MAAR,CAA5C;;AACA,SAAOkK,GAAG,CAAC/O,IAAD,EAAOioB,MAAM,GAAGjb,GAAhB,EAAqB,KAArB,CAAV;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASqd,YAAT,CAAsBrqB,IAAtB,EAA4BqF,KAA5B,EAAmC;AAC/B,SAAO2B,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASskB,kBAAT,CAA4B3pB,IAA5B,EAA+D;AAAA,MAA7B6E,MAA6B,uEAApBiU,SAAS,EAAW;AAAA,MAAPzT,KAAO;AAC3D,SAAO,CAAC2B,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAAN,GAAsB,CAAtB,GAA0BR,MAAM,CAAC6C,cAAP,EAA3B,IAAsD,CAA7D;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgH,kBAAT,CAA4B1O,IAA5B,EAAkCQ,KAAlC,EAAoD;AAAA,MAAXoE,IAAW,uEAAJ,EAAI;AAChD;AAAM;AAAiBmL,EAAAA,OAAO,GAAG4Z,kBAAkB,CAAC3pB,IAAD,EAAO4E,IAAI,CAACC,MAAZ,EAAoBD,IAAI,CAACS,KAAzB,CAAnD;AACA,SAAO0J,GAAG,CAAC/O,IAAD,EAAOQ,KAAK,GAAGuP,OAAf,EAAwB,KAAxB,CAAV;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS6Z,eAAT,CAAyB5pB,IAAzB,EAA+BqF,KAA/B,EAAsC;AAClC,SAAO2B,MAAM,CAAChH,IAAD,EAAOqF,KAAP,CAAN,IAAuB,CAA9B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsJ,eAAT,CAAyB3O,IAAzB,EAA+BQ,KAA/B,EAAiD;AAAA,MAAXoE,IAAW,uEAAJ,EAAI;AAC7C;AACA;AACA;AACA;AAAM;AAAiBmL,EAAAA,OAAO,GAAGqa,eAAe,CAAC5pB,KAAD,EAAQoE,IAAI,CAACC,MAAb,CAAhD;AACA,SAAO8P,YAAY,CAAC3U,IAAD,EAAOqqB,YAAY,CAACrqB,IAAD,CAAZ,GAAqB,CAArB,GAAyB+P,OAAzB,GAAmCA,OAAO,GAAG,CAApD,CAAnB;AACH;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA;AAAM;AAAiBua,SAAS,GAAG;AAC/B,KAAG,GAD4B;AAE/B,KAAG,GAF4B;AAG/B,KAAG,GAH4B;AAI/B,KAAG,GAJ4B;AAK/B,KAAG,GAL4B;AAM/B,KAAG,GAN4B;AAO/B,KAAG,GAP4B;AAQ/B,KAAG,GAR4B;AAS/B,KAAG,GAT4B;AAU/B,KAAG;AAV4B,CAAnC;AAYA;AAAM;AAAiBC,SAAS,GAAG;AAC/B,OAAK,GAD0B;AAE/B,OAAK,GAF0B;AAG/B,OAAK,GAH0B;AAI/B,OAAK,GAJ0B;AAK/B,OAAK,GAL0B;AAM/B,OAAK,GAN0B;AAO/B,OAAK,GAP0B;AAQ/B,OAAK,GAR0B;AAS/B,OAAK,GAT0B;AAU/B,OAAK;AAV0B,CAAnC;;AAYA;AAAM;AAAiBC,UAAU,GAAG,SAAbA,UAAa,CAAUtrB,GAAV,EAAe;AAC/C,SAAOA,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBA,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBA,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBA,GAAG,GAAG,GAAN,IAAa,CAAb,IAAkBA,GAAG,GAAG,GAAN,IAAa,EAA/B,GAAoC,CAApC,GAAwCA,GAAG,GAAG,GAAN,IAAa,EAAb,GAAkB,CAAlB,GAAsB,CAArH;AACH,CAFD;;AAGA;AAAM;AAAiBurB,OAAO,GAAG;AAC7BrkB,EAAAA,CAAC,EAAE,CAAC,cAAD,EAAiB,aAAjB,EAAgC,CAAC,SAAD,EAAY,SAAZ,CAAhC,EAAwD,SAAxD,EAAmE,UAAnE,EAA+E,UAA/E,CAD0B;AAE7BR,EAAAA,CAAC,EAAE,CAAC,cAAD,EAAiB,aAAjB,EAAgC,CAAC,SAAD,EAAY,SAAZ,CAAhC,EAAwD,UAAxD,EAAoE,UAApE,EAAgF,UAAhF,CAF0B;AAG7BM,EAAAA,CAAC,EAAE,CAAC,aAAD,EAAgB,YAAhB,EAA8B,CAAC,QAAD,EAAW,QAAX,CAA9B,EAAoD,UAApD,EAAgE,SAAhE,EAA2E,SAA3E,CAH0B;AAI7BL,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,UAAf,EAA2B,CAAC,OAAD,EAAU,OAAV,CAA3B,EAA+C,SAA/C,EAA0D,UAA1D,EAAsE,QAAtE,CAJ0B;AAK7BM,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,UAAf,EAA2B,CAAC,OAAD,EAAU,OAAV,CAA3B,EAA+C,SAA/C,EAA0D,SAA1D,EAAqE,QAArE,CAL0B;AAM7BR,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,UAAf,EAA2B,CAAC,OAAD,EAAU,OAAV,CAA3B,EAA+C,UAA/C,EAA2D,UAA3D,EAAuE,QAAvE;AAN0B,CAAjC;;AAQA;AAAM;AAAiB+kB,SAAS,GAAG,SAAZA,SAAY,CAAUC,CAAV,EAAa;AAC5C,SAAO,UAAUzrB,GAAV,EAAeuT,aAAf,EAA8B;AACjC;AAAM;AAAiBmY,IAAAA,CAAC,GAAGJ,UAAU,CAACtrB,GAAD,CAArC;AACA;AAAI;AAAiBK,IAAAA,GAAG,GAAGkrB,OAAO,CAACE,CAAD,CAAP,CAAWH,UAAU,CAACtrB,GAAD,CAArB,CAA3B;;AACA,QAAI0rB,CAAC,KAAK,CAAV,EAAa;AACTrrB,MAAAA,GAAG,GAAGA,GAAG,CAACkT,aAAa,GAAG,CAAH,GAAO,CAArB,CAAT;AACH;;AACD,WAAO;AAAC;AAAkBlT,MAAAA,GAAnB,CAAyBkG,OAAzB,CAAiC,KAAjC,EAAwCvG,GAAG,CAACW,QAAJ,EAAxC;AAAP;AACH,GAPD;AAQH,CATD;;AAUA;AAAM;AAAiB6M,MAAM,GAAG,CAC5B,OAD4B,EAE5B,QAF4B,EAG5B,MAH4B,EAI5B,OAJ4B,EAK5B,MAL4B,EAM5B,OAN4B,EAO5B,OAP4B,EAQ5B,OAR4B,EAS5B,QAT4B,EAU5B,QAV4B,EAW5B,QAX4B,EAY5B,QAZ4B,CAAhC;AAcA;AAAM;AAAiBme,QAAQ,GAAG;AAC9BlN,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAANA,MAF8B;AAG9BD,EAAAA,WAAW,EAAEC,MAHiB;AAI9BkI,EAAAA,QAAQ,EAAE,sDAAsDjE,KAAtD,CAA4D,GAA5D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,wCAAwClE,KAAxC,CAA8C,GAA9C,CALe;AAM9BmE,EAAAA,WAAW,EAAE,gBAAgBnE,KAAhB,CAAsB,GAAtB,CANiB;AAO9Bma,EAAAA,kBAAkB,EAAE,IAPU;AAQ9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,sBAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GARc;AAgB9B6G,EAAAA,aAAa,EAAE,KAhBe;;AAiB9B;AACJ;AACA;AACA;AACI6D,EAAAA,IArB8B,gBAqBzBxb,KArByB,EAqBlB;AACR,WAAO,QAAQA,KAAf;AACH,GAvB6B;;AAwB9B;AACJ;AACA;AACA;AACA;AACA;AACI+K,EAAAA,QA9B8B,oBA8BrB5J,IA9BqB,EA8BfC,MA9Be,EA8BP6T,OA9BO,EA8BE;AAC5B,QAAI9T,IAAI,GAAG,EAAX,EAAe;AACX,aAAO,GAAP;AACH,KAFD,MAGK;AACD,aAAO,GAAP;AACH;AACJ,GArC6B;AAsC9BmW,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,uBADH;AAENC,IAAAA,OAAO,EAAE,sBAFH;AAGNC,IAAAA,QAAQ,EAAE,sBAHJ;AAINC,IAAAA,OAAO,EAAE,qBAJH;AAKNC,IAAAA,QAAQ,EAAE,sBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAtCoB;AA8C9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,QADE;AAEVC,IAAAA,IAAI,EAAE,QAFI;AAGVlR,IAAAA,CAAC,EAAEskB,SAAS,CAAC,GAAD,CAHF;AAIVnT,IAAAA,EAAE,EAAEmT,SAAS,CAAC,GAAD,CAJH;AAKV9kB,IAAAA,CAAC,EAAE8kB,SAAS,CAAC,GAAD,CALF;AAMVlT,IAAAA,EAAE,EAAEkT,SAAS,CAAC,GAAD,CANH;AAOVxkB,IAAAA,CAAC,EAAEwkB,SAAS,CAAC,GAAD,CAPF;AAQVjT,IAAAA,EAAE,EAAEiT,SAAS,CAAC,GAAD,CARH;AASV7kB,IAAAA,CAAC,EAAE6kB,SAAS,CAAC,GAAD,CATF;AAUVhT,IAAAA,EAAE,EAAEgT,SAAS,CAAC,GAAD,CAVH;AAWVvkB,IAAAA,CAAC,EAAEukB,SAAS,CAAC,GAAD,CAXF;AAYV/S,IAAAA,EAAE,EAAE+S,SAAS,CAAC,GAAD,CAZH;AAaV/kB,IAAAA,CAAC,EAAE+kB,SAAS,CAAC,GAAD,CAbF;AAcV9S,IAAAA,EAAE,EAAE8S,SAAS,CAAC,GAAD;AAdH,GA9CgB;;AA8D9B;AACJ;AACA;AACA;AACI7C,EAAAA,QAlE8B,oBAkErBtoB,GAlEqB,EAkEhB;AACV,WAAOA,GAAG,CAACkG,OAAJ,CAAY,eAAZ,EAA6B,UAAUR,KAAV,EAAiB;AACjD,aAAOslB,SAAS,CAACtlB,KAAD,CAAhB;AACH,KAFM,EAEJQ,OAFI,CAEI,IAFJ,EAEU,GAFV,CAAP;AAGH,GAtE6B;;AAuE9B;AACJ;AACA;AACA;AACIgb,EAAAA,UA3E8B,sBA2EnBlhB,GA3EmB,EA2Ed;AACZ,WAAOA,GAAG,CAACkG,OAAJ,CAAY,KAAZ,EAAmB,UAAUR,KAAV,EAAiB;AACvC,aAAOqlB,SAAS,CAACrlB,KAAD,CAAhB;AACH,KAFM,EAEJQ,OAFI,CAEI,IAFJ,EAEU,GAFV,CAAP;AAGH,GA/E6B;AAgF9BqK,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,EAHH,CAGM;;AAHN;AAhFwB,CAAlC;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBqb,QAAQ,GAAG;AAC9BpN,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,oFAAoFiE,KAApF,CAA0F,GAA1F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,yDAAyDjE,KAAzD,CAA+D,GAA/D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,WAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,kBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,aAFH;AAGNC,IAAAA,QAAQ,EAAE,aAHJ;AAINC,IAAAA,OAAO,EAAE,cAJH;AAKNC,IAAAA,QAAQ,EAAE,kBAAUlR,CAAV,EAAa;AACnB,cAAQA,CAAR;AACI,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,4BAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,2BAAP;AATR;AAWH,KAjBK;AAkBNmR,IAAAA,QAAQ,EAAE;AAlBJ,GAfoB;AAmC9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAE,iBAHO;AAIVmR,IAAAA,EAAE,EAAE,YAJM;AAKV3R,IAAAA,CAAC,EAAE,QALO;AAMV4R,IAAAA,EAAE,EAAE,WANM;AAOVtR,IAAAA,CAAC,EAAE,KAPO;AAQVuR,IAAAA,EAAE,EAAE,SARM;AASV5R,IAAAA,CAAC,EAAE,KATO;AAUV6R,IAAAA,EAAE,EAAE,QAVM;AAWVvR,IAAAA,CAAC,EAAE,OAXO;AAYVwR,IAAAA,EAAE,EAAE,WAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAnCgB;AAmD9BK,EAAAA,sBAAsB,EAAE,6BAnDM;AAoD9BzT,EAAAA,OAAO,EAAE,iBAAU0lB,IAAV,EAAgB;AACrB;AAAM;AAAiBlL,IAAAA,MAAM,GAAGgM,MAAM,CAACd,IAAD,CAAtC;AACA;AAAI;AAAiBe,IAAAA,SAAS,GAAGjM,MAAM,GAAG,EAA1C;;AAA8C;AAC9CkM,IAAAA,WAAW,GAAGlM,MAAM,GAAG,GADvB;;AAEA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AACd,aAAOA,MAAM,GAAG,KAAhB;AACH,KAFD,MAGK,IAAIkM,WAAW,KAAK,CAApB,EAAuB;AACxB,aAAOlM,MAAM,GAAG,KAAhB;AACH,KAFI,MAGA,IAAIkM,WAAW,GAAG,EAAd,IAAoBA,WAAW,GAAG,EAAtC,EAA0C;AAC3C,aAAOlM,MAAM,GAAG,KAAhB;AACH,KAFI,MAGA,IAAIiM,SAAS,KAAK,CAAlB,EAAqB;AACtB,aAAOjM,MAAM,GAAG,KAAhB;AACH,KAFI,MAGA,IAAIiM,SAAS,KAAK,CAAlB,EAAqB;AACtB,aAAOjM,MAAM,GAAG,KAAhB;AACH,KAFI,MAGA,IAAIiM,SAAS,KAAK,CAAd,IAAmBA,SAAS,KAAK,CAArC,EAAwC;AACzC,aAAOjM,MAAM,GAAG,KAAhB;AACH,KAFI,MAGA;AACD,aAAOA,MAAM,GAAG,KAAhB;AACH;AACJ,GA7E6B;AA8E9BlP,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA9EwB,CAAlC;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiByb,cAAc,GAAG,8DAA8Dxa,KAA9D,CAAoE,GAApE,CAAtC;;AAAgH;AAChHlE,YAAW,GAAG,kDAAkDkE,KAAlD,CAAwD,GAAxD,CADd;;AAEA;AAAI;AAAiB7D,WAAW,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,OAAvD,EAAgE,OAAhE,EAAyE,OAAzE,EAAkF,OAAlF,EAA2F,OAA3F,EAAoG,OAApG,CAAnC;AACA;AAAI;AAAiBF,WAAW,GAAG,2KAAnC;AACA;AAAM;AAAiBwe,QAAQ,GAAG;AAC9BzN,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,oFAAoFiE,KAApF,CAA0F,GAA1F,CAFsB;;AAG9B;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WAT8B,uBASlBzM,IATkB,EASZ+E,MATY,EASJM,KATI,EASG;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOmrB,cAAP;AACH;;AACD,QAAI,QAAQnY,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AACtB,aAAO0H,YAAW,CAACrF,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAlB;AACH;;AACD,WAAO8lB,cAAc,CAAC/jB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAArB;AACH,GAjB6B;AAkB9BuH,EAAAA,WAAW,EAAXA,WAlB8B;AAmB9BD,EAAAA,gBAAgB,EAAEC,WAnBY;AAoB9Bye,EAAAA,iBAAiB,EAAE,uFApBW;AAqB9BC,EAAAA,sBAAsB,EAAE,yFArBM;AAsB9Bxe,EAAAA,WAAW,EAAXA,WAtB8B;AAuB9Bye,EAAAA,eAAe,EAAEze,WAvBa;AAwB9B0e,EAAAA,gBAAgB,EAAE1e,WAxBY;AAyB9B8H,EAAAA,QAAQ,EAAE,8DAA8DjE,KAA9D,CAAoE,GAApE,CAzBoB;AA0B9BkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CA1Be;AA2B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA3BiB;AA4B9Bma,EAAAA,kBAAkB,EAAE,IA5BU;AA6B9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,4BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA7Bc;AAqC9BwG,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACQnB,IAAAA,OALM,mBAKE3W,IALF,EAKQ;AACV,aAAO,cAAc,QAAQwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAA3B,IAAgC,KAAhC,GAAwC,EAAtD,IAA4D,MAAnE;AACH,KAPK;;AAQN;AACR;AACA;AACA;AACQ4W,IAAAA,OAZM,mBAYE5W,IAZF,EAYQ;AACV,aAAO,cAAc,QAAQwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAA3B,IAAgC,KAAhC,GAAwC,EAAtD,IAA4D,MAAnE;AACH,KAdK;;AAeN;AACR;AACA;AACA;AACQ6W,IAAAA,QAnBM,oBAmBG7W,IAnBH,EAmBS;AACX,aAAO,cAAc,QAAQwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAA3B,IAAgC,KAAhC,GAAwC,EAAtD,IAA4D,MAAnE;AACH,KArBK;;AAsBN;AACR;AACA;AACA;AACQ8W,IAAAA,OA1BM,mBA0BE9W,IA1BF,EA0BQ;AACV,aAAO,cAAc,QAAQwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAA3B,IAAgC,KAAhC,GAAwC,EAAtD,IAA4D,MAAnE;AACH,KA5BK;;AA6BN;AACR;AACA;AACA;AACQ+W,IAAAA,QAjCM,oBAiCG/W,IAjCH,EAiCS;AACX,aAAO,iBAAiB,iBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApC,IAAyC,cAAzC,GAA0D,EAA3E,IAAiF,MAAxF;AACH,KAnCK;AAoCNgX,IAAAA,QAAQ,EAAE;AApCJ,GArCoB;AA2E9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,OAFI;AAGVlR,IAAAA,CAAC,EAAE,YAHO;AAIVmR,IAAAA,EAAE,EAAE,WAJM;AAKV3R,IAAAA,CAAC,EAAE,UALO;AAMV4R,IAAAA,EAAE,EAAE,WANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA3EgB;AA2F9BK,EAAAA,sBAAsB,EAAE,wBA3FM;;AA4F9B;AACJ;AACA;AACA;AACIzT,EAAAA,OAhG8B,mBAgGtB0lB,IAhGsB,EAgGhB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;AACA;AAAM;AAAiB3kB,IAAAA,MAAM,GAAIrG,GAAG,GAAG,CAAP,GAAY,GAAZ,GAC3BA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAAtB,GAA2B,GAA3B,GACKA,GAAG,KAAK,CAAT,GAAc,GAAd,GACKA,GAAG,KAAK,CAAT,GAAc,GAAd,GAAoB,GAHhC;AAIA,WAAOA,GAAG,GAAGqG,MAAb;AACH,GAvG6B;AAwG9BuK,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAxGwB,CAAlC;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB+b,QAAQ,GAAG,oFAAoF9a,KAApF,CAA0F,GAA1F,CAAlC;AACA;AAAM;AAAiB+a,aAAa,GAAG,kDAAkD/a,KAAlD,CAAwD,GAAxD,CAAvC;AACA;AACA;AACA;AACA;;AACA,SAASgb,MAAT,CAAgBzsB,GAAhB,EAAqB;AACjB,SAAQA,GAAG,GAAG,CAAP,IAAcA,GAAG,GAAG,CAApB,IAA2B,CAAC,EAAEA,GAAG,GAAG,EAAR,CAAD,KAAiB,CAAnD;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0sB,SAAT,CAAmB1sB,GAAnB,EAAwBuT,aAAxB,EAAuCX,GAAvC,EAA4CY,QAA5C,EAAsD;AAClD;AAAM;AAAiB8Q,EAAAA,MAAM,GAAGtkB,GAAG,GAAG,GAAtC;;AACA,UAAQ4S,GAAR;AACI,SAAK,GAAL;AACI;AACA,aAAQW,aAAa,IAAIC,QAAlB,GAA8B,YAA9B,GAA6C,eAApD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,SAAd,GAA0B,QAA9B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,WAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAO/Q,aAAa,GAAG,QAAH,GAAeC,QAAQ,GAAG,QAAH,GAAc,SAAzD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,QAAd,GAAyB,OAA7B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,UAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAO/Q,aAAa,GAAG,QAAH,GAAeC,QAAQ,GAAG,QAAH,GAAc,SAAzD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,QAAd,GAAyB,OAA7B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,UAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,KAA9B,GAAsC,MAA7C;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,KAAd,GAAsB,KAA1B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,KAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,OAA9B,GAAwC,SAA/C;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,QAAd,GAAyB,QAA7B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,QAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,KAA9B,GAAsC,OAA7C;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAImI,MAAM,CAACzsB,GAAD,CAAN,GAAc,MAAd,GAAuB,KAA3B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,MAAhB;AACH;;AAvET;AAyEH;;AACD;AAAM;AAAiBqI,QAAQ,GAAG;AAC9BlO,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE+e,QAFsB;AAG9Bhf,EAAAA,WAAW,EAAEif,aAHiB;AAI9B5e,EAAAA,WAAW,EAAG,UAAUJ,MAAV,EAAkBD,WAAlB,EAA+B;AACzC;AAAI;AAAiBtH,IAAAA,CAArB;;AAAwB;AAAiBmO,IAAAA,YAAY,GAAG,EAAxD;;AACA,SAAKnO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrB;AACAmO,MAAAA,YAAY,CAACnO,CAAD,CAAZ,GAAkB,IAAIoE,MAAJ,CAAW,MAAMmD,MAAM,CAACvH,CAAD,CAAZ,GAAkB,KAAlB,GAA0BsH,WAAW,CAACtH,CAAD,CAArC,GAA2C,GAAtD,EAA2D,GAA3D,CAAlB;AACH;;AACD,WAAOmO,YAAP;AACH,GAPa,CAOZmY,QAPY,EAOFC,aAPE,CAJgB;AAY9BF,EAAAA,gBAAgB,EAAG,UAAU/e,WAAV,EAAuB;AACtC;AAAI;AAAiBtH,IAAAA,CAArB;;AAAwB;AAAiBqO,IAAAA,iBAAiB,GAAG,EAA7D;;AACA,SAAKrO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrBqO,MAAAA,iBAAiB,CAACrO,CAAD,CAAjB,GAAuB,IAAIoE,MAAJ,CAAW,MAAMkD,WAAW,CAACtH,CAAD,CAAjB,GAAuB,GAAlC,EAAuC,GAAvC,CAAvB;AACH;;AACD,WAAOqO,iBAAP;AACH,GANkB,CAMjBkY,aANiB,CAZW;AAmB9BH,EAAAA,eAAe,EAAG,UAAU7e,MAAV,EAAkB;AAChC;AAAI;AAAiBvH,IAAAA,CAArB;;AAAwB;AAAiBoO,IAAAA,gBAAgB,GAAG,EAA5D;;AACA,SAAKpO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrBoO,MAAAA,gBAAgB,CAACpO,CAAD,CAAhB,GAAsB,IAAIoE,MAAJ,CAAW,MAAMmD,MAAM,CAACvH,CAAD,CAAZ,GAAkB,GAA7B,EAAkC,GAAlC,CAAtB;AACH;;AACD,WAAOoO,gBAAP;AACH,GANiB,CAMhBkY,QANgB,CAnBY;AA0B9B7W,EAAAA,QAAQ,EAAE,mDAAmDjE,KAAnD,CAAyD,GAAzD,CA1BoB;AA2B9BkE,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CA3Be;AA4B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA5BiB;AA6B9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE,wBANM;AAOZwR,IAAAA,CAAC,EAAE;AAPS,GA7Bc;AAsC9BhL,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,cAFH;;AAGN;AACR;AACA;AACA;AACQC,IAAAA,QAPM,oBAOG7W,IAPH,EAOS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,kBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,mBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,gBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;AAbR;AAeH,KAvBK;AAwBN8W,IAAAA,OAAO,EAAE,cAxBH;;AAyBN;AACR;AACA;AACA;AACQC,IAAAA,QA7BM,oBA6BG/W,IA7BH,EA6BS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,uBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,uBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,uBAAP;AAZR;AAcH,KA5CK;AA6CNgX,IAAAA,QAAQ,EAAE;AA7CJ,GAtCoB;AAqF9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAEwlB,SAHO;AAIVrU,IAAAA,EAAE,EAAEqU,SAJM;AAKVhmB,IAAAA,CAAC,EAAEgmB,SALO;AAMVpU,IAAAA,EAAE,EAAEoU,SANM;AAOV1lB,IAAAA,CAAC,EAAE0lB,SAPO;AAQVnU,IAAAA,EAAE,EAAEmU,SARM;AASV/lB,IAAAA,CAAC,EAAE+lB,SATO;AAUVlU,IAAAA,EAAE,EAAEkU,SAVM;AAWVzlB,IAAAA,CAAC,EAAEylB,SAXO;AAYVjU,IAAAA,EAAE,EAAEiU,SAZM;AAaVjmB,IAAAA,CAAC,EAAEimB,SAbO;AAcVhU,IAAAA,EAAE,EAAEgU;AAdM,GArFgB;AAqG9B3T,EAAAA,sBAAsB,EAAE,WArGM;AAsG9BzT,EAAAA,OAAO,EAAE,KAtGqB;AAuG9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAvGwB,CAAlC;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBoc,QAAQ,GAAG;AAC9BnO,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,sFAAsFiE,KAAtF,CAA4F,GAA5F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,qDAAqDjE,KAArD,CAA2D,GAA3D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,oBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,OAAO,EAAE,mBAFH;AAGNC,IAAAA,QAAQ,EAAE,kBAHJ;AAINC,IAAAA,OAAO,EAAE,gBAJH;AAKNC,IAAAA,QAAQ,EAAE,oBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAfoB;AAuB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAE,aAHO;AAIVR,IAAAA,CAAC,EAAE,UAJO;AAKV4R,IAAAA,EAAE,EAAE,aALM;AAMVtR,IAAAA,CAAC,EAAE,SANO;AAOVuR,IAAAA,EAAE,EAAE,UAPM;AAQV5R,IAAAA,CAAC,EAAE,QARO;AASV6R,IAAAA,EAAE,EAAE,SATM;AAUVvR,IAAAA,CAAC,EAAE,UAVO;AAWVwR,IAAAA,EAAE,EAAE,YAXM;AAYVhS,IAAAA,CAAC,EAAE,OAZO;AAaViS,IAAAA,EAAE,EAAE;AAbM,GAvBgB;AAsC9BK,EAAAA,sBAAsB,EAAE,WAtCM;AAuC9BzT,EAAAA,OAAO,EAAE,KAvCqB;AAwC9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAxCwB,CAAlC;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASqc,mBAAT,CAA6B7sB,GAA7B,EAAkCuT,aAAlC,EAAiDX,GAAjD,EAAsDY,QAAtD,EAAgE;AAC5D;AAAM;AAAiB3N,EAAAA,MAAM,GAAG;AAC5B,SAAK,CAAC,aAAD,EAAgB,cAAhB,CADuB;AAE5B,SAAK,CAAC,aAAD,EAAgB,cAAhB,CAFuB;AAG5B,SAAK,CAAC,SAAD,EAAY,WAAZ,CAHuB;AAI5B,UAAM,CAAC7F,GAAG,GAAG,OAAP,EAAgBA,GAAG,GAAG,QAAtB,CAJsB;AAK5B,SAAK,CAAC,WAAD,EAAc,aAAd,CALuB;AAM5B,UAAM,CAACA,GAAG,GAAG,SAAP,EAAkBA,GAAG,GAAG,UAAxB,CANsB;AAO5B,SAAK,CAAC,UAAD,EAAa,YAAb,CAPuB;AAQ5B,UAAM,CAACA,GAAG,GAAG,QAAP,EAAiBA,GAAG,GAAG,SAAvB;AARsB,GAAhC;AAUA,SAAOuT,aAAa,GAAG1N,MAAM,CAAC+M,GAAD,CAAN,CAAY,CAAZ,CAAH,GAAoB/M,MAAM,CAAC+M,GAAD,CAAN,CAAY,CAAZ,CAAxC;AACH;;AACD;AAAM;AAAiBka,QAAQ,GAAG;AAC9BrO,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,qFAAqFiE,KAArF,CAA2F,GAA3F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,6DAA6DkE,KAA7D,CAAmE,GAAnE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,8DAA8DjE,KAA9D,CAAoE,GAApE,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9Bma,EAAAA,kBAAkB,EAAE,IARU;AAS9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,oBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GATc;AAiB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,qBADH;AAENK,IAAAA,QAAQ,EAAE,GAFJ;AAGNJ,IAAAA,OAAO,EAAE,sBAHH;AAINC,IAAAA,QAAQ,EAAE,oBAJJ;AAKNC,IAAAA,OAAO,EAAE,uBALH;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAjBoB;AAyB9BmB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,QAFI;AAGVlR,IAAAA,CAAC,EAAE,mBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAEmmB,mBALO;AAMVvU,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE6lB,mBAPO;AAQVtU,IAAAA,EAAE,EAAE,YARM;AASV5R,IAAAA,CAAC,EAAEkmB,mBATO;AAUVrU,IAAAA,EAAE,EAAEqU,mBAVM;AAWV5lB,IAAAA,CAAC,EAAE4lB,mBAXO;AAYVpU,IAAAA,EAAE,EAAEoU,mBAZM;AAaVpmB,IAAAA,CAAC,EAAEomB,mBAbO;AAcVnU,IAAAA,EAAE,EAAEmU;AAdM,GAzBgB;AAyC9B9T,EAAAA,sBAAsB,EAAE,WAzCM;AA0C9BzT,EAAAA,OAAO,EAAE,KA1CqB;AA2C9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA3CwB,CAAlC;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBwc,UAAU,GAAG;AAChCvO,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,wFAAwFiE,KAAxF,CAA8F,GAA9F,CAFwB;AAGhClE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHmB;AAIhCiE,EAAAA,QAAQ,EAAE,2DAA2DjE,KAA3D,CAAiE,GAAjE,CAJsB;AAKhCkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALiB;AAMhCmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANmB;AAOhCoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPgB;AAehCwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,eADH;AAENC,IAAAA,OAAO,EAAE,kBAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,mBAJH;AAKNC,IAAAA,QAAQ,EAAE,qBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAfsB;AAuBhCkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,QAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,YAJM;AAKV3R,IAAAA,CAAC,EAAE,UALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,SAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,OATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,SAXO;AAYVwR,IAAAA,EAAE,EAAE,WAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAvBkB;AAuChCK,EAAAA,sBAAsB,EAAE,sBAvCQ;;AAwChC;AACJ;AACA;AACA;AACIzT,EAAAA,OA5CgC,mBA4CxB0lB,IA5CwB,EA4ClB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;AACA;AAAM;AAAiBtpB,IAAAA,CAAC,GAAG1B,GAAG,GAAG,EAAjC;;AAAqC;AACrCqG,IAAAA,MAAM,GAAI,CAAC,EAAErG,GAAG,GAAG,GAAN,GAAY,EAAd,CAAD,KAAuB,CAAxB,GAA6B,IAA7B,GACJ0B,CAAC,KAAK,CAAP,GAAY,IAAZ,GACKA,CAAC,KAAK,CAAP,GAAY,IAAZ,GACKA,CAAC,KAAK,CAAP,GAAY,IAAZ,GAAmB,IAJ/B;AAKA,WAAO1B,GAAG,GAAGqG,MAAb;AACH,GApD+B;AAqDhCuK,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AArD0B,CAApC;AA4DA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiByc,gBAAgB,GAAG,8DAA8Dxb,KAA9D,CAAoE,GAApE,CAAxC;;AAAkH;AAClHyb,aAAa,GAAG,kDAAkDzb,KAAlD,CAAwD,GAAxD,CADhB;AAEA;AAAI;AAAiB0b,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,OAAvD,EAAgE,OAAhE,EAAyE,OAAzE,EAAkF,OAAlF,EAA2F,OAA3F,EAAoG,OAApG,CAArC;AACA;AAAI;AAAiBC,aAAa,GAAG,kLAArC;AACA;AAAM;AAAiBC,UAAU,GAAG;AAChC5O,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,2FAA2FiE,KAA3F,CAAiG,GAAjG,CAFwB;;AAGhC;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WATgC,uBASpBzM,IAToB,EASd+E,MATc,EASNM,KATM,EASC;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOmsB,gBAAP;AACH,KAFD,MAGK,IAAI,QAAQnZ,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AAC3B,aAAOqnB,aAAa,CAAChlB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAApB;AACH,KAFI,MAGA;AACD,aAAO8mB,gBAAgB,CAAC/kB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH;AACJ,GAnB+B;AAoBhCuH,EAAAA,WAAW,EAAE0f,aApBmB;AAqBhC3f,EAAAA,gBAAgB,EAAE2f,aArBc;AAsBhCjB,EAAAA,iBAAiB,EAAE,8FAtBa;AAuBhCC,EAAAA,sBAAsB,EAAE,yFAvBQ;AAwBhCxe,EAAAA,WAAW,EAAEuf,aAxBmB;AAyBhCd,EAAAA,eAAe,EAAEc,aAzBe;AA0BhCb,EAAAA,gBAAgB,EAAEa,aA1Bc;AA2BhCzX,EAAAA,QAAQ,EAAE,uDAAuDjE,KAAvD,CAA6D,GAA7D,CA3BsB;AA4BhCkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CA5BiB;AA6BhCmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA7BmB;AA8BhCma,EAAAA,kBAAkB,EAAE,IA9BY;AA+BhC/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,QADQ;AAEZD,IAAAA,GAAG,EAAE,WAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,8BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA/BgB;AAuChCwG,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACQnB,IAAAA,OALM,mBAKE3W,IALF,EAKQ;AACV,aAAO,eAAgBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA9C,IAAoD,MAA3D;AACH,KAPK;;AAQN;AACR;AACA;AACA;AACQ4W,IAAAA,OAZM,mBAYE5W,IAZF,EAYQ;AACV,aAAO,kBAAmBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAAjD,IAAuD,MAA9D;AACH,KAdK;;AAeN;AACR;AACA;AACA;AACQ6W,IAAAA,QAnBM,oBAmBG7W,IAnBH,EAmBS;AACX,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KArBK;;AAsBN;AACR;AACA;AACA;AACQ8W,IAAAA,OA1BM,mBA0BE9W,IA1BF,EA0BQ;AACV,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KA5BK;;AA6BN;AACR;AACA;AACA;AACQ+W,IAAAA,QAjCM,oBAiCG/W,IAjCH,EAiCS;AACX,aAAO,4BAA6BwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA3D,IAAiE,MAAxE;AACH,KAnCK;AAoCNgX,IAAAA,QAAQ,EAAE;AApCJ,GAvCsB;AA6EhCkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,WALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA7EkB;AA6FhCK,EAAAA,sBAAsB,EAAE,UA7FQ;AA8FhCzT,EAAAA,OAAO,EAAE,KA9FuB;AA+FhCsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA/F0B,CAApC;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiB8c,gBAAgB,GAAG,8DAA8D7b,KAA9D,CAAoE,GAApE,CAAxC;;AAAkH;AAClH8b,aAAa,GAAG,kDAAkD9b,KAAlD,CAAwD,GAAxD,CADhB;AAEA;AAAI;AAAiB+b,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,OAAvD,EAAgE,OAAhE,EAAyE,OAAzE,EAAkF,OAAlF,EAA2F,OAA3F,EAAoG,OAApG,CAArC;AACA;AAAI;AAAiBC,aAAa,GAAG,kLAArC;AACA;AAAM;AAAiBC,QAAQ,GAAG;AAC9BjP,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,2FAA2FiE,KAA3F,CAAiG,GAAjG,CAFsB;;AAG9B;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WAT8B,uBASlBzM,IATkB,EASZ+E,MATY,EASJM,KATI,EASG;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOwsB,gBAAP;AACH;;AACD,QAAI,QAAQxZ,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AACtB,aAAO0nB,aAAa,CAACrlB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAApB;AACH;;AACD,WAAOmnB,gBAAgB,CAACplB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH,GAjB6B;AAkB9BuH,EAAAA,WAAW,EAAE+f,aAlBiB;AAmB9BhgB,EAAAA,gBAAgB,EAAEggB,aAnBY;AAoB9BtB,EAAAA,iBAAiB,EAAE,8FApBW;AAqB9BC,EAAAA,sBAAsB,EAAE,yFArBM;AAsB9Bxe,EAAAA,WAAW,EAAE4f,aAtBiB;AAuB9BnB,EAAAA,eAAe,EAAEmB,aAvBa;AAwB9BlB,EAAAA,gBAAgB,EAAEkB,aAxBY;AAyB9B9X,EAAAA,QAAQ,EAAE,uDAAuDjE,KAAvD,CAA6D,GAA7D,CAzBoB;AA0B9BkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CA1Be;AA2B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA3BiB;AA4B9Bma,EAAAA,kBAAkB,EAAE,IA5BU;AA6B9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,4BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA7Bc;AAqC9BwG,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACQnB,IAAAA,OALM,mBAKE3W,IALF,EAKQ;AACV,aAAO,eAAgBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA9C,IAAoD,MAA3D;AACH,KAPK;;AAQN;AACR;AACA;AACA;AACQ4W,IAAAA,OAZM,mBAYE5W,IAZF,EAYQ;AACV,aAAO,kBAAmBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAAjD,IAAuD,MAA9D;AACH,KAdK;;AAeN;AACR;AACA;AACA;AACQ6W,IAAAA,QAnBM,oBAmBG7W,IAnBH,EAmBS;AACX,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KArBK;;AAsBN;AACR;AACA;AACA;AACQ8W,IAAAA,OA1BM,mBA0BE9W,IA1BF,EA0BQ;AACV,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KA5BK;;AA6BN;AACR;AACA;AACA;AACQ+W,IAAAA,QAjCM,oBAiCG/W,IAjCH,EAiCS;AACX,aAAO,4BAA6BwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA3D,IAAiE,MAAxE;AACH,KAnCK;AAoCNgX,IAAAA,QAAQ,EAAE;AApCJ,GArCoB;AA2E9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,WALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA3EgB;AA2F9BK,EAAAA,sBAAsB,EAAE,UA3FM;AA4F9BzT,EAAAA,OAAO,EAAE,KA5FqB;AA6F9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA7FwB,CAAlC;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBmd,gBAAgB,GAAG,8DAA8Dlc,KAA9D,CAAoE,GAApE,CAAxC;AACA;AAAI;AAAiBmc,aAAa,GAAG,kDAAkDnc,KAAlD,CAAwD,GAAxD,CAArC;AACA;AAAM;AAAiBoc,UAAU,GAAG;AAChCpP,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,2FAA2FiE,KAA3F,CAAiG,GAAjG,CAFwB;;AAGhC;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WATgC,uBASpBzM,IAToB,EASd+E,MATc,EASNM,KATM,EASC;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAO6sB,gBAAP;AACH,KAFD,MAGK,IAAI,QAAQ7Z,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AAC3B,aAAO+nB,aAAa,CAAC1lB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAApB;AACH,KAFI,MAGA;AACD,aAAOwnB,gBAAgB,CAACzlB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH;AACJ,GAnB+B;AAoBhC4mB,EAAAA,gBAAgB,EAAE,IApBc;AAqBhCrX,EAAAA,QAAQ,EAAE,uDAAuDjE,KAAvD,CAA6D,GAA7D,CArBsB;AAsBhCkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CAtBiB;AAuBhCmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAvBmB;AAwBhCma,EAAAA,kBAAkB,EAAE,IAxBY;AAyBhC/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,QADQ;AAEZD,IAAAA,GAAG,EAAE,WAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,8BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAzBgB;AAiChCwG,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACQnB,IAAAA,OALM,mBAKE3W,IALF,EAKQ;AACV,aAAO,eAAgBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA9C,IAAoD,MAA3D;AACH,KAPK;;AAQN;AACR;AACA;AACA;AACQ4W,IAAAA,OAZM,mBAYE5W,IAZF,EAYQ;AACV,aAAO,kBAAmBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAAjD,IAAuD,MAA9D;AACH,KAdK;;AAeN;AACR;AACA;AACA;AACQ6W,IAAAA,QAnBM,oBAmBG7W,IAnBH,EAmBS;AACX,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KArBK;;AAsBN;AACR;AACA;AACA;AACQ8W,IAAAA,OA1BM,mBA0BE9W,IA1BF,EA0BQ;AACV,aAAO,gBAAiBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA/C,IAAqD,MAA5D;AACH,KA5BK;;AA6BN;AACR;AACA;AACA;AACQ+W,IAAAA,QAjCM,oBAiCG/W,IAjCH,EAiCS;AACX,aAAO,4BAA6BwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA3D,IAAiE,MAAxE;AACH,KAnCK;AAoCNgX,IAAAA,QAAQ,EAAE;AApCJ,GAjCsB;AAuEhCkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,WALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAvEkB;AAuFhCK,EAAAA,sBAAsB,EAAE,UAvFQ;AAwFhCzT,EAAAA,OAAO,EAAE,KAxFuB;AAyFhCsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAzF0B,CAApC;AAgGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBsd,WAAW,GAAG,wEAAwErc,KAAxE,CAA8E,GAA9E,CAAnC;;AAAuH;AACvHsc,aAAa,GAAG,CACZ,OADY,EACH,OADG,EACM,QADN,EACgB,QADhB,EAC0B,QAD1B,EACoC,QADpC,EAC8C,QAD9C,EAEZD,WAAW,CAAC,CAAD,CAFC,EAEIA,WAAW,CAAC,CAAD,CAFf,EAEoBA,WAAW,CAAC,CAAD,CAF/B,CADhB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,WAAT,CAAqBhuB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8CY,QAA9C,EAAwD;AACpD;AAAI;AAAiB8Q,EAAAA,MAAM,GAAG,EAA9B;;AACA,UAAQ1R,GAAR;AACI,SAAK,GAAL;AACI,aAAOY,QAAQ,GAAG,mBAAH,GAAyB,iBAAxC;;AACJ,SAAK,IAAL;AACI,aAAOA,QAAQ,GAAG,UAAH,GAAgB,UAA/B;;AACJ,SAAK,GAAL;AACI,aAAOA,QAAQ,GAAG,UAAH,GAAgB,UAA/B;;AACJ,SAAK,IAAL;AACI8Q,MAAAA,MAAM,GAAG9Q,QAAQ,GAAG,UAAH,GAAgB,WAAjC;AACA;;AACJ,SAAK,GAAL;AACI,aAAOA,QAAQ,GAAG,QAAH,GAAc,OAA7B;;AACJ,SAAK,IAAL;AACI8Q,MAAAA,MAAM,GAAG9Q,QAAQ,GAAG,QAAH,GAAc,QAA/B;AACA;;AACJ,SAAK,GAAL;AACI,aAAOA,QAAQ,GAAG,QAAH,GAAc,OAA7B;;AACJ,SAAK,IAAL;AACI8Q,MAAAA,MAAM,GAAG9Q,QAAQ,GAAG,QAAH,GAAc,QAA/B;AACA;;AACJ,SAAK,GAAL;AACI,aAAOA,QAAQ,GAAG,WAAH,GAAiB,UAAhC;;AACJ,SAAK,IAAL;AACI8Q,MAAAA,MAAM,GAAG9Q,QAAQ,GAAG,WAAH,GAAiB,WAAlC;AACA;;AACJ,SAAK,GAAL;AACI,aAAOA,QAAQ,GAAG,QAAH,GAAc,OAA7B;;AACJ,SAAK,IAAL;AACI8Q,MAAAA,MAAM,GAAG9Q,QAAQ,GAAG,QAAH,GAAc,QAA/B;AACA;AA7BR;;AA+BA8Q,EAAAA,MAAM,GAAG2J,YAAY,CAACjuB,GAAD,EAAMwT,QAAN,CAAZ,GAA8B,GAA9B,GAAoC8Q,MAA7C;AACA,SAAOA,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS2J,YAAT,CAAsBjuB,GAAtB,EAA2BwT,QAA3B,EAAqC;AACjC,SAAOxT,GAAG,GAAG,EAAN,GAAYwT,QAAQ,GAAGua,aAAa,CAAC/tB,GAAD,CAAhB,GAAwB8tB,WAAW,CAAC9tB,GAAD,CAAvD,GAAgEA,GAAvE;AACH;;AACD;AAAM;AAAiBkuB,QAAQ,GAAG;AAC9BzP,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,2GAA2GiE,KAA3G,CAAiH,GAAjH,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,uEAAuEkE,KAAvE,CAA6E,GAA7E,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,qEAAqEjE,KAArE,CAA2E,GAA3E,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,kBAJQ;AAKZC,IAAAA,GAAG,EAAE,+BALO;AAMZC,IAAAA,IAAI,EAAE,qCANM;AAOZwR,IAAAA,CAAC,EAAE,UAPS;AAQZuK,IAAAA,EAAE,EAAE,aARQ;AASZC,IAAAA,GAAG,EAAE,0BATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAPc;AAmB9BzV,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,mBADH;AAENC,IAAAA,OAAO,EAAE,qBAFH;AAGNC,IAAAA,QAAQ,EAAE,eAHJ;AAINC,IAAAA,OAAO,EAAE,kBAJH;AAKNC,IAAAA,QAAQ,EAAE,2BALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAnBoB;AA2B9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,WADE;AAEVC,IAAAA,IAAI,EAAE,WAFI;AAGVlR,IAAAA,CAAC,EAAE8mB,WAHO;AAIV3V,IAAAA,EAAE,EAAE2V,WAJM;AAKVtnB,IAAAA,CAAC,EAAEsnB,WALO;AAMV1V,IAAAA,EAAE,EAAE0V,WANM;AAOVhnB,IAAAA,CAAC,EAAEgnB,WAPO;AAQVzV,IAAAA,EAAE,EAAEyV,WARM;AASVrnB,IAAAA,CAAC,EAAEqnB,WATO;AAUVxV,IAAAA,EAAE,EAAEwV,WAVM;AAWV/mB,IAAAA,CAAC,EAAE+mB,WAXO;AAYVvV,IAAAA,EAAE,EAAEuV,WAZM;AAaVvnB,IAAAA,CAAC,EAAEunB,WAbO;AAcVtV,IAAAA,EAAE,EAAEsV;AAdM,GA3BgB;AA2C9BjV,EAAAA,sBAAsB,EAAE,WA3CM;AA4C9BzT,EAAAA,OAAO,EAAE,KA5CqB;AA6C9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA7CwB,CAAlC;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB8d,QAAQ,GAAG;AAC9B7P,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,uFAAuFiE,KAAvF,CAA6F,GAA7F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,iEAAiEkE,KAAjE,CAAuE,GAAvE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,sDAAsDjE,KAAtD,CAA4D,GAA5D,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9Bma,EAAAA,kBAAkB,EAAE,IARU;AAS9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GATc;AAiB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,oBADH;AAENC,IAAAA,OAAO,EAAE,eAFH;AAGNC,IAAAA,QAAQ,EAAE,aAHJ;AAINC,IAAAA,OAAO,EAAE,aAJH;AAKNC,IAAAA,QAAQ,EAAE,qBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAjBoB;AAyB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,WAFI;AAGVlR,IAAAA,CAAC,EAAE,mBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,YALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,WAPO;AAQVuR,IAAAA,EAAE,EAAE,WARM;AASV5R,IAAAA,CAAC,EAAE,SATO;AAUV6R,IAAAA,EAAE,EAAE,UAVM;AAWVvR,IAAAA,CAAC,EAAE,SAXO;AAYVwR,IAAAA,EAAE,EAAE,SAZM;AAaVhS,IAAAA,CAAC,EAAE,OAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAzBgB;AAyC9BK,EAAAA,sBAAsB,EAAE,cAzCM;;AA0C9B;AACJ;AACA;AACA;AACA;AACIzT,EAAAA,OA/C8B,mBA+CtB0lB,IA/CsB,EA+ChBV,MA/CgB,EA+CR;AAClB;AAAM;AAAiBtqB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;;AACA,YAAQV,MAAR;AACI;AACA;AACA;AACA,WAAK,GAAL;AACI,eAAOtqB,GAAG,IAAIA,GAAG,KAAK,CAAR,GAAY,IAAZ,GAAmB,EAAvB,CAAV;AACJ;;AACA;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACA,WAAK,GAAL;AACI,eAAOA,GAAG,IAAIA,GAAG,KAAK,CAAR,GAAY,IAAZ,GAAmB,GAAvB,CAAV;AACJ;;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOA,GAAG,IAAIA,GAAG,KAAK,CAAR,GAAY,IAAZ,GAAmB,GAAvB,CAAV;AAhBR;AAkBH,GAnE6B;AAoE9B4Q,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AApEwB,CAAlC;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiB+d,gBAAgB,GAAG,8DAA8D9c,KAA9D,CAAoE,GAApE,CAAxC;;AAAkH;AAClH+c,aAAa,GAAG,kDAAkD/c,KAAlD,CAAwD,GAAxD,CADhB;AAEA;AAAI;AAAiBgd,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,OAAvD,EAAgE,OAAhE,EAAyE,OAAzE,EAAkF,OAAlF,EAA2F,OAA3F,EAAoG,OAApG,CAArC;AACA;AAAI;AAAiBC,aAAa,GAAG,gLAArC;AACA;AAAM;AAAiBC,QAAQ,GAAG;AAC9BlQ,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,yFAAyFiE,KAAzF,CAA+F,GAA/F,CAFsB;;AAG9B;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WAT8B,uBASlBzM,IATkB,EASZ+E,MATY,EASJM,KATI,EASG;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOytB,gBAAP;AACH;;AACD,QAAI,QAAQza,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AACtB,aAAO2oB,aAAa,CAACtmB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAApB;AACH;;AACD,WAAOooB,gBAAgB,CAACrmB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH,GAjB6B;AAkB9BuH,EAAAA,WAAW,EAAEghB,aAlBiB;AAmB9BjhB,EAAAA,gBAAgB,EAAEihB,aAnBY;AAoB9BvC,EAAAA,iBAAiB,EAAE,4FApBW;AAqB9BC,EAAAA,sBAAsB,EAAE,yFArBM;AAsB9Bxe,EAAAA,WAAW,EAAE6gB,aAtBiB;AAuB9BpC,EAAAA,eAAe,EAAEoC,aAvBa;AAwB9BnC,EAAAA,gBAAgB,EAAEmC,aAxBY;AAyB9B/Y,EAAAA,QAAQ,EAAE,mDAAmDjE,KAAnD,CAAyD,GAAzD,CAzBoB;AA0B9BkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CA1Be;AA2B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA3BiB;AA4B9Bma,EAAAA,kBAAkB,EAAE,IA5BU;AA6B9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,4BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA7Bc;AAqC9BwG,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACQnB,IAAAA,OALM,mBAKE3W,IALF,EAKQ;AACV,aAAO,aAAcwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA5C,IAAkD,MAAzD;AACH,KAPK;;AAQN;AACR;AACA;AACA;AACQ4W,IAAAA,OAZM,mBAYE5W,IAZF,EAYQ;AACV,aAAO,cAAewG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA7C,IAAmD,MAA1D;AACH,KAdK;;AAeN;AACR;AACA;AACA;AACQ6W,IAAAA,QAnBM,oBAmBG7W,IAnBH,EAmBS;AACX,aAAO,aAAcwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA5C,IAAkD,MAAzD;AACH,KArBK;;AAsBN;AACR;AACA;AACA;AACQ8W,IAAAA,OA1BM,mBA0BE9W,IA1BF,EA0BQ;AACV,aAAO,aAAcwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAA5C,IAAkD,MAAzD;AACH,KA5BK;;AA6BN;AACR;AACA;AACA;AACQ+W,IAAAA,QAjCM,oBAiCG/W,IAjCH,EAiCS;AACX,aAAO,wBAAyBwG,QAAQ,CAACxG,IAAD,CAAR,KAAmB,CAApB,GAAyB,GAAzB,GAA+B,EAAvD,IAA6D,MAApE;AACH,KAnCK;AAoCNgX,IAAAA,QAAQ,EAAE;AApCJ,GArCoB;AA2E9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,QAFI;AAGVlR,IAAAA,CAAC,EAAE,cAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,WALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,WAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA3EgB;AA2F9BK,EAAAA,sBAAsB,EAAE,UA3FM;AA4F9BzT,EAAAA,OAAO,EAAE,KA5FqB;AA6F9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA7FwB,CAAlC;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBoe,QAAQ,GAAG;AAC9BnQ,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,0EAA0EiE,KAA1E,CAAgF,GAAhF,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,4DAA4DkE,KAA5D,CAAkE,GAAlE,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,uCAAuCjE,KAAvC,CAA6C,GAA7C,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CALe;AAM9BmE,EAAAA,WAAW,EAAE,gBAAgBnE,KAAhB,CAAsB,GAAtB,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,gBAJQ;AAKZC,IAAAA,GAAG,EAAE,sBALO;AAMZC,IAAAA,IAAI,EAAE,4BANM;AAOZwR,IAAAA,CAAC,EAAE,UAPS;AAQZuK,IAAAA,EAAE,EAAE,YARQ;AASZC,IAAAA,GAAG,EAAE,kBATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAPc;AAmB9BzV,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,YAFH;AAGNC,IAAAA,QAAQ,EAAE,gBAHJ;AAINC,IAAAA,OAAO,EAAE,cAJH;AAKNC,IAAAA,QAAQ,EAAE,8BALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAnBoB;AA2B9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,YAHO;AAIVmR,IAAAA,EAAE,EAAE,UAJM;AAKV3R,IAAAA,CAAC,EAAE,KALO;AAMV4R,IAAAA,EAAE,EAAE,SANM;AAOVtR,IAAAA,CAAC,EAAE,KAPO;;AAQV;AACR;AACA;AACA;AACQuR,IAAAA,EAZU,cAYPvY,GAZO,EAYF;AACJ,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,eAAO,QAAP;AACH;;AACD,aAAOA,GAAG,GAAG,OAAb;AACH,KAjBS;AAkBV2G,IAAAA,CAAC,EAAE,KAlBO;;AAmBV;AACR;AACA;AACA;AACQ6R,IAAAA,EAvBU,cAuBPxY,GAvBO,EAuBF;AACJ,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,eAAO,QAAP;AACH;;AACD,aAAOA,GAAG,GAAG,OAAb;AACH,KA5BS;AA6BViH,IAAAA,CAAC,EAAE,MA7BO;;AA8BV;AACR;AACA;AACA;AACQwR,IAAAA,EAlCU,cAkCPzY,GAlCO,EAkCF;AACJ,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,eAAO,SAAP;AACH;;AACD,aAAOA,GAAG,GAAG,SAAb;AACH,KAvCS;AAwCVyG,IAAAA,CAAC,EAAE,KAxCO;;AAyCV;AACR;AACA;AACA;AACQiS,IAAAA,EA7CU,cA6CP1Y,GA7CO,EA6CF;AACJ,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,eAAO,QAAP;AACH,OAFD,MAGK,IAAIA,GAAG,GAAG,EAAN,KAAa,CAAb,IAAkBA,GAAG,KAAK,EAA9B,EAAkC;AACnC,eAAOA,GAAG,GAAG,MAAb;AACH;;AACD,aAAOA,GAAG,GAAG,OAAb;AACH;AArDS,GA3BgB;AAkF9BiZ,EAAAA,aAAa,EAAE,+DAlFe;;AAmF9B;AACJ;AACA;AACA;AACI6D,EAAAA,IAvF8B,gBAuFzBxb,KAvFyB,EAuFlB;AACR,WAAO,8BAA8BwS,IAA9B,CAAmCxS,KAAnC,CAAP;AACH,GAzF6B;;AA0F9B;AACJ;AACA;AACA;AACA;AACA;AACI+K,EAAAA,QAhG8B,oBAgGrB5J,IAhGqB,EAgGfC,MAhGe,EAgGP6T,OAhGO,EAgGE;AAC5B,QAAI9T,IAAI,GAAG,CAAX,EAAc;AACV,aAAO,YAAP;AACH,KAFD,MAGK,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,OAAP;AACH,KAFI,MAGA,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO8T,OAAO,GAAG,QAAH,GAAc,cAA5B;AACH,KAFI,MAGA,IAAI9T,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO8T,OAAO,GAAG,OAAH,GAAa,cAA3B;AACH,KAFI,MAGA;AACD,aAAO,MAAP;AACH;AACJ;AAhH6B,CAAlC;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBsY,WAAW,GAAG;AAC/B,KAAG,GAD4B;AAE/B,KAAG,GAF4B;AAG/B,KAAG,GAH4B;AAI/B,KAAG,GAJ4B;AAK/B,KAAG,GAL4B;AAM/B,KAAG,GAN4B;AAO/B,KAAG,GAP4B;AAQ/B,KAAG,GAR4B;AAS/B,KAAG,GAT4B;AAU/B,KAAG;AAV4B,CAAnC;;AAWG;AACHC,WAAW,GAAG;AACV,OAAK,GADK;AAEV,OAAK,GAFK;AAGV,OAAK,GAHK;AAIV,OAAK,GAJK;AAKV,OAAK,GALK;AAMV,OAAK,GANK;AAOV,OAAK,GAPK;AAQV,OAAK,GARK;AASV,OAAK,GATK;AAUV,OAAK;AAVK,CAZd;AAwBA;AAAM;AAAiBC,QAAQ,GAAG;AAC9BtQ,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,8EAA8EiE,KAA9E,CAAoF,GAApF,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,6DAA6DkE,KAA7D,CAAmE,GAAnE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,uDAAuDjE,KAAvD,CAA6D,GAA7D,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,kCAAkClE,KAAlC,CAAwC,GAAxC,CANe;AAO9BmE,EAAAA,WAAW,EAAE,qBAAqBnE,KAArB,CAA2B,GAA3B,CAPiB;AAQ9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,YADQ;AAEZD,IAAAA,GAAG,EAAE,eAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,yBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GARc;AAgB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,SADH;AAENC,IAAAA,OAAO,EAAE,SAFH;AAGNC,IAAAA,QAAQ,EAAE,UAHJ;AAINC,IAAAA,OAAO,EAAE,SAJH;AAKNC,IAAAA,QAAQ,EAAE,kBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAhBoB;AAwB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,QADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,aAHO;AAIVmR,IAAAA,EAAE,EAAE,UAJM;AAKV3R,IAAAA,CAAC,EAAE,SALO;AAMV4R,IAAAA,EAAE,EAAE,SANM;AAOVtR,IAAAA,CAAC,EAAE,SAPO;AAQVuR,IAAAA,EAAE,EAAE,SARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,QAVM;AAWVvR,IAAAA,CAAC,EAAE,UAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,SAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAxBgB;;AAwC9B;AACJ;AACA;AACA;AACIiQ,EAAAA,QA5C8B,oBA4CrBtoB,GA5CqB,EA4ChB;AACV,WAAOA,GAAG,CAACkG,OAAJ,CAAY,eAAZ,EAA6B,UAAUR,KAAV,EAAiB;AACjD,aAAO+oB,WAAW,CAAC/oB,KAAD,CAAlB;AACH,KAFM,CAAP;AAGH,GAhD6B;;AAiD9B;AACJ;AACA;AACA;AACIwb,EAAAA,UArD8B,sBAqDnBlhB,GArDmB,EAqDd;AACZ,WAAOA,GAAG,CAACkG,OAAJ,CAAY,KAAZ,EAAmB,UAAUR,KAAV,EAAiB;AACvC,aAAO8oB,WAAW,CAAC9oB,KAAD,CAAlB;AACH,KAFM,CAAP;AAGH,GAzD6B;AA0D9B;AACA;AACAkT,EAAAA,aAAa,EAAE,oBA5De;;AA6D9B;AACJ;AACA;AACA;AACA;AACI6O,EAAAA,YAlE8B,wBAkEjBrlB,IAlEiB,EAkEX4J,QAlEW,EAkED;AACzB,QAAI5J,IAAI,KAAK,EAAb,EAAiB;AACbA,MAAAA,IAAI,GAAG,CAAP;AACH;;AACD,QAAI4J,QAAQ,KAAK,KAAjB,EAAwB;AACpB,aAAO5J,IAAI,GAAG,CAAP,GAAWA,IAAX,GAAkBA,IAAI,GAAG,EAAhC;AACH,KAFD,MAGK,IAAI4J,QAAQ,KAAK,MAAjB,EAAyB;AAC1B,aAAO5J,IAAP;AACH,KAFI,MAGA,IAAI4J,QAAQ,KAAK,OAAjB,EAA0B;AAC3B,aAAO5J,IAAI,IAAI,EAAR,GAAaA,IAAb,GAAoBA,IAAI,GAAG,EAAlC;AACH,KAFI,MAGA,IAAI4J,QAAQ,KAAK,KAAjB,EAAwB;AACzB,aAAO5J,IAAI,GAAG,EAAd;AACH;AACJ,GAlF6B;;AAmF9B;AACJ;AACA;AACA;AACA;AACA;AACI4J,EAAAA,QAzF8B,oBAyFrB5J,IAzFqB,EAyFfC,MAzFe,EAyFP6T,OAzFO,EAyFE;AAC5B,QAAI9T,IAAI,GAAG,CAAX,EAAc;AACV,aAAO,KAAP;AACH,KAFD,MAGK,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,MAAP;AACH,KAFI,MAGA,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,OAAP;AACH,KAFI,MAGA,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,KAAP;AACH,KAFI,MAGA;AACD,aAAO,KAAP;AACH;AACJ,GAzG6B;AA0G9BmO,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA1GwB,CAAlC;AAiHA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBwe,WAAW,GAAG,gEAAgEvd,KAAhE,CAAsE,GAAtE,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASwd,WAAT,CAAqBjvB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8CY,QAA9C,EAAwD;AACpD,UAAQZ,GAAR;AACI,SAAK,GAAL;AACI,aAAQY,QAAQ,IAAID,aAAb,GAA8B,kBAA9B,GAAmD,mBAA1D;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAKwT,QAAQ,IAAID,aAAb,GAA8B,YAA9B,GAA6C,aAAjD,CAAV;;AACJ,SAAK,GAAL;AACI,aAAO,SAASC,QAAQ,IAAID,aAAZ,GAA4B,OAA5B,GAAsC,QAA/C,CAAP;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIwT,QAAQ,IAAID,aAAZ,GAA4B,OAA5B,GAAsC,QAA1C,CAAV;;AACJ,SAAK,GAAL;AACI,aAAO,SAASC,QAAQ,IAAID,aAAZ,GAA4B,MAA5B,GAAqC,QAA9C,CAAP;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIwT,QAAQ,IAAID,aAAZ,GAA4B,MAA5B,GAAqC,QAAzC,CAAV;;AACJ,SAAK,GAAL;AACI,aAAO,SAASC,QAAQ,IAAID,aAAZ,GAA4B,MAA5B,GAAqC,QAA9C,CAAP;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIwT,QAAQ,IAAID,aAAZ,GAA4B,MAA5B,GAAqC,QAAzC,CAAV;;AACJ,SAAK,GAAL;AACI,aAAO,SAASC,QAAQ,IAAID,aAAZ,GAA4B,QAA5B,GAAuC,UAAhD,CAAP;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIwT,QAAQ,IAAID,aAAZ,GAA4B,QAA5B,GAAuC,UAA3C,CAAV;;AACJ,SAAK,GAAL;AACI,aAAO,SAASC,QAAQ,IAAID,aAAZ,GAA4B,KAA5B,GAAoC,MAA7C,CAAP;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIwT,QAAQ,IAAID,aAAZ,GAA4B,KAA5B,GAAoC,MAAxC,CAAV;AAxBR;;AA0BA,SAAO,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS3C,IAAT,CAAc9P,IAAd,EAAoB0S,QAApB,EAA8B;AAC1B,SAAO,CAACA,QAAQ,GAAG,EAAH,GAAQ,SAAjB,IAA8B,GAA9B,GAAoCwb,WAAW,CAAC7D,YAAY,CAACrqB,IAAD,CAAb,CAA/C,GAAsE,YAA7E;AACH;;AACD;AAAM;AAAiBouB,QAAQ,GAAG;AAC9BzQ,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,oGAAoGiE,KAApG,CAA0G,GAA1G,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,qDAAqDkE,KAArD,CAA2D,GAA3D,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,sDAAsDjE,KAAtD,CAA4D,GAA5D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,gCAAgClE,KAAhC,CAAsC,GAAtC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,qBAAqBnE,KAArB,CAA2B,GAA3B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,aAHS;AAIZC,IAAAA,EAAE,EAAE,eAJQ;AAKZC,IAAAA,GAAG,EAAE,oBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9B6G,EAAAA,aAAa,EAAE,QAfe;;AAgB9B;AACJ;AACA;AACA;AACI6D,EAAAA,IApB8B,gBAoBzBxb,KApByB,EAoBlB;AACR,WAAOA,KAAK,CAAC8U,MAAN,CAAa,CAAb,EAAgBnT,WAAhB,OAAkC,GAAzC;AACH,GAtB6B;;AAuB9B;AACJ;AACA;AACA;AACA;AACA;AACIoJ,EAAAA,QA7B8B,oBA6BrBgK,KA7BqB,EA6BdC,OA7Bc,EA6BLC,OA7BK,EA6BI;AAC9B,QAAIF,KAAK,GAAG,EAAZ,EAAgB;AACZ,aAAOE,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0B,IAAjC;AACH,KAFD,MAGK;AACD,aAAOA,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0B,IAAjC;AACH;AACJ,GApC6B;AAqC9BqC,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,eADH;AAENC,IAAAA,OAAO,EAAE,mBAFH;;AAGN;AACR;AACA;AACA;AACQC,IAAAA,QAPM,oBAOG7W,IAPH,EAOS;AACX,aAAO8P,IAAI,CAAC9P,IAAD,EAAO,IAAP,CAAX;AACH,KATK;AAUN8W,IAAAA,OAAO,EAAE,mBAVH;;AAWN;AACR;AACA;AACA;AACQC,IAAAA,QAfM,oBAeG/W,IAfH,EAeS;AACX,aAAO8P,IAAI,CAAC9P,IAAD,EAAO,KAAP,CAAX;AACH,KAjBK;AAkBNgX,IAAAA,QAAQ,EAAE;AAlBJ,GArCoB;AAyD9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,IAFI;AAGVlR,IAAAA,CAAC,EAAE+nB,WAHO;AAIV5W,IAAAA,EAAE,EAAE4W,WAJM;AAKVvoB,IAAAA,CAAC,EAAEuoB,WALO;AAMV3W,IAAAA,EAAE,EAAE2W,WANM;AAOVjoB,IAAAA,CAAC,EAAEioB,WAPO;AAQV1W,IAAAA,EAAE,EAAE0W,WARM;AASVtoB,IAAAA,CAAC,EAAEsoB,WATO;AAUVzW,IAAAA,EAAE,EAAEyW,WAVM;AAWVhoB,IAAAA,CAAC,EAAEgoB,WAXO;AAYVxW,IAAAA,EAAE,EAAEwW,WAZM;AAaVxoB,IAAAA,CAAC,EAAEwoB,WAbO;AAcVvW,IAAAA,EAAE,EAAEuW;AAdM,GAzDgB;AAyE9BlW,EAAAA,sBAAsB,EAAE,WAzEM;AA0E9BzT,EAAAA,OAAO,EAAE,KA1EqB;AA2E9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA3EwB,CAAlC;AAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB2e,QAAQ,GAAG;AAC9B1Q,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,yFAAyFiE,KAAzF,CAA+F,GAA/F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,6CAA6CjE,KAA7C,CAAmD,GAAnD,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,2BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9B6G,EAAAA,aAAa,EAAE,uBAfe;;AAgB9B;AACJ;AACA;AACA;AACA;AACI6O,EAAAA,YArB8B,wBAqBjBrlB,IArBiB,EAqBX4J,QArBW,EAqBD;AACzB,QAAI5J,IAAI,KAAK,EAAb,EAAiB;AACbA,MAAAA,IAAI,GAAG,CAAP;AACH;;AACD,QAAI4J,QAAQ,KAAK,MAAjB,EAAyB;AACrB,aAAO5J,IAAP;AACH,KAFD,MAGK,IAAI4J,QAAQ,KAAK,OAAjB,EAA0B;AAC3B,aAAO5J,IAAI,IAAI,EAAR,GAAaA,IAAb,GAAoBA,IAAI,GAAG,EAAlC;AACH,KAFI,MAGA,IAAI4J,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAClD,aAAO5J,IAAI,GAAG,EAAd;AACH;AACJ,GAlC6B;;AAmC9B;AACJ;AACA;AACA;AACA;AACA;AACI4J,EAAAA,QAzC8B,oBAyCrBgK,KAzCqB,EAyCdC,OAzCc,EAyCLC,OAzCK,EAyCI;AAC9B,QAAIF,KAAK,GAAG,EAAZ,EAAgB;AACZ,aAAO,MAAP;AACH,KAFD,MAGK,IAAIA,KAAK,GAAG,EAAZ,EAAgB;AACjB,aAAO,OAAP;AACH,KAFI,MAGA,IAAIA,KAAK,GAAG,EAAZ,EAAgB;AACjB,aAAO,MAAP;AACH,KAFI,MAGA;AACD,aAAO,OAAP;AACH;AACJ,GAtD6B;AAuD9BuC,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,qBADH;AAENC,IAAAA,OAAO,EAAE,kBAFH;AAGNC,IAAAA,QAAQ,EAAE,iBAHJ;AAINC,IAAAA,OAAO,EAAE,oBAJH;AAKNC,IAAAA,QAAQ,EAAE,sBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAvDoB;AA+D9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,cAFI;AAGVlR,IAAAA,CAAC,EAAE,gBAHO;AAIVmR,IAAAA,EAAE,EAAE,UAJM;AAKV3R,IAAAA,CAAC,EAAE,SALO;AAMV4R,IAAAA,EAAE,EAAE,UANM;AAOVtR,IAAAA,CAAC,EAAE,OAPO;AAQVuR,IAAAA,EAAE,EAAE,QARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,SAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,SAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA/DgB;AA+E9B9H,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA/EwB,CAAlC;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB4e,QAAQ,GAAG;AAC9B3Q,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,gGAAgGiE,KAAhG,CAAsG,GAAtG,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,2DAA2DjE,KAA3D,CAAiE,GAAjE,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,OAAO,EAAE,kBAFH;AAGNC,IAAAA,QAAQ,EAAE,gBAHJ;AAINC,IAAAA,OAAO,EAAE,gBAJH;;AAKN;AACR;AACA;AACA;AACQC,IAAAA,QATM,oBASG/W,IATH,EASS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,4BAAP;;AACJ;AACI,iBAAO,4BAAP;AAJR;AAMH,KAhBK;AAiBNgX,IAAAA,QAAQ,EAAE;AAjBJ,GAfoB;AAkC9BkB,EAAAA,YAAY,EAAE;AACV;AACR;AACA;AACA;AACQb,IAAAA,MALU,kBAKHnY,GALG,EAKE;AACR,aAAO,CAAE,WAAD,CAAc8T,IAAd,CAAmB9T,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAnB,IAAuC,KAAvC,GAA+C,IAAhD,IAAwD,GAAxD,GAA8DX,GAArE;AACH,KAPS;AAQVoY,IAAAA,IAAI,EAAE,OARI;AASVlR,IAAAA,CAAC,EAAE,gBATO;AAUVmR,IAAAA,EAAE,EAAE,YAVM;AAWV3R,IAAAA,CAAC,EAAE,WAXO;AAYV4R,IAAAA,EAAE,EAAE,WAZM;AAaVtR,IAAAA,CAAC,EAAE,SAbO;AAcVuR,IAAAA,EAAE,EAAE,QAdM;AAeV5R,IAAAA,CAAC,EAAE,WAfO;AAgBV6R,IAAAA,EAAE,EAAE,WAhBM;AAiBVvR,IAAAA,CAAC,EAAE,SAjBO;AAkBVwR,IAAAA,EAAE,EAAE,SAlBM;AAmBVhS,IAAAA,CAAC,EAAE,SAnBO;AAoBViS,IAAAA,EAAE,EAAE;AApBM,GAlCgB;AAwD9BK,EAAAA,sBAAsB,EAAE,UAxDM;AAyD9BzT,EAAAA,OAAO,EAAE,KAzDqB;AA0D9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA1DwB,CAAlC;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB6e,QAAQ,GAAG;AAC9B5Q,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,yCAAyCiE,KAAzC,CAA+C,GAA/C,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,yCAAyCkE,KAAzC,CAA+C,GAA/C,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,8BAA8BjE,KAA9B,CAAoC,GAApC,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,gBAAgBlE,KAAhB,CAAsB,GAAtB,CALe;AAM9BmE,EAAAA,WAAW,EAAE,gBAAgBnE,KAAhB,CAAsB,GAAtB,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,WAJQ;AAKZC,IAAAA,GAAG,EAAE,iBALO;AAMZC,IAAAA,IAAI,EAAE,sBANM;AAOZwR,IAAAA,CAAC,EAAE,YAPS;AAQZuK,IAAAA,EAAE,EAAE,WARQ;AASZC,IAAAA,GAAG,EAAE,iBATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAPc;AAmB9BpV,EAAAA,aAAa,EAAE,QAnBe;;AAoB9B;AACJ;AACA;AACA;AACI6D,EAAAA,IAxB8B,gBAwBzBxb,KAxByB,EAwBlB;AACR,WAAOA,KAAK,KAAK,IAAjB;AACH,GA1B6B;;AA2B9B;AACJ;AACA;AACA;AACA;AACA;AACI+K,EAAAA,QAjC8B,oBAiCrB5J,IAjCqB,EAiCfC,MAjCe,EAiCP6T,OAjCO,EAiCE;AAC5B,QAAI9T,IAAI,GAAG,EAAX,EAAe;AACX,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ,GAxC6B;AAyC9BmW,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,SADH;AAENC,IAAAA,OAAO,EAAE,SAFH;AAGNC,IAAAA,QAAQ,EAAE,aAHJ;AAINC,IAAAA,OAAO,EAAE,SAJH;AAKNC,IAAAA,QAAQ,EAAE,aALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAzCoB;AAiD9BiB,EAAAA,sBAAsB,EAAE,UAjDM;;AAkD9B;AACJ;AACA;AACA;AACA;AACIzT,EAAAA,OAvD8B,mBAuDtBtF,GAvDsB,EAuDjBsqB,MAvDiB,EAuDT;AACjB,YAAQA,MAAR;AACI,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACI,eAAOtqB,GAAG,GAAG,GAAb;;AACJ;AACI,eAAOA,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAP;AANR;AAQH,GAhE6B;AAiE9BqY,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,KADE;AAEVC,IAAAA,IAAI,EAAE,KAFI;AAGVlR,IAAAA,CAAC,EAAE,IAHO;AAIVmR,IAAAA,EAAE,EAAE,KAJM;AAKV3R,IAAAA,CAAC,EAAE,IALO;AAMV4R,IAAAA,EAAE,EAAE,KANM;AAOVtR,IAAAA,CAAC,EAAE,KAPO;AAQVuR,IAAAA,EAAE,EAAE,MARM;AASV5R,IAAAA,CAAC,EAAE,IATO;AAUV6R,IAAAA,EAAE,EAAE,KAVM;AAWVvR,IAAAA,CAAC,EAAE,KAXO;AAYVwR,IAAAA,EAAE,EAAE,MAZM;AAaVhS,IAAAA,CAAC,EAAE,IAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM;AAjEgB,CAAlC;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB4W,QAAQ,GAAG;AAC9B7Q,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,yCAAyCiE,KAAzC,CAA+C,GAA/C,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,yCAAyCkE,KAAzC,CAA+C,GAA/C,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,8BAA8BjE,KAA9B,CAAoC,GAApC,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,gBAAgBlE,KAAhB,CAAsB,GAAtB,CALe;AAM9BmE,EAAAA,WAAW,EAAE,gBAAgBnE,KAAhB,CAAsB,GAAtB,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,QADQ;AAEZD,IAAAA,GAAG,EAAE,WAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,eAJQ;AAKZC,IAAAA,GAAG,EAAE,sBALO;AAMZC,IAAAA,IAAI,EAAE,2BANM;AAOZwR,IAAAA,CAAC,EAAE,YAPS;AAQZuK,IAAAA,EAAE,EAAE,eARQ;AASZC,IAAAA,GAAG,EAAE,sBATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAPc;AAmB9BzV,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,OADH;AAENC,IAAAA,OAAO,EAAE,OAFH;AAGNC,IAAAA,QAAQ,EAAE,SAHJ;AAINC,IAAAA,OAAO,EAAE,OAJH;AAKNC,IAAAA,QAAQ,EAAE,aALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAnBoB;AA2B9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,MADE;AAEVC,IAAAA,IAAI,EAAE,MAFI;AAGVlR,IAAAA,CAAC,EAAE,KAHO;AAIVmR,IAAAA,EAAE,EAAE,KAJM;AAKV3R,IAAAA,CAAC,EAAE,IALO;AAMV4R,IAAAA,EAAE,EAAE,KANM;AAOVtR,IAAAA,CAAC,EAAE,MAPO;AAQVuR,IAAAA,EAAE,EAAE,MARM;AASV5R,IAAAA,CAAC,EAAE,IATO;AAUV6R,IAAAA,EAAE,EAAE,KAVM;AAWVvR,IAAAA,CAAC,EAAE,KAXO;AAYVwR,IAAAA,EAAE,EAAE,KAZM;AAaVhS,IAAAA,CAAC,EAAE,KAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA3BgB;AA2C9BK,EAAAA,sBAAsB,EAAE,gBA3CM;AA4C9BzT,EAAAA,OAAO,EAAE,iBAAUtF,GAAV,EAAesqB,MAAf,EAAuB;AAC5B,YAAQA,MAAR;AACI,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACI,eAAOtqB,GAAG,GAAG,GAAb;;AACJ,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,GAAb;;AACJ,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,GAAb;;AACJ;AACI,eAAOA,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAP;AAXR;AAaH,GA1D6B;AA2D9BsY,EAAAA,aAAa,EAAE,OA3De;AA4D9B6D,EAAAA,IAAI,EAAE,cAAU1X,KAAV,EAAiB;AACnB,WAAOA,KAAK,KAAK,IAAjB;AACH,GA9D6B;AA+D9BiH,EAAAA,QAAQ,EAAE,kBAAU5J,IAAV,EAAgBC,MAAhB,EAAwB6sB,OAAxB,EAAiC;AACvC,WAAO9sB,IAAI,GAAG,EAAP,GAAY,IAAZ,GAAmB,IAA1B;AACH;AAjE6B,CAAlC;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBW,KAAK,GAAG;AAC3BiV,EAAAA,EAAE,EAAE,4BADuB;AAE3B3R,EAAAA,CAAC,EAAE,uBAFwB;AAG3B4R,EAAAA,EAAE,EAAE,yBAHuB;AAI3BtR,EAAAA,CAAC,EAAE,0BAJwB;AAK3BuR,EAAAA,EAAE,EAAE,2BALuB;AAM3B5R,EAAAA,CAAC,EAAE,oBANwB;AAO3B6R,EAAAA,EAAE,EAAE,qBAPuB;AAQ3BvR,EAAAA,CAAC,EAAE,sBARwB;AAS3BwR,EAAAA,EAAE,EAAE,2BATuB;AAU3BhS,EAAAA,CAAC,EAAE,kBAVwB;AAW3BiS,EAAAA,EAAE,EAAE;AAXuB,CAA/B;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS8W,gBAAT,CAA0BxvB,GAA1B,EAA+BuT,aAA/B,EAA8CX,GAA9C,EAAmDY,QAAnD,EAA6D;AACzD,MAAID,aAAJ,EAAmB;AACf,WAAO,iBAAP;AACH,GAFD,MAGK;AACD,WAAOC,QAAQ,GAAG,iBAAH,GAAuB,iBAAtC;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASic,iBAAT,CAA2BzvB,GAA3B,EAAgCuT,aAAhC,EAA+CX,GAA/C,EAAoDY,QAApD,EAA8D;AAC1D,SAAOD,aAAa,GAAGmc,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAH,GAAoBY,QAAQ,GAAGkc,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAH,GAAmB8c,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAnE;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS+c,OAAT,CAAiB3vB,GAAjB,EAAsB;AAClB,SAAOA,GAAG,GAAG,EAAN,KAAa,CAAb,IAAmBA,GAAG,GAAG,EAAN,IAAYA,GAAG,GAAG,EAA5C;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS0vB,KAAT,CAAe9c,GAAf,EAAoB;AAChB,SAAOxP,KAAK,CAACwP,GAAD,CAAL,CAAWnB,KAAX,CAAiB,GAAjB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASme,WAAT,CAAqB5vB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8CY,QAA9C,EAAwD;AACpD;AAAI;AAAiB8Q,EAAAA,MAAM,GAAGtkB,GAAG,GAAG,GAApC;;AACA,MAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,WAAOskB,MAAM,GAAGmL,iBAAiB,CAACzvB,GAAD,EAAMuT,aAAN,EAAqBX,GAAG,CAAC,CAAD,CAAxB,EAA6BY,QAA7B,CAAjC;AACH,GAFD,MAGK,IAAID,aAAJ,EAAmB;AACpB,WAAO+Q,MAAM,IAAIqL,OAAO,CAAC3vB,GAAD,CAAP,GAAe0vB,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAf,GAA+B8c,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAnC,CAAb;AACH,GAFI,MAGA;AACD,QAAIY,QAAJ,EAAc;AACV,aAAO8Q,MAAM,GAAGoL,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAhB;AACH,KAFD,MAGK;AACD,aAAO0R,MAAM,IAAIqL,OAAO,CAAC3vB,GAAD,CAAP,GAAe0vB,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAf,GAA+B8c,KAAK,CAAC9c,GAAD,CAAL,CAAW,CAAX,CAAnC,CAAb;AACH;AACJ;AACJ;;AACD;AAAM;AAAiBid,QAAQ,GAAG;AAC9BpR,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE;AACJ3H,IAAAA,MAAM,EAAE,oGAAoG4L,KAApG,CAA0G,GAA1G,CADJ;AAEJmC,IAAAA,UAAU,EAAE,kGAAkGnC,KAAlG,CAAwG,GAAxG,CAFR;AAGJoC,IAAAA,QAAQ,EAAE;AAHN,GAFsB;AAO9BtG,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAPiB;AAQ9BiE,EAAAA,QAAQ,EAAE;AACN7P,IAAAA,MAAM,EAAE,oFAAoF4L,KAApF,CAA0F,GAA1F,CADF;AAENmC,IAAAA,UAAU,EAAE,2FAA2FnC,KAA3F,CAAiG,GAAjG,CAFN;AAGNoC,IAAAA,QAAQ,EAAE;AAHJ,GARoB;AAa9B8B,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CAbe;AAc9BmE,EAAAA,WAAW,EAAE,iBAAiBnE,KAAjB,CAAuB,GAAvB,CAdiB;AAe9Bma,EAAAA,kBAAkB,EAAE,IAfU;AAgB9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,qCALO;AAMZC,IAAAA,IAAI,EAAE,2CANM;AAOZwR,IAAAA,CAAC,EAAE,YAPS;AAQZuK,IAAAA,EAAE,EAAE,uBARQ;AASZC,IAAAA,GAAG,EAAE,qCATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAhBc;AA4B9BzV,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,eADH;AAENC,IAAAA,OAAO,EAAE,YAFH;AAGNC,IAAAA,QAAQ,EAAE,SAHJ;AAINC,IAAAA,OAAO,EAAE,YAJH;AAKNC,IAAAA,QAAQ,EAAE,oBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GA5BoB;AAoC9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAEsoB,gBAHO;AAIVnX,IAAAA,EAAE,EAAEuX,WAJM;AAKVlpB,IAAAA,CAAC,EAAE+oB,iBALO;AAMVnX,IAAAA,EAAE,EAAEsX,WANM;AAOV5oB,IAAAA,CAAC,EAAEyoB,iBAPO;AAQVlX,IAAAA,EAAE,EAAEqX,WARM;AASVjpB,IAAAA,CAAC,EAAE8oB,iBATO;AAUVjX,IAAAA,EAAE,EAAEoX,WAVM;AAWV3oB,IAAAA,CAAC,EAAEwoB,iBAXO;AAYVhX,IAAAA,EAAE,EAAEmX,WAZM;AAaVnpB,IAAAA,CAAC,EAAEgpB,iBAbO;AAcV/W,IAAAA,EAAE,EAAEkX;AAdM,GApCgB;AAoD9B7W,EAAAA,sBAAsB,EAAE,aApDM;;AAqD9B;AACJ;AACA;AACA;AACIzT,EAAAA,OAzD8B,mBAyDtBtF,GAzDsB,EAyDjB;AACT,WAAOA,GAAG,GAAG,MAAb;AACH,GA3D6B;AA4D9B4Q,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA5DwB,CAAlC;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASsf,WAAT,CAAqB9vB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8CY,QAA9C,EAAwD;AACpD,UAAQZ,GAAR;AACI,SAAK,GAAL;AACI,aAAOW,aAAa,GAAG,eAAH,GAAqB,iBAAzC;;AACJ,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,SAAH,GAAe,WAAhC,CAAV;;AACJ,SAAK,GAAL;AACA,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,QAAH,GAAc,UAA/B,CAAV;;AACJ,SAAK,GAAL;AACA,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,MAAH,GAAY,SAA7B,CAAV;;AACJ,SAAK,GAAL;AACA,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,OAAH,GAAa,SAA9B,CAAV;;AACJ,SAAK,GAAL;AACA,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,MAAH,GAAY,QAA7B,CAAV;;AACJ,SAAK,GAAL;AACA,SAAK,IAAL;AACI,aAAOvT,GAAG,IAAIuT,aAAa,GAAG,MAAH,GAAY,SAA7B,CAAV;;AACJ;AACI,aAAOvT,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAP;AArBR;AAuBH;;AACD;AAAM;AAAiBovB,QAAQ,GAAG;AAC9BtR,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,+LAA+LiE,KAA/L,CAAqM,GAArM,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,6EAA6EkE,KAA7E,CAAmF,GAAnF,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,6CAA6CjE,KAA7C,CAAmD,GAAnD,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9Bma,EAAAA,kBAAkB,EAAE,IARU;AAS9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,mBAJQ;AAKZC,IAAAA,GAAG,EAAE,yBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GATc;AAiB9B6G,EAAAA,aAAa,EAAE,QAjBe;AAkB9B6D,EAAAA,IAAI,EAAE,cAAUxb,KAAV,EAAiB;AACnB,WAAOA,KAAK,KAAK,IAAjB;AACH,GApB6B;AAqB9B+K,EAAAA,QAAQ,EAAE,kBAAU5J,IAAV,EAAgBC,MAAhB,EAAwB6T,OAAxB,EAAiC;AACvC,QAAI9T,IAAI,GAAG,EAAX,EAAe;AACX,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ,GA5B6B;AA6B9BmW,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,cADH;AAENC,IAAAA,OAAO,EAAE,cAFH;AAGNC,IAAAA,QAAQ,EAAE,gBAHJ;AAINC,IAAAA,OAAO,EAAE,cAJH;AAKNC,IAAAA,QAAQ,EAAE,oBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GA7BoB;AAqC9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE4oB,WAHO;AAIVzX,IAAAA,EAAE,EAAEyX,WAJM;AAKVppB,IAAAA,CAAC,EAAEopB,WALO;AAMVxX,IAAAA,EAAE,EAAEwX,WANM;AAOV9oB,IAAAA,CAAC,EAAE8oB,WAPO;AAQVvX,IAAAA,EAAE,EAAEuX,WARM;AASVnpB,IAAAA,CAAC,EAAEmpB,WATO;AAUVtX,IAAAA,EAAE,EAAEsX,WAVM;AAWV7oB,IAAAA,CAAC,EAAE6oB,WAXO;AAYVrX,IAAAA,EAAE,EAAEqX,WAZM;AAaVrpB,IAAAA,CAAC,EAAEqpB,WAbO;AAcVpX,IAAAA,EAAE,EAAEoX;AAdM,GArCgB;AAqD9B/W,EAAAA,sBAAsB,EAAE,cArDM;AAsD9BzT,EAAAA,OAAO,EAAE,iBAAUtF,GAAV,EAAesqB,MAAf,EAAuB;AAC5B,YAAQA,MAAR;AACI,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACI,eAAOtqB,GAAG,GAAG,OAAb;;AACJ;AACI,eAAOA,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAP;AANR;AAQH;AA/D6B,CAAlC;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBqvB,QAAQ,GAAG;AAC9BvR,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,qFAAqFiE,KAArF,CAA2F,GAA3F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,8DAA8DkE,KAA9D,CAAoE,GAApE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,qDAAqDjE,KAArD,CAA2D,GAA3D,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9Bma,EAAAA,kBAAkB,EAAE,IARU;AAS9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,0BALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GATc;AAiB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,OAAO,EAAE,mBAFH;AAGNC,IAAAA,QAAQ,EAAE,eAHJ;AAINC,IAAAA,OAAO,EAAE,gBAJH;AAKNC,IAAAA,QAAQ,EAAE,yBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAjBoB;AAyB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,YALO;AAMV4R,IAAAA,EAAE,EAAE,aANM;AAOVtR,IAAAA,CAAC,EAAE,SAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,UAVM;AAWVvR,IAAAA,CAAC,EAAE,UAXO;AAYVwR,IAAAA,EAAE,EAAE,YAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAzBgB;AAyC9BK,EAAAA,sBAAsB,EAAE,WAzCM;AA0C9BzT,EAAAA,OAAO,EAAE,KA1CqB;AA2C9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA3CwB,CAAlC;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiByf,mBAAmB,GAAG,6DAA6Dxe,KAA7D,CAAmE,GAAnE,CAA3C;AACA;AAAI;AAAiBye,sBAAsB,GAAG,kDAAkDze,KAAlD,CAAwD,GAAxD,CAA9C;AACA;AAAI;AAAiB0e,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,QAA9C,EAAwD,aAAxD,EAAuE,aAAvE,EAAsF,OAAtF,EAA+F,OAA/F,EAAwG,OAAxG,EAAiH,OAAjH,EAA0H,OAA1H,CAArC;AACA;AAAI;AAAiBC,aAAa,GAAG,0KAArC;AACA;AAAM;AAAiBC,UAAU,GAAG;AAChC5R,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,0FAA0FiE,KAA1F,CAAgG,GAAhG,CAFwB;;AAGhC;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WATgC,uBASpBzM,IAToB,EASd+E,MATc,EASNM,KATM,EASC;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOmvB,mBAAP;AACH,KAFD,MAGK,IAAI,QAAQnc,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AAC3B,aAAOqqB,sBAAsB,CAAChoB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAA7B;AACH,KAFI,MAGA;AACD,aAAO8pB,mBAAmB,CAAC/nB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAA1B;AACH;AACJ,GAnB+B;AAoBhCuH,EAAAA,WAAW,EAAE0iB,aApBmB;AAqBhC3iB,EAAAA,gBAAgB,EAAE2iB,aArBc;AAsBhCjE,EAAAA,iBAAiB,EAAE,2FAtBa;AAuBhCC,EAAAA,sBAAsB,EAAE,kFAvBQ;AAwBhCxe,EAAAA,WAAW,EAAEuiB,aAxBmB;AAyBhC9D,EAAAA,eAAe,EAAE8D,aAzBe;AA0BhC7D,EAAAA,gBAAgB,EAAE6D,aA1Bc;AA2BhCza,EAAAA,QAAQ,EAAE,6DAA6DjE,KAA7D,CAAmE,GAAnE,CA3BsB;AA4BhCkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CA5BiB;AA6BhCmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA7BmB;AA8BhCma,EAAAA,kBAAkB,EAAE,IA9BY;AA+BhC/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA/BgB;AAuChCwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,iBADH;AAENC,IAAAA,OAAO,EAAE,gBAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,kBAJH;AAKNC,IAAAA,QAAQ,EAAE,0BALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAvCsB;AA+ChCkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,YAFI;AAGVlR,IAAAA,CAAC,EAAE,mBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,YALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,SAPO;AAQVuR,IAAAA,EAAE,EAAE,QARM;AASV5R,IAAAA,CAAC,EAAE,SATO;AAUV6R,IAAAA,EAAE,EAAE,UAVM;AAWVvR,IAAAA,CAAC,EAAE,WAXO;AAYVwR,IAAAA,EAAE,EAAE,YAZM;AAaVhS,IAAAA,CAAC,EAAE,UAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA/CkB;AA+DhCK,EAAAA,sBAAsB,EAAE,iBA/DQ;;AAgEhC;AACJ;AACA;AACA;AACIzT,EAAAA,OApEgC,mBAoExB0lB,IApEwB,EAoElB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;AACA,WAAOhrB,GAAG,IAAKA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAArB,IAA0BA,GAAG,IAAI,EAAlC,GAAwC,KAAxC,GAAgD,IAApD,CAAV;AACH,GAvE+B;AAwEhC4Q,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAxE0B,CAApC;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiB8f,qBAAqB,GAAG,6DAA6D7e,KAA7D,CAAmE,GAAnE,CAA7C;;AAAsH;AACtH8e,wBAAwB,GAAG,kDAAkD9e,KAAlD,CAAwD,GAAxD,CAD3B;AAEA;AAAI;AAAiB+e,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,gBAAnB,EAAqC,OAArC,EAA8C,QAA9C,EAAwD,aAAxD,EAAuE,aAAvE,EAAsF,OAAtF,EAA+F,OAA/F,EAAwG,OAAxG,EAAiH,OAAjH,EAA0H,OAA1H,CAArC;AACA;AAAI;AAAiBC,aAAa,GAAG,0KAArC;AACA;AAAM;AAAiBC,QAAQ,GAAG;AAC9BjS,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,0FAA0FiE,KAA1F,CAAgG,GAAhG,CAFsB;;AAG9B;AACJ;AACA;AACA;AACA;AACA;AACIlE,EAAAA,WAT8B,uBASlBzM,IATkB,EASZ+E,MATY,EASJM,KATI,EASG;AAC7B,QAAI,CAACrF,IAAL,EAAW;AACP,aAAOwvB,qBAAP;AACH,KAFD,MAGK,IAAI,QAAQxc,IAAR,CAAajO,MAAb,CAAJ,EAA0B;AAC3B,aAAO0qB,wBAAwB,CAACroB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAA/B;AACH,KAFI,MAGA;AACD,aAAOmqB,qBAAqB,CAACpoB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAA5B;AACH;AACJ,GAnB6B;AAoB9BuH,EAAAA,WAAW,EAAE+iB,aApBiB;AAqB9BhjB,EAAAA,gBAAgB,EAAEgjB,aArBY;AAsB9BtE,EAAAA,iBAAiB,EAAE,2FAtBW;AAuB9BC,EAAAA,sBAAsB,EAAE,kFAvBM;AAwB9Bxe,EAAAA,WAAW,EAAE4iB,aAxBiB;AAyB9BnE,EAAAA,eAAe,EAAEmE,aAzBa;AA0B9BlE,EAAAA,gBAAgB,EAAEkE,aA1BY;AA2B9B9a,EAAAA,QAAQ,EAAE,6DAA6DjE,KAA7D,CAAmE,GAAnE,CA3BoB;AA4B9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CA5Be;AA6B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA7BiB;AA8B9Bma,EAAAA,kBAAkB,EAAE,IA9BU;AA+B9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA/Bc;AAuC9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,iBADH;AAENC,IAAAA,OAAO,EAAE,gBAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,kBAJH;AAKNC,IAAAA,QAAQ,EAAE,0BALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAvCoB;AA+C9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,YAFI;AAGVlR,IAAAA,CAAC,EAAE,mBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,YALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,SAPO;AAQVuR,IAAAA,EAAE,EAAE,QARM;AASV5R,IAAAA,CAAC,EAAE,SATO;AAUV6R,IAAAA,EAAE,EAAE,UAVM;AAWVvR,IAAAA,CAAC,EAAE,WAXO;AAYVwR,IAAAA,EAAE,EAAE,YAZM;AAaVhS,IAAAA,CAAC,EAAE,UAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GA/CgB;AA+D9BK,EAAAA,sBAAsB,EAAE,iBA/DM;;AAgE9B;AACJ;AACA;AACA;AACIzT,EAAAA,OApE8B,mBAoEtB0lB,IApEsB,EAoEhB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;AACA,WAAOhrB,GAAG,IAAKA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAArB,IAA0BA,GAAG,IAAI,EAAlC,GAAwC,KAAxC,GAAgD,IAApD,CAAV;AACH,GAvE6B;AAwE9B4Q,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAxEwB,CAAlC;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBmgB,gBAAgB,GAAG,mGAAmGlf,KAAnG,CAAyG,GAAzG,CAAxC;AACA;AAAI;AAAiBmf,gBAAgB,GAAG,qGAAqGnf,KAArG,CAA2G,GAA3G,CAAxC;AACA;AACA;AACA;AACA;;AACA,SAASof,QAAT,CAAkB7wB,GAAlB,EAAuB;AACnB,SAAQA,GAAG,GAAG,EAAN,GAAW,CAAZ,IAAmBA,GAAG,GAAG,EAAN,GAAW,CAA9B,IAAsC,CAAC,EAAEA,GAAG,GAAG,EAAR,CAAD,GAAe,EAAhB,KAAwB,CAApE;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8wB,WAAT,CAAqB9wB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8C;AAC1C;AAAI;AAAiB0R,EAAAA,MAAM,GAAGtkB,GAAG,GAAG,GAApC;;AACA,UAAQ4S,GAAR;AACI,SAAK,IAAL;AACI,aAAO0R,MAAM,IAAIuM,QAAQ,CAAC7wB,GAAD,CAAR,GAAgB,SAAhB,GAA4B,QAAhC,CAAb;;AACJ,SAAK,GAAL;AACI,aAAOuT,aAAa,GAAG,QAAH,GAAc,QAAlC;;AACJ,SAAK,IAAL;AACI,aAAO+Q,MAAM,IAAIuM,QAAQ,CAAC7wB,GAAD,CAAR,GAAgB,QAAhB,GAA2B,OAA/B,CAAb;;AACJ,SAAK,GAAL;AACI,aAAOuT,aAAa,GAAG,SAAH,GAAe,SAAnC;;AACJ,SAAK,IAAL;AACI,aAAO+Q,MAAM,IAAIuM,QAAQ,CAAC7wB,GAAD,CAAR,GAAgB,SAAhB,GAA4B,QAAhC,CAAb;;AACJ,SAAK,IAAL;AACI,aAAOskB,MAAM,IAAIuM,QAAQ,CAAC7wB,GAAD,CAAR,GAAgB,UAAhB,GAA6B,UAAjC,CAAb;;AACJ,SAAK,IAAL;AACI,aAAOskB,MAAM,IAAIuM,QAAQ,CAAC7wB,GAAD,CAAR,GAAgB,MAAhB,GAAyB,KAA7B,CAAb;AAdR;AAgBH;;AACD;AAAM;AAAiB+wB,QAAQ,GAAG;AAC9BtS,EAAAA,IAAI,EAAE,IADwB;;AAE9B;AACJ;AACA;AACA;AACA;AACA;AACIjR,EAAAA,MAR8B,kBAQvB1M,IARuB,EAQjB+E,MARiB,EAQTM,KARS,EAQF;AACxB,QAAI,CAACrF,IAAL,EAAW;AACP,aAAO6vB,gBAAP;AACH,KAFD,MAGK,IAAI9qB,MAAM,KAAK,EAAf,EAAmB;AACpB;AACA;AACA;AACA,aAAO,MAAM+qB,gBAAgB,CAAC1oB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAtB,GAAgD,GAAhD,GAAsDwqB,gBAAgB,CAACzoB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAtE,GAAgG,GAAvG;AACH,KALI,MAMA,IAAI,SAAS2N,IAAT,CAAcjO,MAAd,CAAJ,EAA2B;AAC5B,aAAO+qB,gBAAgB,CAAC1oB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH,KAFI,MAGA;AACD,aAAOwqB,gBAAgB,CAACzoB,QAAQ,CAACpH,IAAD,EAAOqF,KAAP,CAAT,CAAvB;AACH;AACJ,GAxB6B;AAyB9BoH,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAzBiB;AA0B9BiE,EAAAA,QAAQ,EAAE,6DAA6DjE,KAA7D,CAAmE,GAAnE,CA1BoB;AA2B9BkE,EAAAA,aAAa,EAAE,2BAA2BlE,KAA3B,CAAiC,GAAjC,CA3Be;AA4B9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CA5BiB;AA6B9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA7Bc;AAqC9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,cAFH;;AAGN;AACR;AACA;AACA;AACQC,IAAAA,QAPM,oBAOG7W,IAPH,EAOS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,oBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,kBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,gBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ;AACI,iBAAO,iBAAP;AAZR;AAcH,KAtBK;AAuBN8W,IAAAA,OAAO,EAAE,gBAvBH;;AAwBN;AACR;AACA;AACA;AACQC,IAAAA,QA5BM,oBA4BG/W,IA5BH,EA4BS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,2BAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,uBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,0BAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,wBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,wBAAP;;AACJ;AACI,iBAAO,wBAAP;AAZR;AAcH,KA3CK;AA4CNgX,IAAAA,QAAQ,EAAE;AA5CJ,GArCoB;AAmF9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,cAHO;AAIVmR,IAAAA,EAAE,EAAEyY,WAJM;AAKVpqB,IAAAA,CAAC,EAAEoqB,WALO;AAMVxY,IAAAA,EAAE,EAAEwY,WANM;AAOV9pB,IAAAA,CAAC,EAAE8pB,WAPO;AAQVvY,IAAAA,EAAE,EAAEuY,WARM;AASVnqB,IAAAA,CAAC,EAAE,SATO;AAUV6R,IAAAA,EAAE,EAAE,QAVM;AAWVvR,IAAAA,CAAC,EAAE,SAXO;AAYVwR,IAAAA,EAAE,EAAEqY,WAZM;AAaVrqB,IAAAA,CAAC,EAAE,KAbO;AAcViS,IAAAA,EAAE,EAAEoY;AAdM,GAnFgB;AAmG9B/X,EAAAA,sBAAsB,EAAE,WAnGM;AAoG9BzT,EAAAA,OAAO,EAAE,KApGqB;AAqG9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AArGwB,CAAlC;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBwgB,UAAU,GAAG;AAChCvS,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,2FAA2FiE,KAA3F,CAAiG,GAAjG,CAFwB;AAGhClE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHmB;AAIhCiE,EAAAA,QAAQ,EAAE,iFAAiFjE,KAAjF,CAAuF,GAAvF,CAJsB;AAKhCkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALiB;AAMhCmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANmB;AAOhCma,EAAAA,kBAAkB,EAAE,IAPY;AAQhC/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,uBAJQ;AAKZC,IAAAA,GAAG,EAAE,kCALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GARgB;AAgBhCwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,cADH;AAENC,IAAAA,OAAO,EAAE,gBAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,eAJH;;AAKN;AACR;AACA;AACA;AACQC,IAAAA,QATM,oBASG/W,IATH,EASS;AACX,aAAQqqB,YAAY,CAACrqB,IAAD,CAAZ,KAAuB,CAAvB,IAA4BqqB,YAAY,CAACrqB,IAAD,CAAZ,KAAuB,CAApD,GACH,uBADG,GACuB;AAC1B,6BAFJ,CADW,CAGkB;AAChC,KAbK;AAcNgX,IAAAA,QAAQ,EAAE;AAdJ,GAhBsB;AAgChCkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAE,iBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,WALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,UARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,SAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAhCkB;AAgDhCK,EAAAA,sBAAsB,EAAE,UAhDQ;AAiDhCzT,EAAAA,OAAO,EAAE;AAjDuB,CAApC;AAoDA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS2rB,sBAAT,CAAgCjxB,GAAhC,EAAqCuT,aAArC,EAAoDX,GAApD,EAAyD;AACrD;AAAI;AAAiB/M,EAAAA,MAAM,GAAG;AAC1BwS,IAAAA,EAAE,EAAE,SADsB;AAE1BC,IAAAA,EAAE,EAAE,QAFsB;AAG1BC,IAAAA,EAAE,EAAE,KAHsB;AAI1BC,IAAAA,EAAE,EAAE,MAJsB;AAK1BC,IAAAA,EAAE,EAAE,MALsB;AAM1BC,IAAAA,EAAE,EAAE;AANsB,GAA9B;AAQA;AAAI;AAAiBmC,EAAAA,SAAS,GAAG,GAAjC;;AACA,MAAI7a,GAAG,GAAG,GAAN,IAAa,EAAb,IAAoBA,GAAG,IAAI,GAAP,IAAcA,GAAG,GAAG,GAAN,KAAc,CAApD,EAAwD;AACpD6a,IAAAA,SAAS,GAAG,MAAZ;AACH;;AACD,SAAO7a,GAAG,GAAG6a,SAAN,GAAkBhV,MAAM,CAAC+M,GAAD,CAA/B;AACH;;AACD;AAAM;AAAiBse,QAAQ,GAAG;AAC9BzS,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,oGAAoGiE,KAApG,CAA0G,GAA1G,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,gEAAgEkE,KAAhE,CAAsE,GAAtE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,kDAAkDjE,KAAlD,CAAwD,GAAxD,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,kBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GARc;AAgB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,eAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,cAJH;AAKNC,IAAAA,QAAQ,EAAE,sBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAhBoB;AAwB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,YAFI;AAGVlR,IAAAA,CAAC,EAAE,gBAHO;AAIVmR,IAAAA,EAAE,EAAE4Y,sBAJM;AAKVvqB,IAAAA,CAAC,EAAE,UALO;AAMV4R,IAAAA,EAAE,EAAE2Y,sBANM;AAOVjqB,IAAAA,CAAC,EAAE,OAPO;AAQVuR,IAAAA,EAAE,EAAE0Y,sBARM;AASVtqB,IAAAA,CAAC,EAAE,MATO;AAUV6R,IAAAA,EAAE,EAAEyY,sBAVM;AAWVhqB,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAEwY,sBAZM;AAaVxqB,IAAAA,CAAC,EAAE,OAbO;AAcViS,IAAAA,EAAE,EAAEuY;AAdM,GAxBgB;AAwC9BrgB,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAxCwB,CAAlC;AA+CA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS2gB,QAAT,CAAkBC,IAAlB,EAAwBpxB,GAAxB,EAA6B;AACzB;AAAI;AAAiB0vB,EAAAA,KAAK,GAAG0B,IAAI,CAAC3f,KAAL,CAAW,GAAX,CAA7B;AACA,SAAOzR,GAAG,GAAG,EAAN,KAAa,CAAb,IAAkBA,GAAG,GAAG,GAAN,KAAc,EAAhC,GAAqC0vB,KAAK,CAAC,CAAD,CAA1C,GAAiD1vB,GAAG,GAAG,EAAN,IAAY,CAAZ,IAAiBA,GAAG,GAAG,EAAN,IAAY,CAA7B,KAAmCA,GAAG,GAAG,GAAN,GAAY,EAAZ,IAAkBA,GAAG,GAAG,GAAN,IAAa,EAAlE,IAAwE0vB,KAAK,CAAC,CAAD,CAA7E,GAAmFA,KAAK,CAAC,CAAD,CAAhJ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,wBAAT,CAAkCrxB,GAAlC,EAAuCuT,aAAvC,EAAsDX,GAAtD,EAA2D;AACvD;AAAI;AAAiB/M,EAAAA,MAAM,GAAG;AAC1BwS,IAAAA,EAAE,EAAE9E,aAAa,GAAG,wBAAH,GAA8B,wBADrB;AAE1B+E,IAAAA,EAAE,EAAE/E,aAAa,GAAG,qBAAH,GAA2B,qBAFlB;AAG1BgF,IAAAA,EAAE,EAAE,gBAHsB;AAI1BC,IAAAA,EAAE,EAAE,eAJsB;AAK1BC,IAAAA,EAAE,EAAE,sBALsB;AAM1BC,IAAAA,EAAE,EAAE;AANsB,GAA9B;;AAQA,MAAI9F,GAAG,KAAK,GAAZ,EAAiB;AACb,WAAOW,aAAa,GAAG,QAAH,GAAc,QAAlC;AACH;;AACD,SAAOvT,GAAG,GAAG,GAAN,GAAYmxB,QAAQ,CAACtrB,MAAM,CAAC+M,GAAD,CAAP,EAAc,CAAC5S,GAAf,CAA3B;AACH;;AACD;AAAI;AAAiBsxB,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,UAArC,EAAiD,OAAjD,EAA0D,OAA1D,EAAmE,OAAnE,EAA4E,OAA5E,EAAqF,OAArF,EAA8F,OAA9F,EAAuG,OAAvG,CAArC,C,CACA;AACA;AACA;;AACA;AAAM;AAAiBC,QAAQ,GAAG;AAC9B9S,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE;AACJ3H,IAAAA,MAAM,EAAE,oFAAoF4L,KAApF,CAA0F,GAA1F,CADJ;AAEJmC,IAAAA,UAAU,EAAE,kFAAkFnC,KAAlF,CAAwF,GAAxF;AAFR,GAFsB;AAM9BlE,EAAAA,WAAW,EAAE;AACT;AACA1H,IAAAA,MAAM,EAAE,gEAAgE4L,KAAhE,CAAsE,GAAtE,CAFC;AAGTmC,IAAAA,UAAU,EAAE,gEAAgEnC,KAAhE,CAAsE,GAAtE;AAHH,GANiB;AAW9BiE,EAAAA,QAAQ,EAAE;AACN9B,IAAAA,UAAU,EAAE,gEAAgEnC,KAAhE,CAAsE,GAAtE,CADN;AAEN5L,IAAAA,MAAM,EAAE,gEAAgE4L,KAAhE,CAAsE,GAAtE,CAFF;AAGNoC,IAAAA,QAAQ,EAAE;AAHJ,GAXoB;AAgB9B8B,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CAhBe;AAiB9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAjBiB;AAkB9B7D,EAAAA,WAAW,EAAE0jB,aAlBiB;AAmB9BjF,EAAAA,eAAe,EAAEiF,aAnBa;AAoB9BhF,EAAAA,gBAAgB,EAAEgF,aApBY;AAqB9B;AACA5jB,EAAAA,WAAW,EAAE,0MAtBiB;AAuB9B;AACAD,EAAAA,gBAAgB,EAAE,0MAxBY;AAyB9B;AACA0e,EAAAA,iBAAiB,EAAE,uHA1BW;AA2B9B;AACAC,EAAAA,sBAAsB,EAAE,4FA5BM;AA6B9BvT,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,gBAJQ;AAKZC,IAAAA,GAAG,EAAE,sBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GA7Bc;AAqC9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,OAAO,EAAE,eAFH;AAGNE,IAAAA,OAAO,EAAE,cAHH;;AAIN;AACR;AACA;AACA;AACA;AACQD,IAAAA,QATM,oBASG7W,IATH,EASSgS,GATT,EASc;AAChB,UAAI4G,OAAO,CAAC5G,GAAD,CAAP,KAAiB4G,OAAO,CAAC5Y,IAAD,CAA5B,EAAoC;AAChC,gBAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,eAAK,CAAL;AACI,mBAAO,2BAAP;;AACJ,eAAK,CAAL;AACA,eAAK,CAAL;AACA,eAAK,CAAL;AACI,mBAAO,2BAAP;;AACJ,eAAK,CAAL;AACA,eAAK,CAAL;AACA,eAAK,CAAL;AACI,mBAAO,2BAAP;AAVR;AAYH,OAbD,MAcK;AACD,YAAIqqB,YAAY,CAACrqB,IAAD,CAAZ,KAAuB,CAA3B,EAA8B;AAC1B,iBAAO,kBAAP;AACH,SAFD,MAGK;AACD,iBAAO,iBAAP;AACH;AACJ;AACJ,KAhCK;;AAiCN;AACR;AACA;AACA;AACA;AACQ+W,IAAAA,QAtCM,oBAsCG/W,IAtCH,EAsCSgS,GAtCT,EAsCc;AAChB,UAAI4G,OAAO,CAAC5G,GAAD,CAAP,KAAiB4G,OAAO,CAAC5Y,IAAD,CAA5B,EAAoC;AAChC,gBAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,eAAK,CAAL;AACI,mBAAO,yBAAP;;AACJ,eAAK,CAAL;AACA,eAAK,CAAL;AACA,eAAK,CAAL;AACI,mBAAO,yBAAP;;AACJ,eAAK,CAAL;AACA,eAAK,CAAL;AACA,eAAK,CAAL;AACI,mBAAO,yBAAP;AAVR;AAYH,OAbD,MAcK;AACD,YAAIqqB,YAAY,CAACrqB,IAAD,CAAZ,KAAuB,CAA3B,EAA8B;AAC1B,iBAAO,kBAAP;AACH,SAFD,MAGK;AACD,iBAAO,iBAAP;AACH;AACJ;AACJ,KA7DK;AA8DNgX,IAAAA,QAAQ,EAAE;AA9DJ,GArCoB;AAqG9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVlR,IAAAA,CAAC,EAAE,kBAHO;AAIVmR,IAAAA,EAAE,EAAEgZ,wBAJM;AAKV3qB,IAAAA,CAAC,EAAE2qB,wBALO;AAMV/Y,IAAAA,EAAE,EAAE+Y,wBANM;AAOVrqB,IAAAA,CAAC,EAAE,KAPO;AAQVuR,IAAAA,EAAE,EAAE8Y,wBARM;AASV1qB,IAAAA,CAAC,EAAE,MATO;AAUV6R,IAAAA,EAAE,EAAE6Y,wBAVM;AAWVpqB,IAAAA,CAAC,EAAE,OAXO;AAYVwR,IAAAA,EAAE,EAAE4Y,wBAZM;AAaV5qB,IAAAA,CAAC,EAAE,KAbO;AAcViS,IAAAA,EAAE,EAAE2Y;AAdM,GArGgB;AAqH9BpY,EAAAA,aAAa,EAAE,uBArHe;;AAsH9B;AACJ;AACA;AACA;AACI6D,EAAAA,IA1H8B,gBA0HzBxb,KA1HyB,EA0HlB;AACR,WAAO,iBAAiBwS,IAAjB,CAAsBxS,KAAtB,CAAP;AACH,GA5H6B;;AA6H9B;AACJ;AACA;AACA;AACA;AACA;AACI+K,EAAAA,QAnI8B,oBAmIrB5J,IAnIqB,EAmIfC,MAnIe,EAmIP6T,OAnIO,EAmIE;AAC5B,QAAI9T,IAAI,GAAG,CAAX,EAAc;AACV,aAAO,MAAP;AACH,KAFD,MAGK,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,MAAP;AACH,KAFI,MAGA,IAAIA,IAAI,GAAG,EAAX,EAAe;AAChB,aAAO,KAAP;AACH,KAFI,MAGA;AACD,aAAO,QAAP;AACH;AACJ,GAhJ6B;AAiJ9BsW,EAAAA,sBAAsB,EAAE,kBAjJM;;AAkJ9B;AACJ;AACA;AACA;AACA;AACIzT,EAAAA,OAvJ8B,mBAuJtB0lB,IAvJsB,EAuJhBV,MAvJgB,EAuJR;AAClB;AAAM;AAAiBtqB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;;AACA,YAAQV,MAAR;AACI,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACI,eAAOtqB,GAAG,GAAG,IAAb;;AACJ,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,KAAb;;AACJ,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,IAAb;;AACJ;AACI,eAAOA,GAAG,CAACW,QAAJ,CAAa,EAAb,CAAP;AAXR;AAaH,GAtK6B;AAuK9BiQ,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAvKwB,CAAlC;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBghB,QAAQ,GAAG,oFAAoF/f,KAApF,CAA0F,GAA1F,CAAlC;AACA;AAAM;AAAiBggB,aAAa,GAAG,kDAAkDhgB,KAAlD,CAAwD,GAAxD,CAAvC;AACA;AACA;AACA;AACA;;AACA,SAASigB,QAAT,CAAkB1xB,GAAlB,EAAuB;AACnB,SAAQA,GAAG,GAAG,CAAP,IAAcA,GAAG,GAAG,CAApB,IAA2B,CAAC,EAAEA,GAAG,GAAG,EAAR,CAAD,KAAiB,CAAnD;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2xB,WAAT,CAAqB3xB,GAArB,EAA0BuT,aAA1B,EAAyCX,GAAzC,EAA8CY,QAA9C,EAAwD;AACpD;AAAM;AAAiB8Q,EAAAA,MAAM,GAAGtkB,GAAG,GAAG,GAAtC;;AACA,UAAQ4S,GAAR;AACI,SAAK,GAAL;AACI;AACA,aAAQW,aAAa,IAAIC,QAAlB,GAA8B,YAA9B,GAA6C,eAApD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,SAAhB,GAA4B,QAAhC,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,WAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAO/Q,aAAa,GAAG,QAAH,GAAeC,QAAQ,GAAG,QAAH,GAAc,SAAzD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,QAAhB,GAA2B,OAA/B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,UAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAO/Q,aAAa,GAAG,QAAH,GAAeC,QAAQ,GAAG,QAAH,GAAc,SAAzD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,QAAhB,GAA2B,OAA/B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,UAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,KAA9B,GAAsC,MAA7C;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,KAAhB,GAAwB,KAA5B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,OAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,QAA9B,GAAyC,UAAhD;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,SAAhB,GAA4B,UAAhC,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,UAAhB;AACH;;AACL;;AACA,SAAK,GAAL;AACI;AACA,aAAQ/Q,aAAa,IAAIC,QAAlB,GAA8B,KAA9B,GAAsC,OAA7C;;AACJ,SAAK,IAAL;AACI;AACA,UAAID,aAAa,IAAIC,QAArB,EAA+B;AAC3B,eAAO8Q,MAAM,IAAIoN,QAAQ,CAAC1xB,GAAD,CAAR,GAAgB,MAAhB,GAAyB,OAA7B,CAAb;AACH,OAFD,MAGK;AACD,eAAOskB,MAAM,GAAG,OAAhB;AACH;;AAvET;AAyEH;;AACD;AAAM;AAAiBsN,QAAQ,GAAG;AAC9BnT,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAEgkB,QAFsB;AAG9BjkB,EAAAA,WAAW,EAAEkkB,aAHiB;AAI9B/b,EAAAA,QAAQ,EAAE,sDAAsDjE,KAAtD,CAA4D,GAA5D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE,wBANM;AAOZwR,IAAAA,CAAC,EAAE;AAPS,GAPc;AAgB9BhL,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,aADH;AAENC,IAAAA,OAAO,EAAE,eAFH;;AAGN;AACR;AACA;AACA;AACQC,IAAAA,QAPM,oBAOG7W,IAPH,EAOS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,mBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,iBAAP;AAbR;AAeH,KAvBK;AAwBN8W,IAAAA,OAAO,EAAE,cAxBH;;AAyBN;AACR;AACA;AACA;AACQC,IAAAA,QA7BM,oBA6BG/W,IA7BH,EA6BS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,sBAAP;AAZR;AAcH,KA5CK;AA6CNgX,IAAAA,QAAQ,EAAE;AA7CJ,GAhBoB;AA+D9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,MADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAEyqB,WAHO;AAIVtZ,IAAAA,EAAE,EAAEsZ,WAJM;AAKVjrB,IAAAA,CAAC,EAAEirB,WALO;AAMVrZ,IAAAA,EAAE,EAAEqZ,WANM;AAOV3qB,IAAAA,CAAC,EAAE2qB,WAPO;AAQVpZ,IAAAA,EAAE,EAAEoZ,WARM;AASVhrB,IAAAA,CAAC,EAAEgrB,WATO;AAUVnZ,IAAAA,EAAE,EAAEmZ,WAVM;AAWV1qB,IAAAA,CAAC,EAAE0qB,WAXO;AAYVlZ,IAAAA,EAAE,EAAEkZ,WAZM;AAaVlrB,IAAAA,CAAC,EAAEkrB,WAbO;AAcVjZ,IAAAA,EAAE,EAAEiZ;AAdM,GA/DgB;AA+E9B5Y,EAAAA,sBAAsB,EAAE,WA/EM;AAgF9BzT,EAAAA,OAAO,EAAE,KAhFqB;AAiF9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAjFwB,CAAlC;AAwFA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASqhB,qBAAT,CAA+B/R,MAA/B,EAAuCvM,aAAvC,EAAsDX,GAAtD,EAA2DY,QAA3D,EAAqE;AACjE;AAAI;AAAiB8Q,EAAAA,MAAM,GAAGxE,MAAM,GAAG,GAAvC;;AACA,UAAQlN,GAAR;AACI,SAAK,GAAL;AACI,aAAOW,aAAa,IAAIC,QAAjB,GAA4B,cAA5B,GAA6C,iBAApD;;AACJ,SAAK,IAAL;AACI,UAAIsM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,GAAG,SAAH,GAAe,SAAtC;AACH,OAFD,MAGK,IAAIuM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,SAA5B,GAAwC,UAAlD;AACH,OAFI,MAGA,IAAIsM,MAAM,GAAG,CAAb,EAAgB;AACjBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,SAA5B,GAAwC,UAAlD;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,QAAjD;AACH;;AACD,aAAO8Q,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO/Q,aAAa,GAAG,YAAH,GAAkB,YAAtC;;AACJ,SAAK,IAAL;AACI,UAAIuM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,GAAG,QAAH,GAAc,QAArC;AACH,OAFD,MAGK,IAAIuM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,UAAjD;AACH,OAFI,MAGA,IAAIsM,MAAM,GAAG,CAAb,EAAgB;AACjBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,UAAjD;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,OAA5B,GAAsC,UAAhD;AACH;;AACD,aAAO8Q,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO/Q,aAAa,GAAG,SAAH,GAAe,SAAnC;;AACJ,SAAK,IAAL;AACI,UAAIuM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,GAAG,KAAH,GAAW,KAAlC;AACH,OAFD,MAGK,IAAIuM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,OAA9C;AACH,OAFI,MAGA,IAAIsM,MAAM,GAAG,CAAb,EAAgB;AACjBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,OAA9C;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,IAA5B,GAAmC,OAA7C;AACH;;AACD,aAAO8Q,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,WAA9C;;AACJ,SAAK,IAAL;AACI,UAAIsM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,MAA9C;AACH,OAFD,MAGK,IAAIsM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,SAA9C;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,OAA9C;AACH;;AACD,aAAO8Q,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO/Q,aAAa,IAAIC,QAAjB,GAA4B,UAA5B,GAAyC,cAAhD;;AACJ,SAAK,IAAL;AACI,UAAIsM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,OAA5B,GAAsC,SAAhD;AACH,OAFD,MAGK,IAAIsM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,UAAjD;AACH,OAFI,MAGA,IAAIsM,MAAM,GAAG,CAAb,EAAgB;AACjBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,QAA5B,GAAuC,QAAjD;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,SAA5B,GAAwC,QAAlD;AACH;;AACD,aAAO8Q,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO/Q,aAAa,IAAIC,QAAjB,GAA4B,UAA5B,GAAyC,YAAhD;;AACJ,SAAK,IAAL;AACI,UAAIsM,MAAM,KAAK,CAAf,EAAkB;AACdwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,MAA5B,GAAqC,OAA/C;AACH,OAFD,MAGK,IAAIsM,MAAM,KAAK,CAAf,EAAkB;AACnBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,MAA5B,GAAqC,QAA/C;AACH,OAFI,MAGA,IAAIsM,MAAM,GAAG,CAAb,EAAgB;AACjBwE,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,MAA5B,GAAqC,MAA/C;AACH,OAFI,MAGA;AACD8Q,QAAAA,MAAM,IAAI/Q,aAAa,IAAIC,QAAjB,GAA4B,KAA5B,GAAoC,MAA9C;AACH;;AACD,aAAO8Q,MAAP;AA7FR;AA+FH;;AACD;AAAM;AAAiBwN,QAAQ,GAAG;AAC9BrT,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,wFAAwFiE,KAAxF,CAA8F,GAA9F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,8DAA8DkE,KAA9D,CAAoE,GAApE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,sDAAsDjE,KAAtD,CAA4D,GAA5D,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,qCAAqClE,KAArC,CAA2C,GAA3C,CANe;AAO9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CAPiB;AAQ9Bma,EAAAA,kBAAkB,EAAE,IARU;AAS9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,cAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GATc;AAiB9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,eADH;AAENC,IAAAA,OAAO,EAAE,eAFH;;AAGN;AACR;AACA;AACA;AACQC,IAAAA,QAPM,oBAOG7W,IAPH,EAOS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,uBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,qBAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,sBAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,kBAAP;AAXR;AAaH,KArBK;AAsBN8W,IAAAA,OAAO,EAAE,gBAtBH;;AAuBN;AACR;AACA;AACA;AACQC,IAAAA,QA3BM,oBA2BG/W,IA3BH,EA2BS;AACX,cAAQqqB,YAAY,CAACrqB,IAAD,CAApB;AACI,aAAK,CAAL;AACI,iBAAO,8BAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,4BAAP;;AACJ,aAAK,CAAL;AACI,iBAAO,6BAAP;;AACJ,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACI,iBAAO,yBAAP;AAXR;AAaH,KAzCK;AA0CNgX,IAAAA,QAAQ,EAAE;AA1CJ,GAjBoB;AA6D9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,QADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE2qB,qBAHO;AAIVxZ,IAAAA,EAAE,EAAEwZ,qBAJM;AAKVnrB,IAAAA,CAAC,EAAEmrB,qBALO;AAMVvZ,IAAAA,EAAE,EAAEuZ,qBANM;AAOV7qB,IAAAA,CAAC,EAAE6qB,qBAPO;AAQVtZ,IAAAA,EAAE,EAAEsZ,qBARM;AASVlrB,IAAAA,CAAC,EAAEkrB,qBATO;AAUVrZ,IAAAA,EAAE,EAAEqZ,qBAVM;AAWV5qB,IAAAA,CAAC,EAAE4qB,qBAXO;AAYVpZ,IAAAA,EAAE,EAAEoZ,qBAZM;AAaVprB,IAAAA,CAAC,EAAEorB,qBAbO;AAcVnZ,IAAAA,EAAE,EAAEmZ;AAdM,GA7DgB;AA6E9B9Y,EAAAA,sBAAsB,EAAE,WA7EM;AA8E9BzT,EAAAA,OAAO,EAAE,KA9EqB;AA+E9BsL,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AA/EwB,CAAlC;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBuhB,QAAQ,GAAG;AAC9BtT,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,wFAAwFiE,KAAxF,CAA8F,GAA9F,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,oDAAoDjE,KAApD,CAA0D,GAA1D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,yBALO;AAMZC,IAAAA,IAAI,EAAE,8BANM;AAOZgc,IAAAA,GAAG,EAAE,kBAPO;AAQZC,IAAAA,IAAI,EAAE;AARM,GAPc;AAiB9BzV,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,WADH;AAENC,IAAAA,OAAO,EAAE,cAFH;AAGNE,IAAAA,OAAO,EAAE,WAHH;AAIND,IAAAA,QAAQ,EAAE,cAJJ;AAKNE,IAAAA,QAAQ,EAAE,gBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAjBoB;AAyB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,cAFI;AAGVlR,IAAAA,CAAC,EAAE,gBAHO;AAIVmR,IAAAA,EAAE,EAAE,aAJM;AAKV3R,IAAAA,CAAC,EAAE,UALO;AAMV4R,IAAAA,EAAE,EAAE,YANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,WARM;AASV5R,IAAAA,CAAC,EAAE,QATO;AAUV6R,IAAAA,EAAE,EAAE,UAVM;AAWVvR,IAAAA,CAAC,EAAE,UAXO;AAYVwR,IAAAA,EAAE,EAAE,YAZM;AAaVhS,IAAAA,CAAC,EAAE,QAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAzBgB;AAyC9BK,EAAAA,sBAAsB,EAAE,cAzCM;;AA0C9B;AACJ;AACA;AACA;AACIzT,EAAAA,OA9C8B,mBA8CtB0lB,IA9CsB,EA8ChB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;AACA;AAAI;AAAiBtpB,IAAAA,CAAC,GAAG1B,GAAG,GAAG,EAA/B;;AAAmC;AACnCqG,IAAAA,MAAM,GAAI,CAAC,EAAErG,GAAG,GAAG,GAAN,GAAY,EAAd,CAAD,KAAuB,CAAxB,GAA6B,GAA7B,GACJ0B,CAAC,KAAK,CAAP,GAAY,GAAZ,GACKA,CAAC,KAAK,CAAP,GAAY,GAAZ,GACKA,CAAC,KAAK,CAAP,GAAY,GAAZ,GAAkB,GAJ9B;AAKA,WAAO1B,GAAG,GAAGqG,MAAb;AACH,GAtD6B;AAuD9BuK,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAvDwB,CAAlC;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiBwhB,QAAQ,GAAG;AAC9BvT,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,oGAAoGiE,KAApG,CAA0G,GAA1G,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,iEAAiEkE,KAAjE,CAAuE,GAAvE,CAHiB;AAI9Bsb,EAAAA,gBAAgB,EAAE,IAJY;AAK9BrX,EAAAA,QAAQ,EAAE,iDAAiDjE,KAAjD,CAAuD,GAAvD,CALoB;AAM9BkE,EAAAA,aAAa,EAAE,8CAA8ClE,KAA9C,CAAoD,GAApD,CANe;AAO9B;AACAmE,EAAAA,WAAW,EAAE,yBAAyBnE,KAAzB,CAA+B,GAA/B,CARiB;AAS9Bma,EAAAA,kBAAkB,EAAE,IATU;AAU9B/S,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,MADQ;AAEZD,IAAAA,GAAG,EAAE,SAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,uBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAVc;AAkB9B6G,EAAAA,aAAa,EAAE,uBAlBe;;AAmB9B;AACJ;AACA;AACA;AACI6D,EAAAA,IAvB8B,gBAuBzBxb,KAvByB,EAuBlB;AACR,WAAOA,KAAK,KAAK,YAAjB;AACH,GAzB6B;;AA0B9B;AACJ;AACA;AACA;AACA;AACA;AACI+K,EAAAA,QAhC8B,oBAgCrB5J,IAhCqB,EAgCfC,MAhCe,EAgCP6T,OAhCO,EAgCE;AAC5B,QAAI9T,IAAI,GAAG,EAAX,EAAe;AACX,aAAO,YAAP;AACH,KAFD,MAGK;AACD,aAAO,YAAP;AACH;AACJ,GAvC6B;AAwC9BmW,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,kBADH;AAENC,IAAAA,OAAO,EAAE,oBAFH;AAGNC,IAAAA,QAAQ,EAAE,oBAHJ;AAINC,IAAAA,OAAO,EAAE,uBAJH;AAKNC,IAAAA,QAAQ,EAAE,4BALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAxCoB;AAgD9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,QADE;AAEVC,IAAAA,IAAI,EAAE,WAFI;AAGVlR,IAAAA,CAAC,EAAE,cAHO;AAIVmR,IAAAA,EAAE,EAAE,WAJM;AAKV3R,IAAAA,CAAC,EAAE,QALO;AAMV4R,IAAAA,EAAE,EAAE,SANM;AAOVtR,IAAAA,CAAC,EAAE,WAPO;AAQVuR,IAAAA,EAAE,EAAE,YARM;AASV5R,IAAAA,CAAC,EAAE,OATO;AAUV6R,IAAAA,EAAE,EAAE,QAVM;AAWVvR,IAAAA,CAAC,EAAE,SAXO;AAYVwR,IAAAA,EAAE,EAAE,UAZM;AAaVhS,IAAAA,CAAC,EAAE,MAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM;AAhDgB,CAAlC;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAI;AAAiBuZ,QAAQ,GAAG;AAC5B,KAAG,QADyB;AAE5B,KAAG,QAFyB;AAG5B,KAAG,QAHyB;AAI5B,MAAI,QAJwB;AAK5B,MAAI,QALwB;AAM5B,KAAG,OANyB;AAO5B,KAAG,OAPyB;AAQ5B,MAAI,OARwB;AAS5B,MAAI,OATwB;AAU5B,KAAG,QAVyB;AAW5B,KAAG,QAXyB;AAY5B,OAAK,QAZuB;AAa5B,KAAG,OAbyB;AAc5B,KAAG,QAdyB;AAe5B,MAAI,QAfwB;AAgB5B,MAAI,QAhBwB;AAiB5B,MAAI,QAjBwB;AAkB5B,MAAI;AAlBwB,CAAhC;AAoBA;AAAM;AAAiBC,QAAQ,GAAG;AAC9BzT,EAAAA,IAAI,EAAE,IADwB;AAE9BjR,EAAAA,MAAM,EAAE,6EAA6EiE,KAA7E,CAAmF,GAAnF,CAFsB;AAG9BlE,EAAAA,WAAW,EAAE,kDAAkDkE,KAAlD,CAAwD,GAAxD,CAHiB;AAI9BiE,EAAAA,QAAQ,EAAE,wDAAwDjE,KAAxD,CAA8D,GAA9D,CAJoB;AAK9BkE,EAAAA,aAAa,EAAE,8BAA8BlE,KAA9B,CAAoC,GAApC,CALe;AAM9BmE,EAAAA,WAAW,EAAE,uBAAuBnE,KAAvB,CAA6B,GAA7B,CANiB;AAO9BoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAPc;AAe9BwG,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,iBADH;AAENC,IAAAA,OAAO,EAAE,iBAFH;AAGNC,IAAAA,QAAQ,EAAE,0BAHJ;AAINC,IAAAA,OAAO,EAAE,UAJH;AAKNC,IAAAA,QAAQ,EAAE,wBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAfoB;AAuB9BkB,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVlR,IAAAA,CAAC,EAAE,eAHO;AAIVmR,IAAAA,EAAE,EAAE,WAJM;AAKV3R,IAAAA,CAAC,EAAE,YALO;AAMV4R,IAAAA,EAAE,EAAE,WANM;AAOVtR,IAAAA,CAAC,EAAE,UAPO;AAQVuR,IAAAA,EAAE,EAAE,SARM;AASV5R,IAAAA,CAAC,EAAE,SATO;AAUV6R,IAAAA,EAAE,EAAE,QAVM;AAWVvR,IAAAA,CAAC,EAAE,QAXO;AAYVwR,IAAAA,EAAE,EAAE,OAZM;AAaVhS,IAAAA,CAAC,EAAE,SAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAvBgB;AAuC9BK,EAAAA,sBAAsB,EAAE,uCAvCM;;AAwC9B;AACJ;AACA;AACA;AACIzT,EAAAA,OA5C8B,mBA4CtB0lB,IA5CsB,EA4ChB;AACV;AAAM;AAAiBhrB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;;AACA,QAAIhrB,GAAG,KAAK,CAAZ,EAAe;AACX;AACA,aAAOA,GAAG,GAAG,QAAb;AACH;;AACD;AAAI;AAAiByB,IAAAA,CAAC,GAAGzB,GAAG,GAAG,EAA/B;;AAAmC;AACnC0B,IAAAA,CAAC,GAAG1B,GAAG,GAAG,GAAN,GAAYyB,CADhB;;AACmB;AACnBukB,IAAAA,CAAC,GAAGhmB,GAAG,IAAI,GAAP,GAAa,GAAb,GAAmB,IAFvB;AAGA,WAAOA,GAAG,IAAIiyB,QAAQ,CAACxwB,CAAD,CAAR,IAAewwB,QAAQ,CAACvwB,CAAD,CAAvB,IAA8BuwB,QAAQ,CAACjM,CAAD,CAA1C,CAAV;AACH,GAtD6B;AAuD9BpV,EAAAA,IAAI,EAAE;AACFL,IAAAA,GAAG,EAAE,CADH;AAEF;AACAC,IAAAA,GAAG,EAAE,CAHH,CAGK;;AAHL;AAvDwB,CAAlC;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAM;AAAiB2hB,UAAU,GAAG;AAChC1T,EAAAA,IAAI,EAAE,OAD0B;AAEhCjR,EAAAA,MAAM,EAAE,wCAAwCiE,KAAxC,CAA8C,GAA9C,CAFwB;AAGhClE,EAAAA,WAAW,EAAE,yCAAyCkE,KAAzC,CAA+C,GAA/C,CAHmB;AAIhCiE,EAAAA,QAAQ,EAAE,8BAA8BjE,KAA9B,CAAoC,GAApC,CAJsB;AAKhCkE,EAAAA,aAAa,EAAE,uBAAuBlE,KAAvB,CAA6B,GAA7B,CALiB;AAMhCmE,EAAAA,WAAW,EAAE,gBAAgBnE,KAAhB,CAAsB,GAAtB,CANmB;AAOhCoH,EAAAA,cAAc,EAAE;AACZ7G,IAAAA,EAAE,EAAE,OADQ;AAEZD,IAAAA,GAAG,EAAE,UAFO;AAGZE,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,WAJQ;AAKZC,IAAAA,GAAG,EAAE,iBALO;AAMZC,IAAAA,IAAI,EAAE,qBANM;AAOZwR,IAAAA,CAAC,EAAE,UAPS;AAQZuK,IAAAA,EAAE,EAAE,WARQ;AASZC,IAAAA,GAAG,EAAE,iBATO;AAUZC,IAAAA,IAAI,EAAE;AAVM,GAPgB;AAmBhCpV,EAAAA,aAAa,EAAE,mBAnBiB;;AAoBhC;AACJ;AACA;AACA;AACA;AACI6O,EAAAA,YAzBgC,wBAyBnBrlB,IAzBmB,EAyBb4J,QAzBa,EAyBH;AACzB,QAAI5J,IAAI,KAAK,EAAb,EAAiB;AACbA,MAAAA,IAAI,GAAG,CAAP;AACH;;AACD,QAAI4J,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAlC,IACAA,QAAQ,KAAK,IADjB,EACuB;AACnB,aAAO5J,IAAP;AACH,KAHD,MAIK,IAAI4J,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAtC,EAA4C;AAC7C,aAAO5J,IAAI,GAAG,EAAd;AACH,KAFI,MAGA;AACD;AACA,aAAOA,IAAI,IAAI,EAAR,GAAaA,IAAb,GAAoBA,IAAI,GAAG,EAAlC;AACH;AACJ,GAxC+B;;AAyChC;AACJ;AACA;AACA;AACA;AACA;AACI4J,EAAAA,QA/CgC,oBA+CvB5J,IA/CuB,EA+CjBC,MA/CiB,EA+CT6T,OA/CS,EA+CA;AAC5B;AAAI;AAAiB4O,IAAAA,EAAE,GAAG1iB,IAAI,GAAG,GAAP,GAAaC,MAAvC;;AACA,QAAIyiB,EAAE,GAAG,GAAT,EAAc;AACV,aAAO,IAAP;AACH,KAFD,MAGK,IAAIA,EAAE,GAAG,GAAT,EAAc;AACf,aAAO,IAAP;AACH,KAFI,MAGA,IAAIA,EAAE,GAAG,IAAT,EAAe;AAChB,aAAO,IAAP;AACH,KAFI,MAGA,IAAIA,EAAE,GAAG,IAAT,EAAe;AAChB,aAAO,IAAP;AACH,KAFI,MAGA,IAAIA,EAAE,GAAG,IAAT,EAAe;AAChB,aAAO,IAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GAnE+B;AAoEhCvM,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,OAAO,EAAE,QADH;AAENC,IAAAA,OAAO,EAAE,QAFH;AAGNC,IAAAA,QAAQ,EAAE,WAHJ;AAINC,IAAAA,OAAO,EAAE,QAJH;AAKNC,IAAAA,QAAQ,EAAE,WALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GApEsB;AA4EhCiB,EAAAA,sBAAsB,EAAE,gBA5EQ;;AA6EhC;AACJ;AACA;AACA;AACA;AACIzT,EAAAA,OAlFgC,mBAkFxB0lB,IAlFwB,EAkFlBV,MAlFkB,EAkFV;AAClB;AAAM;AAAiBtqB,IAAAA,GAAG,GAAG8rB,MAAM,CAACd,IAAD,CAAnC;;AACA,YAAQV,MAAR;AACI,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,KAAL;AACI,eAAOtqB,GAAG,GAAG,GAAb;;AACJ,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,GAAb;;AACJ,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOA,GAAG,GAAG,GAAb;;AACJ;AACI,eAAOA,GAAG,CAACW,QAAJ,EAAP;AAXR;AAaH,GAjG+B;AAkGhCqY,EAAAA,YAAY,EAAE;AACVb,IAAAA,MAAM,EAAE,KADE;AAEVC,IAAAA,IAAI,EAAE,KAFI;AAGVlR,IAAAA,CAAC,EAAE,IAHO;AAIVmR,IAAAA,EAAE,EAAE,MAJM;AAKV3R,IAAAA,CAAC,EAAE,MALO;AAMV4R,IAAAA,EAAE,EAAE,OANM;AAOVtR,IAAAA,CAAC,EAAE,MAPO;AAQVuR,IAAAA,EAAE,EAAE,OARM;AASV5R,IAAAA,CAAC,EAAE,KATO;AAUV6R,IAAAA,EAAE,EAAE,MAVM;AAWVvR,IAAAA,CAAC,EAAE,MAXO;AAYVwR,IAAAA,EAAE,EAAE,OAZM;AAaVhS,IAAAA,CAAC,EAAE,KAbO;AAcViS,IAAAA,EAAE,EAAE;AAdM,GAlGkB;AAkHhC9H,EAAAA,IAAI,EAAE;AACF;AACAL,IAAAA,GAAG,EAAE,CAFH;AAGF;AACAC,IAAAA,GAAG,EAAE,CAJH,CAIK;;AAJL;AAlH0B,CAApC;AA0HA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASX,GAAT,EAAcE,QAAd,EAAwBjI,MAAxB,EAAgCS,gBAAhC,EAAkDK,UAAlD,EAA8DC,SAA9D,EAAyEJ,WAAzE,EAAsFrB,WAAtF,EAAmGkB,kBAAnG,EAAuHJ,QAAvH,EAAiI8gB,SAAjI,EAA4IzD,UAA5I,EAAwJxG,WAAxJ,EAAqKnF,SAArK,EAAgLgF,YAAhL,EAA8LL,YAA9L,EAA4MH,kBAA5M,EAAgO8K,OAAhO,EAAyOC,QAAzO,EAAmPC,aAAnP,EAAkQE,MAAlQ,EAA0QjoB,OAA1Q,EAAmRR,WAAnR,EAAgSP,MAAhS,EAAwS0N,SAAxS,EAAmTG,WAAnT,EAAgUuB,KAAhU,EAAuUJ,OAAvU,EAAgVqc,QAAhV,EAA0VE,QAA1V,EAAoWK,QAApW,EAA8WS,QAA9W,EAAwXC,QAAxX,EAAkYE,QAAlY,EAA4YE,UAA5Y,EAAwZK,UAAxZ,EAAoaK,QAApa,EAA8aG,UAA9a,EAA0bK,QAA1b,EAAocI,QAApc,EAA8cK,QAA9c,EAAwdC,QAAxd,EAAkeG,QAAle,EAA4eG,QAA5e,EAAsfC,QAAtf,EAAggBC,QAAhgB,EAA0gBC,QAA1gB,EAAohBC,QAAphB,EAA8hBO,QAA9hB,EAAwiBE,QAAxiB,EAAkjBC,QAAljB,EAA4jBK,UAA5jB,EAAwkBK,QAAxkB,EAAklBK,QAAllB,EAA4lBC,UAA5lB,EAAwmBE,QAAxmB,EAAknBK,QAAlnB,EAA4nBK,QAA5nB,EAAsoBE,QAAtoB,EAAgpBC,QAAhpB,EAA0pBC,QAA1pB,EAAoqBE,QAApqB,EAA8qBC,UAA9qB,EAA0rBprB,UAAU,IAAIqrB,EAAxsB,G,CAEA","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} n\n * @param {?} x\n * @return {?}\n */\nfunction mod(n, x) {\n    return (n % x + x) % x;\n}\n/**\n * @param {?} num\n * @return {?}\n */\nfunction absFloor(num) {\n    return num < 0 ? Math.ceil(num) || 0 : Math.floor(num);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} str\n * @return {?}\n */\nfunction isString(str) {\n    return typeof str === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value) {\n    return value instanceof Date || Object.prototype.toString.call(value) === '[object Date]';\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction isDateValid(date) {\n    return date && date.getTime && !isNaN(date.getTime());\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction isFunction(fn) {\n    return (fn instanceof Function ||\n        Object.prototype.toString.call(fn) === '[object Function]');\n}\n/**\n * @param {?=} value\n * @return {?}\n */\nfunction isNumber(value) {\n    return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n/**\n * @template T\n * @param {?=} input\n * @return {?}\n */\nfunction isArray(input) {\n    return (input instanceof Array ||\n        Object.prototype.toString.call(input) === '[object Array]');\n}\n/**\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasOwnProp(a /*object*/, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n}\n/**\n * @template T\n * @param {?} input\n * @return {?}\n */\nfunction isObject(input /*object*/) {\n    // IE8 will treat undefined and null as object if it wasn't for\n    // input != null\n    return (input != null && Object.prototype.toString.call(input) === '[object Object]');\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isObjectEmpty(obj) {\n    if (Object.getOwnPropertyNames) {\n        return (Object.getOwnPropertyNames(obj).length === 0);\n    }\n    let /** @type {?} */ k;\n    for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction isUndefined(input) {\n    return input === void 0;\n}\n/**\n * @template T\n * @param {?} argumentForCoercion\n * @return {?}\n */\nfunction toInt(argumentForCoercion) {\n    const /** @type {?} */ coercedNumber = +argumentForCoercion;\n    let /** @type {?} */ value = 0;\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n        value = absFloor(coercedNumber);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ aliases = {};\nconst /** @type {?} */ _mapUnits = {\n    date: 'day',\n    hour: 'hours',\n    minute: 'minutes',\n    second: 'seconds',\n    millisecond: 'milliseconds'\n};\n/**\n * @param {?} unit\n * @param {?} shorthand\n * @return {?}\n */\nfunction addUnitAlias(unit, shorthand) {\n    const /** @type {?} */ lowerCase = unit.toLowerCase();\n    let /** @type {?} */ _unit = unit;\n    if (lowerCase in _mapUnits) {\n        _unit = _mapUnits[lowerCase];\n    }\n    aliases[lowerCase] = aliases[`${lowerCase}s`] = aliases[shorthand] = _unit;\n}\n/**\n * @param {?} units\n * @return {?}\n */\nfunction normalizeUnits(units) {\n    return isString(units) ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n}\n/**\n * @param {?} inputObject\n * @return {?}\n */\nfunction normalizeObjectUnits(inputObject) {\n    const /** @type {?} */ normalizedInput = {};\n    let /** @type {?} */ normalizedProp;\n    let /** @type {?} */ prop;\n    for (prop in inputObject) {\n        if (hasOwnProp(inputObject, prop)) {\n            normalizedProp = normalizeUnits(prop);\n            if (normalizedProp) {\n                normalizedInput[normalizedProp] = inputObject[prop];\n            }\n        }\n    }\n    return /** @type {?} */ (normalizedInput);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// place in new Date([array])\nconst /** @type {?} */ YEAR = 0;\nconst /** @type {?} */ MONTH = 1;\nconst /** @type {?} */ DATE = 2;\nconst /** @type {?} */ HOUR = 3;\nconst /** @type {?} */ MINUTE = 4;\nconst /** @type {?} */ SECOND = 5;\nconst /** @type {?} */ MILLISECOND = 6;\nconst /** @type {?} */ WEEK = 7;\nconst /** @type {?} */ WEEKDAY = 8;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} num\n * @param {?} targetLength\n * @param {?=} forceSign\n * @return {?}\n */\nfunction zeroFill(num, targetLength, forceSign) {\n    const /** @type {?} */ absNumber = `${Math.abs(num)}`;\n    const /** @type {?} */ zerosToFill = targetLength - absNumber.length;\n    const /** @type {?} */ sign = num >= 0;\n    const /** @type {?} */ _sign = sign ? (forceSign ? '+' : '') : '-';\n    // todo: this is crazy slow\n    const /** @type {?} */ _zeros = Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1);\n    return (_sign + _zeros + absNumber);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet /** @type {?} */ formatFunctions = {};\nlet /** @type {?} */ formatTokenFunctions = {};\n// tslint:disable-next-line\nconst /** @type {?} */ formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n/**\n * @param {?} token\n * @param {?} padded\n * @param {?} ordinal\n * @param {?} callback\n * @return {?}\n */\nfunction addFormatToken(token, padded, ordinal, callback) {\n    if (token) {\n        formatTokenFunctions[token] = callback;\n    }\n    if (padded) {\n        formatTokenFunctions[padded[0]] = function () {\n            return zeroFill(callback.apply(null, arguments), padded[1], padded[2]);\n        };\n    }\n    if (ordinal) {\n        formatTokenFunctions[ordinal] = function (date, opts) {\n            return opts.locale.ordinal(callback.apply(null, arguments), token);\n        };\n    }\n}\n/**\n * @param {?} format\n * @return {?}\n */\nfunction makeFormatFunction(format) {\n    const /** @type {?} */ array = format.match(formattingTokens);\n    const /** @type {?} */ length = array.length;\n    const /** @type {?} */ formatArr = new Array(length);\n    for (let /** @type {?} */ i = 0; i < length; i++) {\n        formatArr[i] = formatTokenFunctions[array[i]]\n            ? formatTokenFunctions[array[i]]\n            : removeFormattingTokens(array[i]);\n    }\n    return function (date, locale, isUTC, offset = 0) {\n        let /** @type {?} */ output = '';\n        for (let /** @type {?} */ j = 0; j < length; j++) {\n            output += isFunction(formatArr[j])\n                ? (/** @type {?} */ (formatArr[j])).call(null, date, { format, locale, isUTC, offset })\n                : formatArr[j];\n        }\n        return output;\n    };\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction removeFormattingTokens(input) {\n    if (input.match(/\\[[\\s\\S]/)) {\n        return input.replace(/^\\[|\\]$/g, '');\n    }\n    return input.replace(/\\\\/g, '');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} y\n * @param {?=} m\n * @param {?=} d\n * @return {?}\n */\nfunction createUTCDate(y, m, d) {\n    const /** @type {?} */ date = new Date(Date.UTC.apply(null, arguments));\n    // the Date.UTC function remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n        date.setUTCFullYear(y);\n    }\n    return date;\n}\n/**\n * @param {?=} y\n * @param {?=} m\n * @param {?=} d\n * @param {?=} h\n * @param {?=} M\n * @param {?=} s\n * @param {?=} ms\n * @return {?}\n */\nfunction createDate(y, m = 0, d = 1, h = 0, M = 0, s = 0, ms = 0) {\n    const /** @type {?} */ date = new Date(y, m, d, h, M, s, ms);\n    // the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n        date.setFullYear(y);\n    }\n    return date;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getHours(date, isUTC = false) {\n    return isUTC ? date.getUTCHours() : date.getHours();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getMinutes(date, isUTC = false) {\n    return isUTC ? date.getUTCMinutes() : date.getMinutes();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getSeconds(date, isUTC = false) {\n    return isUTC ? date.getUTCSeconds() : date.getSeconds();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getMilliseconds(date, isUTC = false) {\n    return isUTC ? date.getUTCMilliseconds() : date.getMilliseconds();\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction getTime(date) {\n    return date.getTime();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getDay(date, isUTC = false) {\n    return isUTC ? date.getUTCDay() : date.getDay();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getDate(date, isUTC = false) {\n    return isUTC ? date.getUTCDate() : date.getDate();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getMonth(date, isUTC = false) {\n    return isUTC ? date.getUTCMonth() : date.getMonth();\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getFullYear(date, isUTC = false) {\n    return isUTC ? date.getUTCFullYear() : date.getFullYear();\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction unix(date) {\n    return Math.floor(date.valueOf() / 1000);\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction getFirstDayOfMonth(date) {\n    return createDate(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes(), date.getSeconds());\n}\n/**\n * @param {?} date\n * @param {?} firstDayOfWeek\n * @return {?}\n */\nfunction isFirstDayOfWeek(date, firstDayOfWeek) {\n    return date.getDay() === firstDayOfWeek;\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nfunction isSameMonth(date1, date2) {\n    if (!date1 || !date2) {\n        return false;\n    }\n    return isSameYear(date1, date2) && getMonth(date1) === getMonth(date2);\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nfunction isSameYear(date1, date2) {\n    if (!date1 || !date2) {\n        return false;\n    }\n    return getFullYear(date1) === getFullYear(date2);\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nfunction isSameDay(date1, date2) {\n    if (!date1 || !date2) {\n        return false;\n    }\n    return (isSameYear(date1, date2) &&\n        isSameMonth(date1, date2) &&\n        getDate(date1) === getDate(date2));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ match1 = /\\d/; //       0 - 9\nconst /** @type {?} */ match2 = /\\d\\d/; //      00 - 99\nconst /** @type {?} */ match3 = /\\d{3}/; //     000 - 999\nconst /** @type {?} */ match4 = /\\d{4}/; //    0000 - 9999\nconst /** @type {?} */ match6 = /[+-]?\\d{6}/; // -999999 - 999999\nconst /** @type {?} */ match1to2 = /\\d\\d?/; //       0 - 99\nconst /** @type {?} */ match3to4 = /\\d\\d\\d\\d?/; //     999 - 9999\nconst /** @type {?} */ match5to6 = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\nconst /** @type {?} */ match1to3 = /\\d{1,3}/; //       0 - 999\nconst /** @type {?} */ match1to4 = /\\d{1,4}/; //       0 - 9999\nconst /** @type {?} */ match1to6 = /[+-]?\\d{1,6}/; // -999999 - 999999\nconst /** @type {?} */ matchUnsigned = /\\d+/; //       0 - inf\nconst /** @type {?} */ matchSigned = /[+-]?\\d+/; //    -inf - inf\nconst /** @type {?} */ matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\nconst /** @type {?} */ matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n// any word (or two) characters or numbers including two/three word month in arabic.\n// includes scottish gaelic two word and hyphenated months\n// tslint:disable-next-line\nconst /** @type {?} */ matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\nconst /** @type {?} */ regexes = {};\n/**\n * @param {?} token\n * @param {?} regex\n * @param {?=} strictRegex\n * @return {?}\n */\nfunction addRegexToken(token, regex, strictRegex) {\n    if (isFunction(regex)) {\n        regexes[token] = regex;\n        return;\n    }\n    regexes[token] = function (isStrict, locale) {\n        return (isStrict && strictRegex) ? strictRegex : regex;\n    };\n}\n/**\n * @param {?} token\n * @param {?} locale\n * @return {?}\n */\nfunction getParseRegexForToken(token, locale) {\n    const /** @type {?} */ _strict = false;\n    if (!hasOwnProp(regexes, token)) {\n        return new RegExp(unescapeFormat(token));\n    }\n    return regexes[token](_strict, locale);\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction unescapeFormat(str) {\n    // tslint:disable-next-line\n    return regexEscape(str\n        .replace('\\\\', '')\n        .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, (matched, p1, p2, p3, p4) => p1 || p2 || p3 || p4));\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction regexEscape(str) {\n    return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ tokens = {};\n/**\n * @param {?} token\n * @param {?} callback\n * @return {?}\n */\nfunction addParseToken(token, callback) {\n    const /** @type {?} */ _token = isString(token) ? [token] : token;\n    let /** @type {?} */ func = callback;\n    if (isNumber(callback)) {\n        func = function (input, array, config) {\n            array[callback] = toInt(input);\n            return config;\n        };\n    }\n    if (isArray(_token) && isFunction(func)) {\n        let /** @type {?} */ i;\n        for (i = 0; i < _token.length; i++) {\n            tokens[_token[i]] = func;\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} callback\n * @return {?}\n */\nfunction addWeekParseToken(token, callback) {\n    addParseToken(token, function (input, array, config, _token) {\n        config._w = config._w || {};\n        return callback(input, config._w, config, _token);\n    });\n}\n/**\n * @param {?} token\n * @param {?} input\n * @param {?} config\n * @return {?}\n */\nfunction addTimeToArrayFromToken(token, input, config) {\n    if (input != null && hasOwnProp(tokens, token)) {\n        tokens[token](input, config._a, config, token);\n    }\n    return config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/*\nexport function getPrioritizedUnits(unitsObj) {\n  const units = [];\n  let unit;\n  for (unit in unitsObj) {\n    if (unitsObj.hasOwnProperty(unit)) {\n      units.push({ unit, priority: priorities[unit] });\n    }\n  }\n  units.sort(function (a, b) {\n    return a.priority - b.priority;\n  });\n\n  return units;\n}\n*/\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initDayOfMonth() {\n    // FORMATTING\n    addFormatToken('D', ['DD', 2, false], 'Do', function (date, opts) {\n        return getDate(date, opts.isUTC)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('date', 'D');\n    // PARSING\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return locale._dayOfMonthOrdinalParse || locale._ordinalParse;\n    });\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array, config) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n        return config;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction defaultParsingFlags() {\n    // We need to deep clone this object.\n    return {\n        empty: false,\n        unusedTokens: [],\n        unusedInput: [],\n        overflow: -2,\n        charsLeftOver: 0,\n        nullInput: false,\n        invalidMonth: null,\n        invalidFormat: false,\n        userInvalidated: false,\n        iso: false,\n        parsedDateParts: [],\n        meridiem: null,\n        rfc2822: false,\n        weekdayMismatch: false\n    };\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction getParsingFlags(config) {\n    if (config._pf == null) {\n        config._pf = defaultParsingFlags();\n    }\n    return config._pf;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?} opts\n * @return {?}\n */\nfunction getYear(date, opts) {\n    return getFullYear(date, opts.isUTC).toString();\n}\n/**\n * @return {?}\n */\nfunction initYear() {\n    addFormatToken('Y', null, null, function (date, opts) {\n        const /** @type {?} */ y = getFullYear(date, opts.isUTC);\n        return y <= 9999 ? y.toString(10) : `+${y}`;\n    });\n    addFormatToken(null, ['YY', 2, false], null, function (date, opts) {\n        return (getFullYear(date, opts.isUTC) % 100).toString(10);\n    });\n    addFormatToken(null, ['YYYY', 4, false], null, getYear);\n    addFormatToken(null, ['YYYYY', 5, false], null, getYear);\n    addFormatToken(null, ['YYYYYY', 6, true], null, getYear);\n    // ALIASES\n    addUnitAlias('year', 'y');\n    // PARSING\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array, config) {\n        array[YEAR] = input.length === 2 ? parseTwoDigitYear(input) : toInt(input);\n        return config;\n    });\n    addParseToken('YY', function (input, array, config) {\n        array[YEAR] = parseTwoDigitYear(input);\n        return config;\n    });\n    addParseToken('Y', function (input, array, config) {\n        array[YEAR] = parseInt(input, 10);\n        return config;\n    });\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction parseTwoDigitYear(input) {\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n}\n/**\n * @param {?} year\n * @return {?}\n */\nfunction daysInYear(year) {\n    return isLeapYear(year) ? 366 : 365;\n}\n/**\n * @param {?} year\n * @return {?}\n */\nfunction isLeapYear(year) {\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} year\n * @param {?} month\n * @return {?}\n */\nfunction daysInMonth$1(year, month) {\n    if (isNaN(year) || isNaN(month)) {\n        return NaN;\n    }\n    const /** @type {?} */ modMonth = mod(month, 12);\n    const /** @type {?} */ _year = year + (month - modMonth) / 12;\n    return modMonth === 1\n        ? isLeapYear(_year) ? 29 : 28\n        : (31 - modMonth % 7 % 2);\n}\n/**\n * @return {?}\n */\nfunction initMonth() {\n    // FORMATTING\n    addFormatToken('M', ['MM', 2, false], 'Mo', function (date, opts) {\n        return (getMonth(date, opts.isUTC) + 1).toString(10);\n    });\n    addFormatToken('MMM', null, null, function (date, opts) {\n        return opts.locale.monthsShort(date, opts.format, opts.isUTC);\n    });\n    addFormatToken('MMMM', null, null, function (date, opts) {\n        return opts.locale.months(date, opts.format, opts.isUTC);\n    });\n    // ALIASES\n    addUnitAlias('month', 'M');\n    // PARSING\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n    addParseToken(['M', 'MM'], function (input, array, config) {\n        array[MONTH] = toInt(input) - 1;\n        return config;\n    });\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        const /** @type {?} */ month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        }\n        else {\n            getParsingFlags(config).invalidMonth = !!input;\n        }\n        return config;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ defaultTimeUnit = {\n    year: 0,\n    month: 0,\n    day: 0,\n    hour: 0,\n    minute: 0,\n    seconds: 0\n};\n/**\n * @param {?} date\n * @param {?} unit\n * @return {?}\n */\nfunction shiftDate(date, unit) {\n    const /** @type {?} */ _unit = Object.assign({}, defaultTimeUnit, unit);\n    const /** @type {?} */ year = date.getFullYear() + (_unit.year || 0);\n    const /** @type {?} */ month = date.getMonth() + (_unit.month || 0);\n    let /** @type {?} */ day = date.getDate() + (_unit.day || 0);\n    if (_unit.month && !_unit.day) {\n        day = Math.min(day, daysInMonth$1(year, month));\n    }\n    return createDate(year, month, day, date.getHours() + (_unit.hour || 0), date.getMinutes() + (_unit.minute || 0), date.getSeconds() + (_unit.seconds || 0));\n}\n/**\n * @param {?} date\n * @param {?} unit\n * @return {?}\n */\nfunction setFullDate(date, unit) {\n    return createDate(getNum(date.getFullYear(), unit.year), getNum(date.getMonth(), unit.month), getNum(date.getDate(), unit.day), getNum(date.getHours(), unit.hour), getNum(date.getMinutes(), unit.minute), getNum(date.getSeconds(), unit.seconds), getNum(date.getMilliseconds(), unit.milliseconds));\n}\n/**\n * @param {?} def\n * @param {?=} num\n * @return {?}\n */\nfunction getNum(def, num) {\n    return isNumber(num) ? num : def;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setMonth(date, value, isUTC) {\n    const /** @type {?} */ dayOfMonth = Math.min(getDate(date), daysInMonth$1(getFullYear(date), value));\n    isUTC ? date.setUTCMonth(value, dayOfMonth) : date.setMonth(value, dayOfMonth);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setHours(date, value, isUTC) {\n    isUTC ? date.setUTCHours(value) : date.setHours(value);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setMinutes(date, value, isUTC) {\n    isUTC ? date.setUTCMinutes(value) : date.setMinutes(value);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setSeconds(date, value, isUTC) {\n    isUTC ? date.setUTCSeconds(value) : date.setSeconds(value);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setMilliseconds(date, value, isUTC) {\n    isUTC ? date.setUTCMilliseconds(value) : date.setMilliseconds(value);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setDate(date, value, isUTC) {\n    isUTC ? date.setUTCDate(value) : date.setDate(value);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} value\n * @return {?}\n */\nfunction setTime(date, value) {\n    date.setTime(value);\n    return date;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @return {?}\n */\nfunction cloneDate(date) {\n    return new Date(date.getTime());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?} unit\n * @param {?=} isUTC\n * @return {?}\n */\nfunction startOf(date, unit, isUTC) {\n    const /** @type {?} */ _date = cloneDate(date);\n    // the following switch intentionally omits break keywords\n    // to utilize falling through the cases.\n    switch (unit) {\n        case 'year':\n            setMonth(_date, 0, isUTC);\n        /* falls through */\n        case 'quarter':\n        case 'month':\n            setDate(_date, 1, isUTC);\n        /* falls through */\n        case 'week':\n        case 'isoWeek':\n        case 'day':\n        case 'date':\n            setHours(_date, 0, isUTC);\n        /* falls through */\n        case 'hours':\n            setMinutes(_date, 0, isUTC);\n        /* falls through */\n        case 'minutes':\n            setSeconds(_date, 0, isUTC);\n        /* falls through */\n        case 'seconds':\n            setMilliseconds(_date, 0, isUTC);\n    }\n    // weeks are a special case\n    if (unit === 'week') {\n        setLocaleDayOfWeek(_date, 0, { isUTC });\n    }\n    if (unit === 'isoWeek') {\n        setISODayOfWeek(_date, 1);\n    }\n    // quarters are also special\n    if (unit === 'quarter') {\n        setMonth(_date, Math.floor(getMonth(_date, isUTC) / 3) * 3, isUTC);\n    }\n    return _date;\n}\n/**\n * @param {?} date\n * @param {?} unit\n * @param {?=} isUTC\n * @return {?}\n */\nfunction endOf(date, unit, isUTC) {\n    let /** @type {?} */ _unit = unit;\n    // 'date' is an alias for 'day', so it should be considered as such.\n    if (_unit === 'date') {\n        _unit = 'day';\n    }\n    const /** @type {?} */ start = startOf(date, _unit, isUTC);\n    const /** @type {?} */ _step = add(start, 1, _unit === 'isoWeek' ? 'week' : _unit, isUTC);\n    const /** @type {?} */ res = subtract(_step, 1, 'milliseconds', isUTC);\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initDayOfYear() {\n    // FORMATTING\n    addFormatToken('DDD', ['DDDD', 3, false], 'DDDo', function (date) {\n        return getDayOfYear(date)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('dayOfYear', 'DDD');\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n        return config;\n    });\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getDayOfYear(date, isUTC) {\n    const /** @type {?} */ date1 = +startOf(date, 'day', isUTC);\n    const /** @type {?} */ date2 = +startOf(date, 'year', isUTC);\n    const /** @type {?} */ someDate = date1 - date2;\n    const /** @type {?} */ oneDay = 1000 * 60 * 60 * 24;\n    return Math.round(someDate / oneDay) + 1;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} year\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\nfunction firstWeekOffset(year, dow, doy) {\n    // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    const /** @type {?} */ fwd = dow - doy + 7;\n    // first-week day local weekday -- which local weekday is fwd\n    const /** @type {?} */ fwdlw = (createUTCDate(year, 0, fwd).getUTCDay() - dow + 7) % 7;\n    return -fwdlw + fwd - 1;\n}\n/**\n * @param {?} year\n * @param {?} week\n * @param {?} weekday\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\nfunction dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n    const /** @type {?} */ localWeekday = (7 + weekday - dow) % 7;\n    const /** @type {?} */ weekOffset = firstWeekOffset(year, dow, doy);\n    const /** @type {?} */ dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;\n    let /** @type {?} */ resYear;\n    let /** @type {?} */ resDayOfYear;\n    if (dayOfYear <= 0) {\n        resYear = year - 1;\n        resDayOfYear = daysInYear(resYear) + dayOfYear;\n    }\n    else if (dayOfYear > daysInYear(year)) {\n        resYear = year + 1;\n        resDayOfYear = dayOfYear - daysInYear(year);\n    }\n    else {\n        resYear = year;\n        resDayOfYear = dayOfYear;\n    }\n    return {\n        year: resYear,\n        dayOfYear: resDayOfYear\n    };\n}\n/**\n * @param {?} date\n * @param {?} dow\n * @param {?} doy\n * @param {?=} isUTC\n * @return {?}\n */\nfunction weekOfYear(date, dow, doy, isUTC) {\n    const /** @type {?} */ weekOffset = firstWeekOffset(getFullYear(date, isUTC), dow, doy);\n    const /** @type {?} */ week = Math.floor((getDayOfYear(date, isUTC) - weekOffset - 1) / 7) + 1;\n    let /** @type {?} */ resWeek;\n    let /** @type {?} */ resYear;\n    if (week < 1) {\n        resYear = getFullYear(date, isUTC) - 1;\n        resWeek = week + weeksInYear(resYear, dow, doy);\n    }\n    else if (week > weeksInYear(getFullYear(date, isUTC), dow, doy)) {\n        resWeek = week - weeksInYear(getFullYear(date, isUTC), dow, doy);\n        resYear = getFullYear(date, isUTC) + 1;\n    }\n    else {\n        resYear = getFullYear(date, isUTC);\n        resWeek = week;\n    }\n    return {\n        week: resWeek,\n        year: resYear\n    };\n}\n/**\n * @param {?} year\n * @param {?} dow\n * @param {?} doy\n * @return {?}\n */\nfunction weeksInYear(year, dow, doy) {\n    const /** @type {?} */ weekOffset = firstWeekOffset(year, dow, doy);\n    const /** @type {?} */ weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\nconst /** @type {?} */ defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nconst /** @type {?} */ defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\nconst /** @type {?} */ defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\nconst /** @type {?} */ defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\nconst /** @type {?} */ defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\nconst /** @type {?} */ defaultLongDateFormat = {\n    LTS: 'h:mm:ss A',\n    LT: 'h:mm A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM D, YYYY',\n    LLL: 'MMMM D, YYYY h:mm A',\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\n};\nconst /** @type {?} */ defaultOrdinal = '%d';\nconst /** @type {?} */ defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\nconst /** @type {?} */ defaultMonthsShortRegex = matchWord;\nconst /** @type {?} */ defaultMonthsRegex = matchWord;\nclass Locale {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        if (!!config) {\n            this.set(config);\n        }\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    set(config) {\n        let /** @type {?} */ confKey;\n        for (confKey in config) {\n            if (!config.hasOwnProperty(confKey)) {\n                continue;\n            }\n            const /** @type {?} */ prop = config[/** @type {?} */ (confKey)];\n            const /** @type {?} */ key = /** @type {?} */ ((isFunction(prop) ? confKey : `_${confKey}`));\n            this[key] = /** @type {?} */ (prop);\n        }\n        this._config = config;\n    }\n    /**\n     * @param {?} key\n     * @param {?} date\n     * @param {?} now\n     * @return {?}\n     */\n    calendar(key, date, now) {\n        const /** @type {?} */ output = this._calendar[key] || this._calendar[\"sameElse\"];\n        return isFunction(output) ? output.call(null, date, now) : output;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    longDateFormat(key) {\n        const /** @type {?} */ format = this._longDateFormat[key];\n        const /** @type {?} */ formatUpper = this._longDateFormat[key.toUpperCase()];\n        if (format || !formatUpper) {\n            return format;\n        }\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n        return this._longDateFormat[key];\n    }\n    /**\n     * @return {?}\n     */\n    get invalidDate() {\n        return this._invalidDate;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set invalidDate(val) {\n        this._invalidDate = val;\n    }\n    /**\n     * @param {?} num\n     * @param {?=} token\n     * @return {?}\n     */\n    ordinal(num, token) {\n        return this._ordinal.replace('%d', num.toString(10));\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    preparse(str) {\n        return str;\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    postformat(str) {\n        return str;\n    }\n    /**\n     * @param {?} num\n     * @param {?} withoutSuffix\n     * @param {?} str\n     * @param {?} isFuture\n     * @return {?}\n     */\n    relativeTime(num, withoutSuffix, str, isFuture) {\n        const /** @type {?} */ output = this._relativeTime[str];\n        return (isFunction(output)) ?\n            output(num, withoutSuffix, str, isFuture) :\n            output.replace(/%d/i, num.toString(10));\n    }\n    /**\n     * @param {?} diff\n     * @param {?} output\n     * @return {?}\n     */\n    pastFuture(diff, output) {\n        const /** @type {?} */ format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    months(date, format, isUTC = false) {\n        if (!date) {\n            return isArray(this._months)\n                ? this._months\n                : this._months.standalone;\n        }\n        if (isArray(this._months)) {\n            return this._months[getMonth(date, isUTC)];\n        }\n        const /** @type {?} */ key = (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n            ? 'format'\n            : 'standalone';\n        return this._months[key][getMonth(date, isUTC)];\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC = false) {\n        if (!date) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort.standalone;\n        }\n        if (isArray(this._monthsShort)) {\n            return this._monthsShort[getMonth(date, isUTC)];\n        }\n        const /** @type {?} */ key = MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone';\n        return this._monthsShort[key][getMonth(date, isUTC)];\n    }\n    /**\n     * @param {?} monthName\n     * @param {?=} format\n     * @param {?=} strict\n     * @return {?}\n     */\n    monthsParse(monthName, format, strict) {\n        let /** @type {?} */ date;\n        let /** @type {?} */ regex;\n        if (this._monthsParseExact) {\n            return this.handleMonthStrictParse(monthName, format, strict);\n        }\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        let /** @type {?} */ i;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            date = new Date(Date.UTC(2000, i));\n            if (strict && !this._longMonthsParse[i]) {\n                const /** @type {?} */ _months = this.months(date, '', true).replace('.', '');\n                const /** @type {?} */ _shortMonths = this.monthsShort(date, '', true).replace('.', '');\n                this._longMonthsParse[i] = new RegExp(`^${_months}$`, 'i');\n                this._shortMonthsParse[i] = new RegExp(`^${_shortMonths}$`, 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = `^${this.months(date, '', true)}|^${this.monthsShort(date, '', true)}`;\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && (/** @type {?} */ (this._longMonthsParse[i])).test(monthName)) {\n                return i;\n            }\n            if (strict && format === 'MMM' && (/** @type {?} */ (this._shortMonthsParse[i])).test(monthName)) {\n                return i;\n            }\n            if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n    monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this.computeMonthsParse();\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            }\n            return this._monthsRegex;\n        }\n        if (!hasOwnProp(this, '_monthsRegex')) {\n            this._monthsRegex = defaultMonthsRegex;\n        }\n        return this._monthsStrictRegex && isStrict ?\n            this._monthsStrictRegex : this._monthsRegex;\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n    monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this.computeMonthsParse();\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            }\n            return this._monthsShortRegex;\n        }\n        if (!hasOwnProp(this, '_monthsShortRegex')) {\n            this._monthsShortRegex = defaultMonthsShortRegex;\n        }\n        return this._monthsShortStrictRegex && isStrict ?\n            this._monthsShortStrictRegex : this._monthsShortRegex;\n    }\n    /**\n     * Week\n     * @param {?} date\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    week(date, isUTC) {\n        return weekOfYear(date, this._week.dow, this._week.doy, isUTC).week;\n    }\n    /**\n     * @return {?}\n     */\n    firstDayOfWeek() {\n        return this._week.dow;\n    }\n    /**\n     * @return {?}\n     */\n    firstDayOfYear() {\n        return this._week.doy;\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    weekdays(date, format, isUTC) {\n        if (!date) {\n            return isArray(this._weekdays)\n                ? this._weekdays\n                : this._weekdays.standalone;\n        }\n        if (isArray(this._weekdays)) {\n            return this._weekdays[getDay(date, isUTC)];\n        }\n        const /** @type {?} */ _key = this._weekdays.isFormat.test(format)\n            ? 'format'\n            : 'standalone';\n        return this._weekdays[_key][getDay(date, isUTC)];\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    weekdaysMin(date, format, isUTC) {\n        return date ? this._weekdaysMin[getDay(date, isUTC)] : this._weekdaysMin;\n    }\n    /**\n     * @param {?=} date\n     * @param {?=} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    weekdaysShort(date, format, isUTC) {\n        return date ? this._weekdaysShort[getDay(date, isUTC)] : this._weekdaysShort;\n    }\n    /**\n     * @param {?=} weekdayName\n     * @param {?=} format\n     * @param {?=} strict\n     * @return {?}\n     */\n    weekdaysParse(weekdayName, format, strict) {\n        let /** @type {?} */ i;\n        let /** @type {?} */ regex;\n        if (this._weekdaysParseExact) {\n            return this.handleWeekStrictParse(weekdayName, format, strict);\n        }\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            // fix: here is the issue\n            const /** @type {?} */ date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(`^${this.weekdays(date, '', true).replace('.', '\\.?')}$`, 'i');\n                this._shortWeekdaysParse[i] = new RegExp(`^${this.weekdaysShort(date, '', true).replace('.', '\\.?')}$`, 'i');\n                this._minWeekdaysParse[i] = new RegExp(`^${this.weekdaysMin(date, '', true).replace('.', '\\.?')}$`, 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = `^${this.weekdays(date, '', true)}|^${this.weekdaysShort(date, '', true)}|^${this.weekdaysMin(date, '', true)}`;\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            if (!isArray(this._fullWeekdaysParse)\n                || !isArray(this._shortWeekdaysParse)\n                || !isArray(this._minWeekdaysParse)\n                || !isArray(this._weekdaysParse)) {\n                return;\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n            else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n            else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n            else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n    /**\n     * @param {?} isStrict\n     * @return {?}\n     */\n    weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this.computeWeekdaysParse();\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            }\n            else {\n                return this._weekdaysRegex;\n            }\n        }\n        else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = matchWord;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n    /**\n     * @param {?=} isStrict\n     * @return {?}\n     */\n    weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this.computeWeekdaysParse();\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            }\n            else {\n                return this._weekdaysShortRegex;\n            }\n        }\n        else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = matchWord;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n    /**\n     * @param {?=} isStrict\n     * @return {?}\n     */\n    weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this.computeWeekdaysParse();\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            }\n            else {\n                return this._weekdaysMinRegex;\n            }\n        }\n        else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = matchWord;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return input.toLowerCase().charAt(0) === 'p';\n    }\n    /**\n     * @param {?} hours\n     * @param {?} minutes\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        }\n        return isLower ? 'am' : 'AM';\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    formatLongDate(key) {\n        this._longDateFormat = this._longDateFormat ? this._longDateFormat : defaultLongDateFormat;\n        const /** @type {?} */ format = this._longDateFormat[key];\n        const /** @type {?} */ formatUpper = this._longDateFormat[key.toUpperCase()];\n        if (format || !formatUpper) {\n            return format;\n        }\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, (val) => {\n            return val.slice(1);\n        });\n        return this._longDateFormat[key];\n    }\n    /**\n     * @param {?} monthName\n     * @param {?} format\n     * @param {?=} strict\n     * @return {?}\n     */\n    handleMonthStrictParse(monthName, format, strict) {\n        const /** @type {?} */ llc = monthName.toLocaleLowerCase();\n        let /** @type {?} */ i;\n        let /** @type {?} */ ii;\n        let /** @type {?} */ mom;\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = new Date(2000, i);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n        if (strict) {\n            if (format === 'MMM') {\n                ii = (/** @type {?} */ (this._shortMonthsParse)).indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            ii = (/** @type {?} */ (this._longMonthsParse)).indexOf(llc);\n            return ii !== -1 ? ii : null;\n        }\n        if (format === 'MMM') {\n            ii = (/** @type {?} */ (this._shortMonthsParse)).indexOf(llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = (/** @type {?} */ (this._longMonthsParse)).indexOf(llc);\n            return ii !== -1 ? ii : null;\n        }\n        ii = (/** @type {?} */ (this._longMonthsParse)).indexOf(llc);\n        if (ii !== -1) {\n            return ii;\n        }\n        ii = (/** @type {?} */ (this._shortMonthsParse)).indexOf(llc);\n        return ii !== -1 ? ii : null;\n    }\n    /**\n     * @param {?} weekdayName\n     * @param {?} format\n     * @param {?} strict\n     * @return {?}\n     */\n    handleWeekStrictParse(weekdayName, format, strict) {\n        let /** @type {?} */ ii;\n        const /** @type {?} */ llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n            let /** @type {?} */ i;\n            for (i = 0; i < 7; ++i) {\n                const /** @type {?} */ date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n                this._minWeekdaysParse[i] = this.weekdaysMin(date).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(date).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(date, '').toLocaleLowerCase();\n            }\n        }\n        if (!isArray(this._weekdaysParse)\n            || !isArray(this._shortWeekdaysParse)\n            || !isArray(this._minWeekdaysParse)) {\n            return;\n        }\n        if (strict) {\n            if (format === 'dddd') {\n                ii = this._weekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else if (format === 'ddd') {\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else {\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n        else {\n            if (format === 'dddd') {\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else if (format === 'ddd') {\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else {\n                ii = this._minWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    computeMonthsParse() {\n        const /** @type {?} */ shortPieces = [];\n        const /** @type {?} */ longPieces = [];\n        const /** @type {?} */ mixedPieces = [];\n        let /** @type {?} */ date;\n        let /** @type {?} */ i;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            date = new Date(2000, i);\n            shortPieces.push(this.monthsShort(date, ''));\n            longPieces.push(this.months(date, ''));\n            mixedPieces.push(this.months(date, ''));\n            mixedPieces.push(this.monthsShort(date, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n        this._monthsRegex = new RegExp(`^(${mixedPieces.join('|')})`, 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(`^(${longPieces.join('|')})`, 'i');\n        this._monthsShortStrictRegex = new RegExp(`^(${shortPieces.join('|')})`, 'i');\n    }\n    /**\n     * @return {?}\n     */\n    computeWeekdaysParse() {\n        const /** @type {?} */ minPieces = [];\n        const /** @type {?} */ shortPieces = [];\n        const /** @type {?} */ longPieces = [];\n        const /** @type {?} */ mixedPieces = [];\n        let /** @type {?} */ i;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            // let mom = createUTC([2000, 1]).day(i);\n            const /** @type {?} */ date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n            const /** @type {?} */ minp = this.weekdaysMin(date);\n            const /** @type {?} */ shortp = this.weekdaysShort(date);\n            const /** @type {?} */ longp = this.weekdays(date);\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n        this._weekdaysRegex = new RegExp(`^(${mixedPieces.join('|')})`, 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n        this._weekdaysStrictRegex = new RegExp(`^(${longPieces.join('|')})`, 'i');\n        this._weekdaysShortStrictRegex = new RegExp(`^(${shortPieces.join('|')})`, 'i');\n        this._weekdaysMinStrictRegex = new RegExp(`^(${minPieces.join('|')})`, 'i');\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction cmpLenRev(a, b) {\n    return b.length - a.length;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ defaultCalendar = {\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday at] LT',\n    lastWeek: '[Last] dddd [at] LT',\n    sameElse: 'L'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ defaultInvalidDate = 'Invalid date';\nconst /** @type {?} */ defaultLocaleWeek = {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 1st is the first week of the year.\n};\nconst /** @type {?} */ defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\nconst /** @type {?} */ defaultRelativeTime = {\n    future: 'in %s',\n    past: '%s ago',\n    s: 'a few seconds',\n    ss: '%d seconds',\n    m: 'a minute',\n    mm: '%d minutes',\n    h: 'an hour',\n    hh: '%d hours',\n    d: 'a day',\n    dd: '%d days',\n    M: 'a month',\n    MM: '%d months',\n    y: 'a year',\n    yy: '%d years'\n};\nconst /** @type {?} */ baseConfig = {\n    calendar: defaultCalendar,\n    longDateFormat: defaultLongDateFormat,\n    invalidDate: defaultInvalidDate,\n    ordinal: defaultOrdinal,\n    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n    relativeTime: defaultRelativeTime,\n    months: defaultLocaleMonths,\n    monthsShort: defaultLocaleMonthsShort,\n    week: defaultLocaleWeek,\n    weekdays: defaultLocaleWeekdays,\n    weekdaysMin: defaultLocaleWeekdaysMin,\n    weekdaysShort: defaultLocaleWeekdaysShort,\n    meridiemParse: defaultLocaleMeridiemParse\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n * @param {?} array1\n * @param {?} array2\n * @param {?} dontConvert\n * @return {?}\n */\nfunction compareArrays(array1, array2, dontConvert) {\n    const /** @type {?} */ len = Math.min(array1.length, array2.length);\n    const /** @type {?} */ lengthDiff = Math.abs(array1.length - array2.length);\n    let /** @type {?} */ diffs = 0;\n    let /** @type {?} */ i;\n    for (i = 0; i < len; i++) {\n        if ((dontConvert && array1[i] !== array2[i])\n            || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n            diffs++;\n        }\n    }\n    return diffs + lengthDiff;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initWeek() {\n    addFormatToken('w', ['ww', 2, false], 'wo', function (date, opts) {\n        return getWeek(date, opts.locale)\n            .toString(10);\n    });\n    addFormatToken('W', ['WW', 2, false], 'Wo', function (date) {\n        return getISOWeek(date)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n    // PARSING\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n        return config;\n    });\n    // export function getSetWeek (input) {\n    //   var week = this.localeData().week(this);\n    //   return input == null ? week : this.add((input - week) * 7, 'd');\n    // }\n}\n/**\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getWeek(date, locale = getLocale(), isUTC) {\n    return locale.week(date, isUTC);\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getISOWeek(date, isUTC) {\n    return weekOfYear(date, 1, 4, isUTC).week;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initWeekYear() {\n    addFormatToken(null, ['gg', 2, false], null, function (date, opts) {\n        // return this.weekYear() % 100;\n        return (getWeekYear(date, opts.locale) % 100).toString();\n    });\n    addFormatToken(null, ['GG', 2, false], null, function (date) {\n        // return this.isoWeekYear() % 100;\n        return (getISOWeekYear(date) % 100).toString();\n    });\n    addWeekYearFormatToken('gggg', _getWeekYearFormatCb);\n    addWeekYearFormatToken('ggggg', _getWeekYearFormatCb);\n    addWeekYearFormatToken('GGGG', _getISOWeekYearFormatCb);\n    addWeekYearFormatToken('GGGGG', _getISOWeekYearFormatCb);\n    // ALIASES\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n    // PARSING\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n        return config;\n    });\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = parseTwoDigitYear(input);\n        return config;\n    });\n}\n/**\n * @param {?} token\n * @param {?} getter\n * @return {?}\n */\nfunction addWeekYearFormatToken(token, getter) {\n    addFormatToken(null, [token, token.length, false], null, getter);\n}\n/**\n * @param {?} date\n * @param {?} opts\n * @return {?}\n */\nfunction _getWeekYearFormatCb(date, opts) {\n    return getWeekYear(date, opts.locale).toString();\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction _getISOWeekYearFormatCb(date) {\n    return getISOWeekYear(date).toString();\n}\n/**\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getWeekYear(date, locale = getLocale(), isUTC) {\n    return weekOfYear(date, locale.firstDayOfWeek(), locale.firstDayOfYear(), isUTC).year;\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getISOWeekYear(date, isUTC) {\n    return weekOfYear(date, 1, 4, isUTC).year;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initTimezone() {\n    // FORMATTING\n    addFormatToken('z', null, null, function (date, opts) {\n        return opts.isUTC ? 'UTC' : '';\n    });\n    addFormatToken('zz', null, null, function (date, opts) {\n        return opts.isUTC ? 'Coordinated Universal Time' : '';\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initTimestamp() {\n    // FORMATTING\n    addFormatToken('X', null, null, function (date) {\n        return unix(date)\n            .toString(10);\n    });\n    addFormatToken('x', null, null, function (date) {\n        return date.valueOf()\n            .toString(10);\n    });\n    // PARSING\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n        return config;\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n        return config;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initSecond() {\n    // FORMATTING\n    addFormatToken('s', ['ss', 2, false], null, function (date, opts) {\n        return getSeconds(date, opts.isUTC)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('second', 's');\n    // PARSING\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initQuarter() {\n    // FORMATTING\n    addFormatToken('Q', null, 'Qo', function (date, opts) {\n        return getQuarter(date, opts.isUTC)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('quarter', 'Q');\n    // PARSING\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array, config) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n        return config;\n    });\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getQuarter(date, isUTC = false) {\n    return Math.ceil((getMonth(date, isUTC) + 1) / 3);\n}\n// export function getSetQuarter(input) {\n//   return input == null\n//     ? Math.ceil((this.month() + 1) / 3)\n//     : this.month((input - 1) * 3 + this.month() % 3);\n// }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} token\n * @param {?} separator\n * @return {?}\n */\nfunction addOffsetFormatToken(token, separator) {\n    addFormatToken(token, null, null, function (date, config) {\n        let /** @type {?} */ offset = getUTCOffset(date, { _isUTC: config.isUTC, _offset: config.offset });\n        let /** @type {?} */ sign = '+';\n        if (offset < 0) {\n            offset = -offset;\n            sign = '-';\n        }\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n    });\n}\n/**\n * @return {?}\n */\nfunction initOffset() {\n    addOffsetFormatToken('Z', ':');\n    addOffsetFormatToken('ZZ', '');\n    // PARSING\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n        return config;\n    });\n}\n// HELPERS\n// timezone chunker\n// '+10:00' > ['10',  '00']\n// '-1530'  > ['-15', '30']\nconst /** @type {?} */ chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n/**\n * @param {?} matcher\n * @param {?} str\n * @return {?}\n */\nfunction offsetFromString(matcher, str) {\n    const /** @type {?} */ matches = (str || '').match(matcher);\n    if (matches === null) {\n        return null;\n    }\n    const /** @type {?} */ chunk = matches[matches.length - 1];\n    const /** @type {?} */ parts = chunk.match(chunkOffset) || ['-', '0', '0'];\n    const /** @type {?} */ minutes = parseInt(parts[1], 10) * 60 + toInt(parts[2]);\n    const /** @type {?} */ _min = parts[0] === '+' ? minutes : -minutes;\n    return minutes === 0 ? 0 : _min;\n}\n/**\n * @param {?} input\n * @param {?} date\n * @param {?=} config\n * @return {?}\n */\nfunction cloneWithOffset(input, date, config = {}) {\n    if (!config._isUTC) {\n        return input;\n    }\n    const /** @type {?} */ res = cloneDate(date);\n    // todo: input._d - res._d + ((res._offset || 0) - (input._offset || 0))*60000\n    const /** @type {?} */ offsetDiff = (config._offset || 0) * 60000;\n    const /** @type {?} */ diff = input.valueOf() - res.valueOf() + offsetDiff;\n    // Use low-level api, because this fn is low-level api.\n    res.setTime(res.valueOf() + diff);\n    // todo: add timezone handling\n    // hooks.updateOffset(res, false);\n    return res;\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction getDateOffset(date) {\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n    // https://github.com/moment/moment/pull/1871\n    return -Math.round(date.getTimezoneOffset() / 15) * 15;\n}\n/**\n * @param {?} date\n * @param {?=} config\n * @return {?}\n */\nfunction getUTCOffset(date, config = {}) {\n    const /** @type {?} */ _offset = config._offset || 0;\n    return config._isUTC ? _offset : getDateOffset(date);\n}\n// DEPRECATED\n/*export function isDaylightSavingTimeShifted() {\n  if (!isUndefined(this._isDSTShifted)) {\n    return this._isDSTShifted;\n  }\n\n  const c = {};\n\n  copyConfig(c, this);\n  c = prepareConfig(c);\n\n  if (c._a) {\n    const other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n    this._isDSTShifted = this.isValid() &&\n      compareArrays(c._a, other.toArray()) > 0;\n  } else {\n    this._isDSTShifted = false;\n  }\n\n  return this._isDSTShifted;\n}*/\n// in Khronos\n/*export function isLocal() {\n  return this.isValid() ? !this._isUTC : false;\n}\n\nexport function isUtcOffset() {\n  return this.isValid() ? this._isUTC : false;\n}\n\nexport function isUtc() {\n  return this.isValid() ? this._isUTC && this._offset === 0 : false;\n}*/\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initMinute() {\n    // FORMATTING\n    addFormatToken('m', ['mm', 2, false], null, function (date, opts) {\n        return getMinutes(date, opts.isUTC)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('minute', 'm');\n    // PARSING\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initMillisecond() {\n    addFormatToken('S', null, null, function (date, opts) {\n        return (~~(getMilliseconds(date, opts.isUTC) / 100)).toString(10);\n    });\n    addFormatToken(null, ['SS', 2, false], null, function (date, opts) {\n        return (~~(getMilliseconds(date, opts.isUTC) / 10)).toString(10);\n    });\n    addFormatToken(null, ['SSS', 3, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC)).toString(10);\n    });\n    addFormatToken(null, ['SSSS', 4, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 10).toString(10);\n    });\n    addFormatToken(null, ['SSSSS', 5, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 100).toString(10);\n    });\n    addFormatToken(null, ['SSSSSS', 6, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 1000).toString(10);\n    });\n    addFormatToken(null, ['SSSSSSS', 7, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 10000).toString(10);\n    });\n    addFormatToken(null, ['SSSSSSSS', 8, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 100000).toString(10);\n    });\n    addFormatToken(null, ['SSSSSSSSS', 9, false], null, function (date, opts) {\n        return (getMilliseconds(date, opts.isUTC) * 1000000).toString(10);\n    });\n    // ALIASES\n    addUnitAlias('millisecond', 'ms');\n    // PARSING\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n    let /** @type {?} */ token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n    /**\n     * @param {?} input\n     * @param {?} array\n     * @param {?} config\n     * @return {?}\n     */\n    function parseMs(input, array, config) {\n        array[MILLISECOND] = toInt(parseFloat(`0.${input}`) * 1000);\n        return config;\n    }\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initHour() {\n    /**\n     * @param {?} date\n     * @param {?} isUTC\n     * @return {?}\n     */\n    function hFormat(date, isUTC) {\n        return getHours(date, isUTC) % 12 || 12;\n    }\n    /**\n     * @param {?} date\n     * @param {?} isUTC\n     * @return {?}\n     */\n    function kFormat(date, isUTC) {\n        return getHours(date, isUTC) || 24;\n    }\n    addFormatToken('H', ['HH', 2, false], null, function (date, opts) {\n        return getHours(date, opts.isUTC)\n            .toString(10);\n    });\n    addFormatToken('h', ['hh', 2, false], null, function (date, opts) {\n        return hFormat(date, opts.isUTC)\n            .toString(10);\n    });\n    addFormatToken('k', ['kk', 2, false], null, function (date, opts) {\n        return kFormat(date, opts.isUTC)\n            .toString(10);\n    });\n    addFormatToken('hmm', null, null, function (date, opts) {\n        const /** @type {?} */ _h = hFormat(date, opts.isUTC);\n        const /** @type {?} */ _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n        return `${_h}${_mm}`;\n    });\n    addFormatToken('hmmss', null, null, function (date, opts) {\n        const /** @type {?} */ _h = hFormat(date, opts.isUTC);\n        const /** @type {?} */ _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n        const /** @type {?} */ _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n        return `${_h}${_mm}${_ss}`;\n    });\n    addFormatToken('Hmm', null, null, function (date, opts) {\n        const /** @type {?} */ _H = getHours(date, opts.isUTC);\n        const /** @type {?} */ _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n        return `${_H}${_mm}`;\n    });\n    addFormatToken('Hmmss', null, null, function (date, opts) {\n        const /** @type {?} */ _H = getHours(date, opts.isUTC);\n        const /** @type {?} */ _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n        const /** @type {?} */ _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n        return `${_H}${_mm}${_ss}`;\n    });\n    /**\n     * @param {?} token\n     * @param {?} lowercase\n     * @return {?}\n     */\n    function meridiem(token, lowercase) {\n        addFormatToken(token, null, null, function (date, opts) {\n            return opts.locale.meridiem(getHours(date, opts.isUTC), getMinutes(date, opts.isUTC), lowercase);\n        });\n    }\n    meridiem('a', true);\n    meridiem('A', false);\n    // ALIASES\n    addUnitAlias('hour', 'h');\n    /**\n     * @param {?} isStrict\n     * @param {?} locale\n     * @return {?}\n     */\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        const /** @type {?} */ kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n        return config;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n        return config;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n        return config;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        const /** @type {?} */ pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n        return config;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        const /** @type {?} */ pos1 = input.length - 4;\n        const /** @type {?} */ pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n        return config;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        const /** @type {?} */ pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        return config;\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        const /** @type {?} */ pos1 = input.length - 4;\n        const /** @type {?} */ pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        return config;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ locales = {};\nconst /** @type {?} */ localeFamilies = {};\nlet /** @type {?} */ globalLocale;\n/**\n * @param {?} key\n * @return {?}\n */\nfunction normalizeLocale(key) {\n    return key ? key.toLowerCase().replace('_', '-') : key;\n}\n/**\n * @param {?} names\n * @return {?}\n */\nfunction chooseLocale(names) {\n    let /** @type {?} */ next;\n    let /** @type {?} */ locale;\n    let /** @type {?} */ i = 0;\n    while (i < names.length) {\n        const /** @type {?} */ split = normalizeLocale(names[i]).split('-');\n        let /** @type {?} */ j = split.length;\n        next = normalizeLocale(names[i + 1]);\n        next = next ? next.split('-') : null;\n        while (j > 0) {\n            locale = loadLocale(split.slice(0, j).join('-'));\n            if (locale) {\n                return locale;\n            }\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                // the next array item is better than a shallower substring of this one\n                break;\n            }\n            j--;\n        }\n        i++;\n    }\n    return null;\n}\n/**\n * @param {?} parentConfig\n * @param {?} childConfig\n * @return {?}\n */\nfunction mergeConfigs(parentConfig, childConfig) {\n    const /** @type {?} */ res = Object.assign({}, parentConfig);\n    for (const /** @type {?} */ childProp in childConfig) {\n        if (!hasOwnProp(childConfig, childProp)) {\n            continue;\n        }\n        if (isObject(parentConfig[childProp]) && isObject(childConfig[childProp])) {\n            res[childProp] = {};\n            Object.assign(res[childProp], parentConfig[childProp]);\n            Object.assign(res[childProp], childConfig[childProp]);\n        }\n        else if (childConfig[childProp] != null) {\n            res[childProp] = childConfig[childProp];\n        }\n        else {\n            delete res[childProp];\n        }\n    }\n    let /** @type {?} */ parentProp;\n    for (parentProp in parentConfig) {\n        if (hasOwnProp(parentConfig, parentProp) &&\n            !hasOwnProp(childConfig, parentProp) &&\n            isObject(parentConfig[/** @type {?} */ (parentProp)])) {\n            // make sure changes to properties don't modify parent config\n            res[/** @type {?} */ (parentProp)] = Object.assign({}, res[/** @type {?} */ (parentProp)]);\n        }\n    }\n    return res;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction loadLocale(name) {\n    // no way!\n    /* var oldLocale = null;\n       // TODO: Find a better way to register and load all the locales in Node\n       if (!locales[name] && (typeof module !== 'undefined') &&\n         module && module.exports) {\n         try {\n           oldLocale = globalLocale._abbr;\n           var aliasedRequire = require;\n           aliasedRequire('./locale/' + name);\n           getSetGlobalLocale(oldLocale);\n         } catch (e) {}\n       }*/\n    if (!locales[name]) {\n        // tslint:disable-next-line\n        console.error(`Khronos locale error: please load locale \"${name}\" before using it`);\n        // throw new Error(`Khronos locale error: please load locale \"${name}\" before using it`);\n    }\n    return locales[name];\n}\n/**\n * @param {?=} key\n * @param {?=} values\n * @return {?}\n */\nfunction getSetGlobalLocale(key, values) {\n    let /** @type {?} */ data;\n    if (key) {\n        if (isUndefined(values)) {\n            data = getLocale(key);\n        }\n        else if (isString(key)) {\n            data = defineLocale(key, values);\n        }\n        if (data) {\n            globalLocale = data;\n        }\n    }\n    return globalLocale && globalLocale._abbr;\n}\n/**\n * @param {?} name\n * @param {?=} config\n * @return {?}\n */\nfunction defineLocale(name, config) {\n    if (config === null) {\n        // useful for testing\n        delete locales[name];\n        globalLocale = getLocale('en');\n        return null;\n    }\n    if (!config) {\n        return;\n    }\n    let /** @type {?} */ parentConfig = baseConfig;\n    config.abbr = name;\n    if (config.parentLocale != null) {\n        if (locales[config.parentLocale] != null) {\n            parentConfig = locales[config.parentLocale]._config;\n        }\n        else {\n            if (!localeFamilies[config.parentLocale]) {\n                localeFamilies[config.parentLocale] = [];\n            }\n            localeFamilies[config.parentLocale].push({ name, config });\n            return null;\n        }\n    }\n    locales[name] = new Locale(mergeConfigs(parentConfig, config));\n    if (localeFamilies[name]) {\n        localeFamilies[name].forEach(function (x) {\n            defineLocale(x.name, x.config);\n        });\n    }\n    // backwards compat for now: also set the locale\n    // make sure we set the locale AFTER all child locales have been\n    // created, so we won't end up with the child locale set.\n    getSetGlobalLocale(name);\n    return locales[name];\n}\n/**\n * @param {?} name\n * @param {?=} config\n * @return {?}\n */\nfunction updateLocale(name, config) {\n    let /** @type {?} */ _config = config;\n    if (_config != null) {\n        let /** @type {?} */ parentConfig = baseConfig;\n        // MERGE\n        const /** @type {?} */ tmpLocale = loadLocale(name);\n        if (tmpLocale != null) {\n            parentConfig = tmpLocale._config;\n        }\n        _config = mergeConfigs(parentConfig, _config);\n        const /** @type {?} */ locale = new Locale(_config);\n        locale.parentLocale = locales[name];\n        locales[name] = locale;\n        // backwards compat for now: also set the locale\n        getSetGlobalLocale(name);\n    }\n    else {\n        // pass null for config to unupdate, useful for tests\n        if (locales[name] != null) {\n            if (locales[name].parentLocale != null) {\n                locales[name] = locales[name].parentLocale;\n            }\n            else if (locales[name] != null) {\n                delete locales[name];\n            }\n        }\n    }\n    return locales[name];\n}\n/**\n * @param {?=} key\n * @return {?}\n */\nfunction getLocale(key) {\n    setDefaultLocale();\n    if (!key) {\n        return globalLocale;\n    }\n    // let locale;\n    const /** @type {?} */ _key = isArray(key) ? key : [key];\n    return chooseLocale(_key);\n}\n/**\n * @return {?}\n */\nfunction listLocales() {\n    return Object.keys(locales);\n}\n/**\n * @return {?}\n */\nfunction setDefaultLocale() {\n    if (locales[`en`]) {\n        return undefined;\n    }\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        ordinal(num) {\n            const /** @type {?} */ b = num % 10;\n            const /** @type {?} */ output = toInt((num % 100) / 10) === 1\n                ? 'th'\n                : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return num + output;\n        }\n    });\n    initWeek();\n    initWeekYear();\n    initYear();\n    initTimezone();\n    initTimestamp();\n    initSecond();\n    initQuarter();\n    initOffset();\n    initMonth();\n    initMinute();\n    initMillisecond();\n    initHour();\n    initDayOfYear();\n    initDayOfWeek();\n    initDayOfMonth();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ ordering = ['year', 'quarter', 'month', 'week', 'day', 'hours', 'minutes', 'seconds', 'milliseconds'];\nconst ɵ0 = (mem, order) => {\n    mem[order] = true;\n    return mem;\n};\nconst /** @type {?} */ orderingHash = ordering.reduce(ɵ0, {});\n/**\n * @param {?} duration\n * @return {?}\n */\nfunction isDurationValid(duration) {\n    const /** @type {?} */ durationKeys = Object.keys(duration);\n    if (durationKeys\n        .some((key) => {\n        return (key in orderingHash)\n            && duration[key] === null\n            || isNaN(duration[key]);\n    })) {\n        return false;\n    }\n    // for (let key in duration) {\n    //   if (!(indexOf.call(ordering, key) !== -1 && (duration[key] == null || !isNaN(duration[key])))) {\n    //     return false;\n    //   }\n    // }\n    let /** @type {?} */ unitHasDecimal = false;\n    for (let /** @type {?} */ i = 0; i < ordering.length; ++i) {\n        if (duration[ordering[i]]) {\n            // only allow non-integers for smallest unit\n            if (unitHasDecimal) {\n                return false;\n            }\n            if (duration[ordering[i]] !== toInt(duration[ordering[i]])) {\n                unitHasDecimal = true;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} number\n * @return {?}\n */\nfunction absCeil(number) {\n    return number < 0 ? Math.floor(number) : Math.ceil(number);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} dur\n * @return {?}\n */\nfunction bubble(dur) {\n    let /** @type {?} */ milliseconds = dur._milliseconds;\n    let /** @type {?} */ days = dur._days;\n    let /** @type {?} */ months = dur._months;\n    const /** @type {?} */ data = dur._data;\n    // if we have a mix of positive and negative values, bubble down first\n    // check: https://github.com/moment/moment/issues/2166\n    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n        (milliseconds <= 0 && days <= 0 && months <= 0))) {\n        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n        days = 0;\n        months = 0;\n    }\n    // The following code bubbles up values, see the tests for\n    // examples of what that means.\n    data.milliseconds = milliseconds % 1000;\n    const /** @type {?} */ seconds = absFloor(milliseconds / 1000);\n    data.seconds = seconds % 60;\n    const /** @type {?} */ minutes = absFloor(seconds / 60);\n    data.minutes = minutes % 60;\n    const /** @type {?} */ hours = absFloor(minutes / 60);\n    data.hours = hours % 24;\n    days += absFloor(hours / 24);\n    // convert days to months\n    const /** @type {?} */ monthsFromDays = absFloor(daysToMonths(days));\n    months += monthsFromDays;\n    days -= absCeil(monthsToDays(monthsFromDays));\n    // 12 months -> 1 year\n    const /** @type {?} */ years = absFloor(months / 12);\n    months %= 12;\n    data.day = days;\n    data.month = months;\n    data.year = years;\n    return dur;\n}\n/**\n * @param {?} day\n * @return {?}\n */\nfunction daysToMonths(day) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    // 400 years have 12 months === 4800\n    return day * 4800 / 146097;\n}\n/**\n * @param {?} month\n * @return {?}\n */\nfunction monthsToDays(month) {\n    // the reverse of daysToMonths\n    return month * 146097 / 4800;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet /** @type {?} */ round = Math.round;\nconst /** @type {?} */ thresholds = {\n    ss: 44,\n    // a few seconds to seconds\n    s: 45,\n    // seconds to minute\n    m: 45,\n    // minutes to hour\n    h: 22,\n    // hours to day\n    d: 26,\n    // days to month\n    M: 11 // months to year\n};\n/**\n * @param {?} str\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} isFuture\n * @param {?} locale\n * @return {?}\n */\nfunction substituteTimeAgo(str, num, withoutSuffix, isFuture, locale) {\n    return locale.relativeTime(num || 1, !!withoutSuffix, str, isFuture);\n}\n/**\n * @param {?} posNegDuration\n * @param {?} withoutSuffix\n * @param {?} locale\n * @return {?}\n */\nfunction relativeTime(posNegDuration, withoutSuffix, locale) {\n    const /** @type {?} */ duration = createDuration(posNegDuration).abs();\n    const /** @type {?} */ seconds = round(duration.as('s'));\n    const /** @type {?} */ minutes = round(duration.as('m'));\n    const /** @type {?} */ hours = round(duration.as('h'));\n    const /** @type {?} */ days = round(duration.as('d'));\n    const /** @type {?} */ months = round(duration.as('M'));\n    const /** @type {?} */ years = round(duration.as('y'));\n    const /** @type {?} */ a = seconds <= thresholds[\"ss\"] && ['s', seconds] ||\n        seconds < thresholds[\"s\"] && ['ss', seconds] ||\n        minutes <= 1 && ['m'] ||\n        minutes < thresholds[\"m\"] && ['mm', minutes] ||\n        hours <= 1 && ['h'] ||\n        hours < thresholds[\"h\"] && ['hh', hours] ||\n        days <= 1 && ['d'] ||\n        days < thresholds[\"d\"] && ['dd', days] ||\n        months <= 1 && ['M'] ||\n        months < thresholds[\"M\"] && ['MM', months] ||\n        years <= 1 && ['y'] || ['yy', years];\n    const /** @type {?} */ b = [a[0], a[1], withoutSuffix, +posNegDuration > 0, locale];\n    // a[2] = withoutSuffix;\n    // a[3] = +posNegDuration > 0;\n    // a[4] = locale;\n    return substituteTimeAgo.apply(null, b);\n}\n// export function humanize(withSuffix) {\n//   if (!this.isValid()) {\n//     return this.localeData().invalidDate();\n//   }\n//\n//   const locale = this.localeData();\n//   let output = relativeTime(this, !withSuffix, locale);\n//\n//   if (withSuffix) {\n//     output = locale.pastFuture(+this, output);\n//   }\n//\n//   return locale.postformat(output);\n// }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Duration {\n    /**\n     * @param {?} duration\n     * @param {?=} config\n     */\n    constructor(duration, config = {}) {\n        this._data = {};\n        this._locale = getLocale();\n        this._locale = config && config._locale || getLocale();\n        // const normalizedInput = normalizeObjectUnits(duration);\n        const /** @type {?} */ normalizedInput = duration;\n        const /** @type {?} */ years = normalizedInput.year || 0;\n        const /** @type {?} */ quarters = normalizedInput.quarter || 0;\n        const /** @type {?} */ months = normalizedInput.month || 0;\n        const /** @type {?} */ weeks = normalizedInput.week || 0;\n        const /** @type {?} */ days = normalizedInput.day || 0;\n        const /** @type {?} */ hours = normalizedInput.hours || 0;\n        const /** @type {?} */ minutes = normalizedInput.minutes || 0;\n        const /** @type {?} */ seconds = normalizedInput.seconds || 0;\n        const /** @type {?} */ milliseconds = normalizedInput.milliseconds || 0;\n        this._isValid = isDurationValid(normalizedInput);\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1000 +\n            minutes * 60 * 1000 + // 1000 * 60\n            // 1000 * 60\n            hours * 1000 * 60 * 60; // using 1000 * 60 * 60\n        // instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n        // this._data = {};\n        // this._locale = getLocale();\n        // this._bubble();\n        return bubble(this);\n    }\n    /**\n     * @return {?}\n     */\n    isValid() {\n        return this._isValid;\n    }\n    /**\n     * @param {?=} withSuffix\n     * @return {?}\n     */\n    humanize(withSuffix) {\n        // throw new Error(`TODO: implement`);\n        if (!this.isValid()) {\n            return this.localeData().invalidDate;\n        }\n        const /** @type {?} */ locale = this.localeData();\n        let /** @type {?} */ output = relativeTime(this, !withSuffix, locale);\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n        return locale.postformat(output);\n    }\n    /**\n     * @return {?}\n     */\n    localeData() {\n        return this._locale;\n    }\n    /**\n     * @param {?=} localeKey\n     * @return {?}\n     */\n    locale(localeKey) {\n        if (!localeKey) {\n            return this._locale._abbr;\n        }\n        this._locale = getLocale(localeKey) || this._locale;\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    abs() {\n        const /** @type {?} */ mathAbs = Math.abs;\n        const /** @type {?} */ data = this._data;\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.month = mathAbs(data.month);\n        data.year = mathAbs(data.year);\n        return this;\n    }\n    /**\n     * @param {?} _units\n     * @return {?}\n     */\n    as(_units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        let /** @type {?} */ days;\n        let /** @type {?} */ months;\n        const /** @type {?} */ milliseconds = this._milliseconds;\n        const /** @type {?} */ units = normalizeUnits(_units);\n        if (units === 'month' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        }\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week':\n                return days / 7 + milliseconds / 6048e5;\n            case 'day':\n                return days + milliseconds / 864e5;\n            case 'hours':\n                return days * 24 + milliseconds / 36e5;\n            case 'minutes':\n                return days * 1440 + milliseconds / 6e4;\n            case 'seconds':\n                return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'milliseconds':\n                return Math.floor(days * 864e5) + milliseconds;\n            default:\n                throw new Error(`Unknown unit ${units}`);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    valueOf() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6);\n    }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isDuration(obj) {\n    return obj instanceof Duration;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction isValid(config) {\n    if (config._isValid == null) {\n        const /** @type {?} */ flags = getParsingFlags(config);\n        const /** @type {?} */ parsedParts = Array.prototype.some.call(flags.parsedDateParts, function (i) {\n            return i != null;\n        });\n        let /** @type {?} */ isNowValid = !isNaN(config._d && config._d.getTime()) &&\n            flags.overflow < 0 &&\n            !flags.empty &&\n            !flags.invalidMonth &&\n            !flags.invalidWeekday &&\n            !flags.weekdayMismatch &&\n            !flags.nullInput &&\n            !flags.invalidFormat &&\n            !flags.userInvalidated &&\n            (!flags.meridiem || (flags.meridiem && parsedParts));\n        if (config._strict) {\n            isNowValid = isNowValid &&\n                flags.charsLeftOver === 0 &&\n                flags.unusedTokens.length === 0 &&\n                flags.bigHour === undefined;\n        }\n        if (Object.isFrozen == null || !Object.isFrozen(config)) {\n            config._isValid = isNowValid;\n        }\n        else {\n            return isNowValid;\n        }\n    }\n    return config._isValid;\n}\n/**\n * @param {?} config\n * @param {?=} flags\n * @return {?}\n */\nfunction createInvalid(config, flags) {\n    config._d = new Date(NaN);\n    Object.assign(getParsingFlags(config), flags || { userInvalidated: true });\n    return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction markInvalid(config) {\n    config._isValid = false;\n    return config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n// tslint:disable-next-line\nconst /** @type {?} */ extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n// tslint:disable-next-line\nconst /** @type {?} */ basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nconst /** @type {?} */ tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\nconst /** @type {?} */ isoDates = [\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/, true],\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/, true],\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/, true],\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n    ['YYYY-DDD', /\\d{4}-\\d{3}/, true],\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n    ['YYYYYYMMDD', /[+-]\\d{10}/, true],\n    ['YYYYMMDD', /\\d{8}/, true],\n    // YYYYMM is NOT allowed by the standard\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/, true],\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n    ['YYYYDDD', /\\d{7}/, true]\n];\n// iso time formats and regexes\nconst /** @type {?} */ isoTimes = [\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n    ['HH:mm', /\\d\\d:\\d\\d/],\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n    ['HHmm', /\\d\\d\\d\\d/],\n    ['HH', /\\d\\d/]\n];\nconst /** @type {?} */ aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\nconst /** @type {?} */ obsOffsets = {\n    UT: 0,\n    GMT: 0,\n    EDT: -4 * 60,\n    EST: -5 * 60,\n    CDT: -5 * 60,\n    CST: -6 * 60,\n    MDT: -6 * 60,\n    MST: -7 * 60,\n    PDT: -7 * 60,\n    PST: -8 * 60\n};\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n// tslint:disable-next-line\nconst /** @type {?} */ rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromISO(config) {\n    if (!isString(config._i)) {\n        return config;\n    }\n    const /** @type {?} */ input = config._i;\n    const /** @type {?} */ match = extendedIsoRegex.exec(input) || basicIsoRegex.exec(input);\n    let /** @type {?} */ allowTime;\n    let /** @type {?} */ dateFormat;\n    let /** @type {?} */ timeFormat;\n    let /** @type {?} */ tzFormat;\n    if (!match) {\n        config._isValid = false;\n        return config;\n    }\n    // getParsingFlags(config).iso = true;\n    let /** @type {?} */ i;\n    let /** @type {?} */ l;\n    for (i = 0, l = isoDates.length; i < l; i++) {\n        if (isoDates[i][1].exec(match[1])) {\n            dateFormat = isoDates[i][0];\n            allowTime = isoDates[i][2] !== false;\n            break;\n        }\n    }\n    if (dateFormat == null) {\n        config._isValid = false;\n        return config;\n    }\n    if (match[3]) {\n        for (i = 0, l = isoTimes.length; i < l; i++) {\n            if (isoTimes[i][1].exec(match[3])) {\n                // match[2] should be 'T' or space\n                timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                break;\n            }\n        }\n        if (timeFormat == null) {\n            config._isValid = false;\n            return config;\n        }\n    }\n    if (!allowTime && timeFormat != null) {\n        config._isValid = false;\n        return config;\n    }\n    if (match[4]) {\n        if (tzRegex.exec(match[4])) {\n            tzFormat = 'Z';\n        }\n        else {\n            config._isValid = false;\n            return config;\n        }\n    }\n    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n    return configFromStringAndFormat(config);\n}\n/**\n * @param {?} yearStr\n * @param {?} monthStr\n * @param {?} dayStr\n * @param {?} hourStr\n * @param {?} minuteStr\n * @param {?} secondStr\n * @return {?}\n */\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n    const /** @type {?} */ result = [\n        untruncateYear(yearStr),\n        defaultLocaleMonthsShort.indexOf(monthStr),\n        parseInt(dayStr, 10),\n        parseInt(hourStr, 10),\n        parseInt(minuteStr, 10)\n    ];\n    if (secondStr) {\n        result.push(parseInt(secondStr, 10));\n    }\n    return result;\n}\n/**\n * @param {?} yearStr\n * @return {?}\n */\nfunction untruncateYear(yearStr) {\n    const /** @type {?} */ year = parseInt(yearStr, 10);\n    return year <= 49 ? year + 2000 : year;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction preprocessRFC2822(str) {\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\n    return str\n        .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n        .replace(/(\\s\\s+)/g, ' ').trim();\n}\n/**\n * @param {?} weekdayStr\n * @param {?} parsedInput\n * @param {?} config\n * @return {?}\n */\nfunction checkWeekday(weekdayStr, parsedInput, config) {\n    if (weekdayStr) {\n        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n        const /** @type {?} */ weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr);\n        const /** @type {?} */ weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n        if (weekdayProvided !== weekdayActual) {\n            getParsingFlags(config).weekdayMismatch = true;\n            config._isValid = false;\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {?} obsOffset\n * @param {?} militaryOffset\n * @param {?} numOffset\n * @return {?}\n */\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\n    if (obsOffset) {\n        return obsOffsets[obsOffset];\n    }\n    else if (militaryOffset) {\n        // the only allowed military tz is Z\n        return 0;\n    }\n    else {\n        const /** @type {?} */ hm = parseInt(numOffset, 10);\n        const /** @type {?} */ m = hm % 100;\n        const /** @type {?} */ h = (hm - m) / 100;\n        return h * 60 + m;\n    }\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromRFC2822(config) {\n    if (!isString(config._i)) {\n        return config;\n    }\n    const /** @type {?} */ match = rfc2822.exec(preprocessRFC2822(config._i));\n    if (!match) {\n        return markInvalid(config);\n    }\n    const /** @type {?} */ parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n    if (!checkWeekday(match[1], parsedArray, config)) {\n        return config;\n    }\n    config._a = parsedArray;\n    config._tzm = calculateOffset(match[8], match[9], match[10]);\n    config._d = createUTCDate.apply(null, config._a);\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    getParsingFlags(config).rfc2822 = true;\n    return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromString(config) {\n    if (!isString(config._i)) {\n        return config;\n    }\n    const /** @type {?} */ matched = aspNetJsonRegex.exec(config._i);\n    if (matched !== null) {\n        config._d = new Date(+matched[1]);\n        return config;\n    }\n    // todo: update logic processing\n    // isISO -> configFromISO\n    // isRFC -> configFromRFC\n    configFromISO(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n    }\n    else {\n        return config;\n    }\n    configFromRFC2822(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n    }\n    else {\n        return config;\n    }\n    // Final attempt, use Input Fallback\n    // hooks.createFromInputFallback(config);\n    return createInvalid(config);\n}\n// hooks.createFromInputFallback = deprecate(\n//     'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n//     'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n//     'discouraged and will be removed in an upcoming major release. Please refer to ' +\n//     'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n//     function (config) {\n//         config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n//     }\n// );\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?} format\n * @param {?=} locale\n * @param {?=} isUTC\n * @param {?=} offset\n * @return {?}\n */\nfunction formatDate(date, format, locale, isUTC, offset = 0) {\n    const /** @type {?} */ _locale = getLocale(locale || 'en');\n    if (!_locale) {\n        throw new Error(`Locale \"${locale}\" is not defined, please add it with \"defineLocale(...)\"`);\n    }\n    const /** @type {?} */ _format = format || (isUTC ? 'YYYY-MM-DDTHH:mm:ss[Z]' : 'YYYY-MM-DDTHH:mm:ssZ');\n    const /** @type {?} */ output = formatMoment(date, _format, _locale, isUTC, offset);\n    if (!output) {\n        return output;\n    }\n    return _locale.postformat(output);\n}\n/**\n * @param {?} date\n * @param {?} _format\n * @param {?} locale\n * @param {?=} isUTC\n * @param {?=} offset\n * @return {?}\n */\nfunction formatMoment(date, _format, locale, isUTC, offset = 0) {\n    if (!isDateValid(date)) {\n        return locale.invalidDate;\n    }\n    const /** @type {?} */ format = expandFormat(_format, locale);\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n    return formatFunctions[format](date, locale, isUTC, offset);\n}\n/**\n * @param {?} _format\n * @param {?} locale\n * @return {?}\n */\nfunction expandFormat(_format, locale) {\n    let /** @type {?} */ format = _format;\n    let /** @type {?} */ i = 5;\n    const /** @type {?} */ localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n    const /** @type {?} */ replaceLongDateFormatTokens = (input) => {\n        return locale.formatLongDate(input) || input;\n    };\n    localFormattingTokens.lastIndex = 0;\n    while (i >= 0 && localFormattingTokens.test(format)) {\n        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        localFormattingTokens.lastIndex = 0;\n        i -= 1;\n    }\n    return format;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n * @param {?=} a\n * @param {?=} b\n * @param {?=} c\n * @return {?}\n */\nfunction defaults(a, b, c) {\n    if (a != null) {\n        return a;\n    }\n    if (b != null) {\n        return b;\n    }\n    return c;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction currentDateArray(config) {\n    const /** @type {?} */ nowValue = new Date();\n    if (config._useUTC) {\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n    }\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromArray(config) {\n    const /** @type {?} */ input = [];\n    let /** @type {?} */ i;\n    let /** @type {?} */ date;\n    let /** @type {?} */ currentDate;\n    let /** @type {?} */ expectedWeekday;\n    let /** @type {?} */ yearToUse;\n    if (config._d) {\n        return config;\n    }\n    currentDate = currentDateArray(config);\n    // compute day of the year from weeks and weekdays\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n        dayOfYearFromWeekInfo(config);\n    }\n    // if the day of the year is set, figure out what it is\n    if (config._dayOfYear != null) {\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n            getParsingFlags(config)._overflowDayOfYear = true;\n        }\n        date = new Date(Date.UTC(yearToUse, 0, config._dayOfYear));\n        config._a[MONTH] = date.getUTCMonth();\n        config._a[DATE] = date.getUTCDate();\n    }\n    // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n        config._a[i] = input[i] = currentDate[i];\n    }\n    // Zero out whatever was not defaulted, including time\n    for (; i < 7; i++) {\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n    }\n    // Check for 24:00:00.000\n    if (config._a[HOUR] === 24 &&\n        config._a[MINUTE] === 0 &&\n        config._a[SECOND] === 0 &&\n        config._a[MILLISECOND] === 0) {\n        config._nextDay = true;\n        config._a[HOUR] = 0;\n    }\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n    // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n    if (config._tzm != null) {\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n    if (config._nextDay) {\n        config._a[HOUR] = 24;\n    }\n    // check for mismatching day of week\n    if (config._w && typeof config._w[\"d\"] !== 'undefined' && config._w[\"d\"] !== expectedWeekday) {\n        getParsingFlags(config).weekdayMismatch = true;\n    }\n    return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction dayOfYearFromWeekInfo(config) {\n    let /** @type {?} */ w, /** @type {?} */ weekYear, /** @type {?} */ week, /** @type {?} */ weekday, /** @type {?} */ dow, /** @type {?} */ doy, /** @type {?} */ temp, /** @type {?} */ weekdayOverflow;\n    w = config._w;\n    if (w.GG != null || w.W != null || w.E != null) {\n        dow = 1;\n        doy = 4;\n        // TODO: We need to take the current isoWeekYear, but that depends on\n        // how we interpret now (local, utc, fixed offset). So create\n        // a now version of current config (take local/utc/offset flags, and\n        // create now).\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(new Date(), 1, 4).year);\n        week = defaults(w.W, 1);\n        weekday = defaults(w.E, 1);\n        if (weekday < 1 || weekday > 7) {\n            weekdayOverflow = true;\n        }\n    }\n    else {\n        dow = config._locale._week.dow;\n        doy = config._locale._week.doy;\n        const /** @type {?} */ curWeek = weekOfYear(new Date(), dow, doy);\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n        // Default to current week.\n        week = defaults(w.w, curWeek.week);\n        if (w.d != null) {\n            // weekday -- low day numbers are considered next week\n            weekday = w.d;\n            if (weekday < 0 || weekday > 6) {\n                weekdayOverflow = true;\n            }\n        }\n        else if (w.e != null) {\n            // local weekday -- counting starts from begining of week\n            weekday = w.e + dow;\n            if (w.e < 0 || w.e > 6) {\n                weekdayOverflow = true;\n            }\n        }\n        else {\n            // default to begining of week\n            weekday = dow;\n        }\n    }\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n        getParsingFlags(config)._overflowWeeks = true;\n    }\n    else if (weekdayOverflow != null) {\n        getParsingFlags(config)._overflowWeekday = true;\n    }\n    else {\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n    return config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction checkOverflow(config) {\n    let /** @type {?} */ overflow;\n    const /** @type {?} */ a = config._a;\n    if (a && getParsingFlags(config).overflow === -2) {\n        // todo: fix this sh*t\n        overflow =\n            a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :\n                a[DATE] < 1 || a[DATE] > daysInMonth$1(a[YEAR], a[MONTH]) ? DATE :\n                    a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                        a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :\n                            a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :\n                                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                                    -1;\n        if (getParsingFlags(config)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n            overflow = DATE;\n        }\n        if (getParsingFlags(config)._overflowWeeks && overflow === -1) {\n            overflow = WEEK;\n        }\n        if (getParsingFlags(config)._overflowWeekday && overflow === -1) {\n            overflow = WEEKDAY;\n        }\n        getParsingFlags(config).overflow = overflow;\n    }\n    return config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// constant that refers to the ISO standard\n// hooks.ISO_8601 = function () {};\nconst /** @type {?} */ ISO_8601 = 'ISO_8601';\n// constant that refers to the RFC 2822 form\n// hooks.RFC_2822 = function () {};\nconst /** @type {?} */ RFC_2822 = 'RFC_2822';\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromStringAndFormat(config) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (config._f === ISO_8601) {\n        return configFromISO(config);\n    }\n    if (config._f === RFC_2822) {\n        return configFromRFC2822(config);\n    }\n    config._a = [];\n    getParsingFlags(config).empty = true;\n    if (isArray(config._f) || (!config._i && config._i !== 0)) {\n        return config;\n    }\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`\n    let /** @type {?} */ input = config._i.toString();\n    let /** @type {?} */ totalParsedInputLength = 0;\n    const /** @type {?} */ inputLength = input.length;\n    const /** @type {?} */ tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n    let /** @type {?} */ i;\n    let /** @type {?} */ token;\n    let /** @type {?} */ parsedInput;\n    let /** @type {?} */ skipped;\n    for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        parsedInput = (input.match(getParseRegexForToken(token, config._locale)) || [])[0];\n        if (parsedInput) {\n            skipped = input.substr(0, input.indexOf(parsedInput));\n            if (skipped.length > 0) {\n                getParsingFlags(config).unusedInput.push(skipped);\n            }\n            input = input.slice(input.indexOf(parsedInput) + parsedInput.length);\n            totalParsedInputLength += parsedInput.length;\n        }\n        // don't parse if it's not a known token\n        if (formatTokenFunctions[token]) {\n            if (parsedInput) {\n                getParsingFlags(config).empty = false;\n            }\n            else {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n            addTimeToArrayFromToken(token, parsedInput, config);\n        }\n        else if (config._strict && !parsedInput) {\n            getParsingFlags(config).unusedTokens.push(token);\n        }\n    }\n    // add remaining unparsed input length to the string\n    getParsingFlags(config).charsLeftOver = inputLength - totalParsedInputLength;\n    if (input.length > 0) {\n        getParsingFlags(config).unusedInput.push(input);\n    }\n    // clear _12h flag if hour is <= 12\n    if (config._a[HOUR] <= 12 &&\n        getParsingFlags(config).bigHour === true &&\n        config._a[HOUR] > 0) {\n        getParsingFlags(config).bigHour = void 0;\n    }\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);\n    getParsingFlags(config).meridiem = config._meridiem;\n    // handle meridiem\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n    configFromArray(config);\n    return checkOverflow(config);\n}\n/**\n * @param {?} locale\n * @param {?} _hour\n * @param {?} meridiem\n * @return {?}\n */\nfunction meridiemFixWrap(locale, _hour, meridiem) {\n    let /** @type {?} */ hour = _hour;\n    if (meridiem == null) {\n        // nothing to do\n        return hour;\n    }\n    if (locale.meridiemHour != null) {\n        return locale.meridiemHour(hour, meridiem);\n    }\n    if (locale.isPM == null) {\n        // this is not supposed to happen\n        return hour;\n    }\n    // Fallback\n    const /** @type {?} */ isPm = locale.isPM(meridiem);\n    if (isPm && hour < 12) {\n        hour += 12;\n    }\n    if (!isPm && hour === 12) {\n        hour = 0;\n    }\n    return hour;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromStringAndArray(config) {\n    let /** @type {?} */ tempConfig;\n    let /** @type {?} */ bestMoment;\n    let /** @type {?} */ scoreToBeat;\n    let /** @type {?} */ currentScore;\n    if (!config._f || config._f.length === 0) {\n        getParsingFlags(config).invalidFormat = true;\n        return createInvalid(config);\n    }\n    let /** @type {?} */ i;\n    for (i = 0; i < config._f.length; i++) {\n        currentScore = 0;\n        tempConfig = Object.assign({}, config);\n        if (config._useUTC != null) {\n            tempConfig._useUTC = config._useUTC;\n        }\n        tempConfig._f = config._f[i];\n        configFromStringAndFormat(tempConfig);\n        if (!isValid(tempConfig)) {\n            continue;\n        }\n        // if there is any input that was not parsed add a penalty for that format\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;\n        // or tokens\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n        getParsingFlags(tempConfig).score = currentScore;\n        if (scoreToBeat == null || currentScore < scoreToBeat) {\n            scoreToBeat = currentScore;\n            bestMoment = tempConfig;\n        }\n    }\n    return Object.assign(config, bestMoment || tempConfig);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromObject(config) {\n    if (config._d) {\n        return config;\n    }\n    const /** @type {?} */ input = config._i;\n    if (isObject(input)) {\n        const /** @type {?} */ i = normalizeObjectUnits(/** @type {?} */ (input));\n        config._a = [i.year, i.month, i.day, i.hours, i.minutes, i.seconds, i.milliseconds]\n            .map(obj => isString(obj) ? parseInt(obj, 10) : obj);\n    }\n    return configFromArray(config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createFromConfig(config) {\n    const /** @type {?} */ res = checkOverflow(prepareConfig(config));\n    // todo: remove, in moment.js it's never called cuz of moment constructor\n    res._d = new Date(res._d != null ? res._d.getTime() : NaN);\n    if (!isValid(Object.assign({}, res, { _isValid: null }))) {\n        res._d = new Date(NaN);\n    }\n    // todo: update offset\n    /*if (res._nextDay) {\n        // Adding is smart enough around DST\n        res._d = add(res._d, 1, 'day');\n        res._nextDay = undefined;\n      }*/\n    return res;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction prepareConfig(config) {\n    let /** @type {?} */ input = config._i;\n    const /** @type {?} */ format = config._f;\n    config._locale = config._locale || getLocale(config._l);\n    if (input === null || (format === undefined && input === '')) {\n        return createInvalid(config, { nullInput: true });\n    }\n    if (isString(input)) {\n        config._i = input = config._locale.preparse(input);\n    }\n    if (isDate(input)) {\n        config._d = cloneDate(input);\n        return config;\n    }\n    // todo: add check for recursion\n    if (isArray(format)) {\n        configFromStringAndArray(config);\n    }\n    else if (format) {\n        configFromStringAndFormat(config);\n    }\n    else {\n        configFromInput(config);\n    }\n    if (!isValid(config)) {\n        config._d = null;\n    }\n    return config;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction configFromInput(config) {\n    const /** @type {?} */ input = config._i;\n    if (isUndefined(input)) {\n        config._d = new Date();\n    }\n    else if (isDate(input)) {\n        config._d = cloneDate(input);\n    }\n    else if (isString(input)) {\n        configFromString(config);\n    }\n    else if (isArray(input) && input.length) {\n        const /** @type {?} */ _arr = input.slice(0);\n        config._a = _arr.map(obj => isString(obj) ? parseInt(obj, 10) : obj);\n        configFromArray(config);\n    }\n    else if (isObject(input)) {\n        configFromObject(config);\n    }\n    else if (isNumber(input)) {\n        // from milliseconds\n        config._d = new Date(input);\n    }\n    else {\n        //   hooks.createFromInputFallback(config);\n        return createInvalid(config);\n    }\n    return config;\n}\n/**\n * @param {?} input\n * @param {?=} format\n * @param {?=} localeKey\n * @param {?=} strict\n * @param {?=} isUTC\n * @return {?}\n */\nfunction createLocalOrUTC(input, format, localeKey, strict, isUTC) {\n    const /** @type {?} */ config = {};\n    let /** @type {?} */ _input = input;\n    // params switch -> skip; test it well\n    // if (localeKey === true || localeKey === false) {\n    //     strict = localeKey;\n    //     localeKey = undefined;\n    // }\n    // todo: fail fast and return not valid date\n    if ((isObject(_input) && isObjectEmpty(_input)) || (isArray(_input) && _input.length === 0)) {\n        _input = undefined;\n    }\n    // object construction must be done this way.\n    // https://github.com/moment/moment/issues/1423\n    // config._isAMomentObject = true;\n    config._useUTC = config._isUTC = isUTC;\n    config._l = localeKey;\n    config._i = _input;\n    config._f = format;\n    config._strict = strict;\n    return createFromConfig(config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} input\n * @param {?=} format\n * @param {?=} localeKey\n * @param {?=} strict\n * @param {?=} isUTC\n * @return {?}\n */\nfunction parseDate(input, format, localeKey, strict, isUTC) {\n    if (isDate(input)) {\n        return input;\n    }\n    const /** @type {?} */ config = createLocalOrUTC(input, format, localeKey, strict, isUTC);\n    return config._d;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} num\n * @return {?}\n */\nfunction absRound(num) {\n    return num < 0 ? Math.round(num * -1) * -1 : Math.round(num);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\nfunction isAfter(date1, date2, units = 'milliseconds') {\n    if (!date1 || !date2) {\n        return false;\n    }\n    if (units === 'milliseconds') {\n        return date1.valueOf() > date2.valueOf();\n    }\n    return date2.valueOf() < startOf(date1, units).valueOf();\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\nfunction isBefore(date1, date2, units = 'milliseconds') {\n    if (!date1 || !date2) {\n        return false;\n    }\n    if (units === 'milliseconds') {\n        return date1.valueOf() < date2.valueOf();\n    }\n    return endOf(date1, units).valueOf() < date2.valueOf();\n}\n/**\n * @param {?} date\n * @param {?} daysDisabled\n * @return {?}\n */\nfunction isDisabledDay(date, daysDisabled) {\n    if (daysDisabled === undefined || !daysDisabled || !daysDisabled.length) {\n        return false;\n    }\n    return daysDisabled.some((day) => day === date.getDay());\n}\n/**\n * @param {?} date1\n * @param {?} date2\n * @param {?=} units\n * @return {?}\n */\nfunction isSame(date1, date2, units = 'milliseconds') {\n    if (!date1 || !date2) {\n        return false;\n    }\n    if (units === 'milliseconds') {\n        return date1.valueOf() === date2.valueOf();\n    }\n    const /** @type {?} */ inputMs = date2.valueOf();\n    return (startOf(date1, units).valueOf() <= inputMs &&\n        inputMs <= endOf(date1, units).valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\n// tslint:disable-next-line\nconst /** @type {?} */ isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * @param {?=} input\n * @param {?=} key\n * @param {?=} config\n * @return {?}\n */\nfunction createDuration(input, key, config = {}) {\n    const /** @type {?} */ duration = convertDuration(input, key);\n    // matching against regexp is expensive, do it on demand\n    return new Duration(duration, config);\n}\n/**\n * @param {?} input\n * @param {?} key\n * @return {?}\n */\nfunction convertDuration(input, key) {\n    // checks for null or undefined\n    if (input == null) {\n        return {};\n    }\n    if (isDuration(input)) {\n        return {\n            milliseconds: input._milliseconds,\n            day: input._days,\n            month: input._months\n        };\n    }\n    if (isNumber(input)) {\n        // duration = {};\n        return key ? { [key]: input } : { milliseconds: input };\n    }\n    if (isString(input)) {\n        let /** @type {?} */ match = aspNetRegex.exec(input);\n        if (match) {\n            const /** @type {?} */ sign = (match[1] === '-') ? -1 : 1;\n            return {\n                year: 0,\n                day: toInt(match[DATE]) * sign,\n                hours: toInt(match[HOUR]) * sign,\n                minutes: toInt(match[MINUTE]) * sign,\n                seconds: toInt(match[SECOND]) * sign,\n                // the millisecond decimal point is included in the match\n                milliseconds: toInt(absRound(toInt(match[MILLISECOND]) * 1000)) * sign\n            };\n        }\n        match = isoRegex.exec(input);\n        if (match) {\n            const /** @type {?} */ sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            return {\n                year: parseIso(match[2], sign),\n                month: parseIso(match[3], sign),\n                week: parseIso(match[4], sign),\n                day: parseIso(match[5], sign),\n                hours: parseIso(match[6], sign),\n                minutes: parseIso(match[7], sign),\n                seconds: parseIso(match[8], sign)\n            };\n        }\n    }\n    if (isObject(input) && ('from' in input || 'to' in input)) {\n        const /** @type {?} */ diffRes = momentsDifference(parseDate(input.from), parseDate(input.to));\n        return {\n            milliseconds: diffRes.milliseconds,\n            month: diffRes.months\n        };\n    }\n    return input;\n}\n/**\n * @param {?} inp\n * @param {?} sign\n * @return {?}\n */\nfunction parseIso(inp, sign) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    const /** @type {?} */ res = inp && parseFloat(inp.replace(',', '.'));\n    // apply sign while we're at it\n    return (isNaN(res) ? 0 : res) * sign;\n}\n/**\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nfunction positiveMomentsDifference(base, other) {\n    const /** @type {?} */ res = { milliseconds: 0, months: 0 };\n    res.months = getMonth(other) - getMonth(base) +\n        (getFullYear(other) - getFullYear(base)) * 12;\n    const /** @type {?} */ _basePlus = add(cloneDate(base), res.months, 'month');\n    if (isAfter(_basePlus, other)) {\n        --res.months;\n    }\n    res.milliseconds = +other - +(add(cloneDate(base), res.months, 'month'));\n    return res;\n}\n/**\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nfunction momentsDifference(base, other) {\n    if (!(isDateValid(base) && isDateValid(other))) {\n        return { milliseconds: 0, months: 0 };\n    }\n    let /** @type {?} */ res;\n    const /** @type {?} */ _other = cloneWithOffset(other, base, { _offset: base.getTimezoneOffset() });\n    if (isBefore(base, _other)) {\n        res = positiveMomentsDifference(base, _other);\n    }\n    else {\n        res = positiveMomentsDifference(_other, base);\n        res.milliseconds = -res.milliseconds;\n        res.months = -res.months;\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?} val\n * @param {?} period\n * @param {?=} isUTC\n * @return {?}\n */\nfunction add(date, val, period, isUTC) {\n    const /** @type {?} */ dur = createDuration(val, period);\n    return addSubtract(date, dur, 1, isUTC);\n}\n/**\n * @param {?} date\n * @param {?} val\n * @param {?} period\n * @param {?=} isUTC\n * @return {?}\n */\nfunction subtract(date, val, period, isUTC) {\n    const /** @type {?} */ dur = createDuration(val, period);\n    return addSubtract(date, dur, -1, isUTC);\n}\n/**\n * @param {?} date\n * @param {?} duration\n * @param {?} isAdding\n * @param {?=} isUTC\n * @return {?}\n */\nfunction addSubtract(date, duration, isAdding, isUTC) {\n    const /** @type {?} */ milliseconds = duration._milliseconds;\n    const /** @type {?} */ days = absRound(duration._days);\n    const /** @type {?} */ months = absRound(duration._months);\n    // todo: add timezones support\n    // const _updateOffset = updateOffset == null ? true : updateOffset;\n    if (months) {\n        setMonth(date, getMonth(date, isUTC) + months * isAdding, isUTC);\n    }\n    if (days) {\n        setDate(date, getDate(date, isUTC) + days * isAdding, isUTC);\n    }\n    if (milliseconds) {\n        setTime(date, getTime(date) + milliseconds * isAdding);\n    }\n    return cloneDate(date);\n    // todo: add timezones support\n    // if (_updateOffset) {\n    //   hooks.updateOffset(date, days || months);\n    // }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction initDayOfWeek() {\n    // FORMATTING\n    addFormatToken('d', null, 'do', function (date, opts) {\n        return getDay(date, opts.isUTC)\n            .toString(10);\n    });\n    addFormatToken('dd', null, null, function (date, opts) {\n        return opts.locale.weekdaysMin(date, opts.format, opts.isUTC);\n    });\n    addFormatToken('ddd', null, null, function (date, opts) {\n        return opts.locale.weekdaysShort(date, opts.format, opts.isUTC);\n    });\n    addFormatToken('dddd', null, null, function (date, opts) {\n        return opts.locale.weekdays(date, opts.format, opts.isUTC);\n    });\n    addFormatToken('e', null, null, function (date, opts) {\n        return getLocaleDayOfWeek(date, opts.locale, opts.isUTC)\n            .toString(10);\n        // return getDay(date, opts.isUTC).toString(10);\n    });\n    addFormatToken('E', null, null, function (date, opts) {\n        return getISODayOfWeek(date, opts.isUTC)\n            .toString(10);\n    });\n    // ALIASES\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n    // PARSING\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        const /** @type {?} */ weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week[\"d\"] = weekday;\n        }\n        else {\n            getParsingFlags(config).invalidWeekday = !!input;\n        }\n        return config;\n    });\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n        return config;\n    });\n}\n/**\n * @param {?} input\n * @param {?} locale\n * @return {?}\n */\nfunction parseWeekday(input, locale) {\n    if (!isString(input)) {\n        return input;\n    }\n    const /** @type {?} */ _num = parseInt(input, 10);\n    if (!isNaN(_num)) {\n        return _num;\n    }\n    const /** @type {?} */ _weekDay = locale.weekdaysParse(input);\n    if (isNumber(_weekDay)) {\n        return _weekDay;\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @param {?=} locale\n * @return {?}\n */\nfunction parseIsoWeekday(input, locale = getLocale()) {\n    if (isString(input)) {\n        return locale.weekdaysParse(input) % 7 || 7;\n    }\n    return isNumber(input) && isNaN(input) ? null : input;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\nfunction setDayOfWeek(date, input, locale = getLocale(), isUTC) {\n    const /** @type {?} */ day = getDay(date, isUTC);\n    const /** @type {?} */ _input = parseWeekday(input, locale);\n    return add(date, _input - day, 'day');\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getDayOfWeek(date, isUTC) {\n    return getDay(date, isUTC);\n}\n/**\n * ****************************************\n * @param {?} date\n * @param {?=} locale\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getLocaleDayOfWeek(date, locale = getLocale(), isUTC) {\n    return (getDay(date, isUTC) + 7 - locale.firstDayOfWeek()) % 7;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} opts\n * @return {?}\n */\nfunction setLocaleDayOfWeek(date, input, opts = {}) {\n    const /** @type {?} */ weekday = getLocaleDayOfWeek(date, opts.locale, opts.isUTC);\n    return add(date, input - weekday, 'day');\n}\n/**\n * @param {?} date\n * @param {?=} isUTC\n * @return {?}\n */\nfunction getISODayOfWeek(date, isUTC) {\n    return getDay(date, isUTC) || 7;\n}\n/**\n * @param {?} date\n * @param {?} input\n * @param {?=} opts\n * @return {?}\n */\nfunction setISODayOfWeek(date, input, opts = {}) {\n    // behaves the same as moment#day except\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n    // as a setter, sunday should belong to the previous week.\n    const /** @type {?} */ weekday = parseIsoWeekday(input, opts.locale);\n    return setDayOfWeek(date, getDayOfWeek(date) % 7 ? weekday : weekday - 7);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\nconst /** @type {?} */ symbolMap = {\n    1: '١',\n    2: '٢',\n    3: '٣',\n    4: '٤',\n    5: '٥',\n    6: '٦',\n    7: '٧',\n    8: '٨',\n    9: '٩',\n    0: '٠'\n};\nconst /** @type {?} */ numberMap = {\n    '١': '1',\n    '٢': '2',\n    '٣': '3',\n    '٤': '4',\n    '٥': '5',\n    '٦': '6',\n    '٧': '7',\n    '٨': '8',\n    '٩': '9',\n    '٠': '0'\n};\nconst /** @type {?} */ pluralForm = function (num) {\n    return num === 0 ? 0 : num === 1 ? 1 : num === 2 ? 2 : num % 100 >= 3 && num % 100 <= 10 ? 3 : num % 100 >= 11 ? 4 : 5;\n};\nconst /** @type {?} */ plurals = {\n    s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],\n    m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],\n    h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],\n    d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],\n    M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],\n    y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']\n};\nconst /** @type {?} */ pluralize = function (u) {\n    return function (num, withoutSuffix) {\n        const /** @type {?} */ f = pluralForm(num);\n        let /** @type {?} */ str = plurals[u][pluralForm(num)];\n        if (f === 2) {\n            str = str[withoutSuffix ? 0 : 1];\n        }\n        return (/** @type {?} */ (str)).replace(/%d/i, num.toString());\n    };\n};\nconst /** @type {?} */ months = [\n    'يناير',\n    'فبراير',\n    'مارس',\n    'أبريل',\n    'مايو',\n    'يونيو',\n    'يوليو',\n    'أغسطس',\n    'سبتمبر',\n    'أكتوبر',\n    'نوفمبر',\n    'ديسمبر'\n];\nconst /** @type {?} */ arLocale = {\n    abbr: 'ar',\n    months,\n    monthsShort: months,\n    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'D/\\u200FM/\\u200FYYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    meridiemParse: /ص|م/,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return 'م' === input;\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 12) {\n            return 'ص';\n        }\n        else {\n            return 'م';\n        }\n    },\n    calendar: {\n        sameDay: '[اليوم عند الساعة] LT',\n        nextDay: '[غدًا عند الساعة] LT',\n        nextWeek: 'dddd [عند الساعة] LT',\n        lastDay: '[أمس عند الساعة] LT',\n        lastWeek: 'dddd [عند الساعة] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'بعد %s',\n        past: 'منذ %s',\n        s: pluralize('s'),\n        ss: pluralize('s'),\n        m: pluralize('m'),\n        mm: pluralize('m'),\n        h: pluralize('h'),\n        hh: pluralize('h'),\n        d: pluralize('d'),\n        dd: pluralize('d'),\n        M: pluralize('M'),\n        MM: pluralize('M'),\n        y: pluralize('y'),\n        yy: pluralize('y')\n    },\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    preparse(str) {\n        return str.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {\n            return numberMap[match];\n        }).replace(/،/g, ',');\n    },\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    postformat(str) {\n        return str.replace(/\\d/g, function (match) {\n            return symbolMap[match];\n        }).replace(/,/g, '،');\n    },\n    week: {\n        dow: 6,\n        // Saturday is the first day of the week.\n        doy: 12 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Bulgarian [bg]\n//! author : Iskren Ivov Chernev : https://github.com/ichernev\n//! author : Kunal Marwaha : https://github.com/marwahaha\n//! author : Matt Grande : https://github.com/mattgrande\n//! author : Isaac Cambron : https://github.com/icambron\n//! author : Venelin Manchev : https://github.com/vmanchev\nconst /** @type {?} */ bgLocale = {\n    abbr: 'bg',\n    months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),\n    monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),\n    weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),\n    weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),\n    weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'D.MM.YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY H:mm',\n        LLLL: 'dddd, D MMMM YYYY H:mm'\n    },\n    calendar: {\n        sameDay: '[Днес в] LT',\n        nextDay: '[Утре в] LT',\n        nextWeek: 'dddd [в] LT',\n        lastDay: '[Вчера в] LT',\n        lastWeek: function (d) {\n            switch (d) {\n                case 0:\n                case 3:\n                case 6:\n                    return '[В изминалата] dddd [в] LT';\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                    return '[В изминалия] dddd [в] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'след %s',\n        past: 'преди %s',\n        s: 'няколко секунди',\n        ss: '%d секунди',\n        m: 'минута',\n        mm: '%d минути',\n        h: 'час',\n        hh: '%d часа',\n        d: 'ден',\n        dd: '%d дни',\n        M: 'месец',\n        MM: '%d месеца',\n        y: 'година',\n        yy: '%d години'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,\n    ordinal: function (_num) {\n        const /** @type {?} */ number = Number(_num);\n        let /** @type {?} */ lastDigit = number % 10, /** @type {?} */\n        last2Digits = number % 100;\n        if (number === 0) {\n            return number + '-ев';\n        }\n        else if (last2Digits === 0) {\n            return number + '-ен';\n        }\n        else if (last2Digits > 10 && last2Digits < 20) {\n            return number + '-ти';\n        }\n        else if (lastDigit === 1) {\n            return number + '-ви';\n        }\n        else if (lastDigit === 2) {\n            return number + '-ри';\n        }\n        else if (lastDigit === 7 || lastDigit === 8) {\n            return number + '-ми';\n        }\n        else {\n            return number + '-ти';\n        }\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 7 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Catalan [ca]\n//! author : Xavier Arbat : https://github.com/XavisaurusRex\nlet /** @type {?} */ monthsShortDot = 'gen._feb._mar._abr._mai._jun._jul._ago._set._oct._nov._des.'.split('_'), /** @type {?} */\nmonthsShort = 'ene_feb_mar_abr_mai_jun_jul_ago_set_oct_nov_des'.split('_');\nlet /** @type {?} */ monthsParse = [/^gen/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^oct/i, /^nov/i, /^des/i];\nlet /** @type {?} */ monthsRegex = /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre|gen\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|jun\\.?|jul\\.?|ago\\.?|set\\.?|oct\\.?|nov\\.?|des\\.?)/i;\nconst /** @type {?} */ caLocale = {\n    abbr: 'ca',\n    months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortDot;\n        }\n        if (/-MMM-/.test(format)) {\n            return monthsShort[getMonth(date, isUTC)];\n        }\n        return monthsShortDot[getMonth(date, isUTC)];\n    },\n    monthsRegex,\n    monthsShortRegex: monthsRegex,\n    monthsStrictRegex: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i,\n    monthsShortStrictRegex: /^(gen\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|jun\\.?|jul\\.?|ago\\.?|set\\.?|oct\\.?|nov\\.?|des\\.?)/i,\n    monthsParse,\n    longMonthsParse: monthsParse,\n    shortMonthsParse: monthsParse,\n    weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),\n    weekdaysShort: 'diu._dil._dim._dix._dij._div._dis.'.split('_'),\n    weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY H:mm',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n    },\n    calendar: {\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        sameDay(date) {\n            return '[avui a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextDay(date) {\n            return '[dema a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return 'dddd [a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastDay(date) {\n            return '[ahir a ' + ('la' + (getHours(date) !== 1) ? 'les' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return '[el] dddd [' + ('passada la ' + (getHours(date) !== 1) ? 'passades les' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'fa %s',\n        s: 'uns segons',\n        ss: '%d segons',\n        m: 'un minut',\n        mm: '%d minuts',\n        h: 'una hora',\n        hh: '%d hores',\n        d: 'un dia',\n        dd: '%d dies',\n        M: 'un mes',\n        MM: '%d mesos',\n        y: 'un any',\n        yy: '%d anys'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(er|on|er|rt|é)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        const /** @type {?} */ output = (num > 4) ? 'é' :\n            (num === 1 || num === 3) ? 'r' :\n                (num === 2) ? 'n' :\n                    (num === 4) ? 't' : 'é';\n        return num + output;\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\nconst /** @type {?} */ months$1 = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');\nconst /** @type {?} */ monthsShort$1 = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\nfunction plural(num) {\n    return (num > 1) && (num < 5) && (~~(num / 10) !== 1);\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate(num, withoutSuffix, key, isFuture) {\n    const /** @type {?} */ result = num + ' ';\n    switch (key) {\n        case 's':\n            // a few seconds / in a few seconds / a few seconds ago\n            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';\n        case 'ss':\n            // 9 seconds / in 9 seconds / 9 seconds ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'sekundy' : 'sekund');\n            }\n            else {\n                return result + 'sekundami';\n            }\n        // break;\n        case 'm':\n            // a minute / in a minute / a minute ago\n            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');\n        case 'mm':\n            // 9 minutes / in 9 minutes / 9 minutes ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'minuty' : 'minut');\n            }\n            else {\n                return result + 'minutami';\n            }\n        // break;\n        case 'h':\n            // an hour / in an hour / an hour ago\n            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');\n        case 'hh':\n            // 9 hours / in 9 hours / 9 hours ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'hodiny' : 'hodin');\n            }\n            else {\n                return result + 'hodinami';\n            }\n        // break;\n        case 'd':\n            // a day / in a day / a day ago\n            return (withoutSuffix || isFuture) ? 'den' : 'dnem';\n        case 'dd':\n            // 9 days / in 9 days / 9 days ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'dny' : 'dní');\n            }\n            else {\n                return result + 'dny';\n            }\n        // break;\n        case 'M':\n            // a month / in a month / a month ago\n            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';\n        case 'MM':\n            // 9 months / in 9 months / 9 months ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'měsíce' : 'měsíců');\n            }\n            else {\n                return result + 'měsíci';\n            }\n        // break;\n        case 'y':\n            // a year / in a year / a year ago\n            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';\n        case 'yy':\n            // 9 years / in 9 years / 9 years ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural(num) ? 'roky' : 'let');\n            }\n            else {\n                return result + 'lety';\n            }\n    }\n}\nconst /** @type {?} */ csLocale = {\n    abbr: 'cs',\n    months: months$1,\n    monthsShort: monthsShort$1,\n    monthsParse: (function (months, monthsShort) {\n        let /** @type {?} */ i, /** @type {?} */ _monthsParse = [];\n        for (i = 0; i < 12; i++) {\n            // use custom parser to solve problem with July (červenec)\n            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');\n        }\n        return _monthsParse;\n    }(months$1, monthsShort$1)),\n    shortMonthsParse: (function (monthsShort) {\n        let /** @type {?} */ i, /** @type {?} */ _shortMonthsParse = [];\n        for (i = 0; i < 12; i++) {\n            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');\n        }\n        return _shortMonthsParse;\n    }(monthsShort$1)),\n    longMonthsParse: (function (months) {\n        let /** @type {?} */ i, /** @type {?} */ _longMonthsParse = [];\n        for (i = 0; i < 12; i++) {\n            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');\n        }\n        return _longMonthsParse;\n    }(months$1)),\n    weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n    weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),\n    weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY H:mm',\n        LLLL: 'dddd D. MMMM YYYY H:mm',\n        l: 'D. M. YYYY'\n    },\n    calendar: {\n        sameDay: '[dnes v] LT',\n        nextDay: '[zítra v] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[v neděli v] LT';\n                case 1:\n                case 2:\n                    return '[v] dddd [v] LT';\n                case 3:\n                    return '[ve středu v] LT';\n                case 4:\n                    return '[ve čtvrtek v] LT';\n                case 5:\n                    return '[v pátek v] LT';\n                case 6:\n                    return '[v sobotu v] LT';\n            }\n        },\n        lastDay: '[včera v] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[minulou neděli v] LT';\n                case 1:\n                case 2:\n                    return '[minulé] dddd [v] LT';\n                case 3:\n                    return '[minulou středu v] LT';\n                case 4:\n                case 5:\n                    return '[minulý] dddd [v] LT';\n                case 6:\n                    return '[minulou sobotu v] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'za %s',\n        past: 'před %s',\n        s: translate,\n        ss: translate,\n        m: translate,\n        mm: translate,\n        h: translate,\n        hh: translate,\n        d: translate,\n        dd: translate,\n        M: translate,\n        MM: translate,\n        y: translate,\n        yy: translate\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format\n//! moment.js locale configuration\n//! locale : Danish (Denmark) [da]\n//! author : Per Hansen : https://github.com/perhp\nconst /** @type {?} */ daLocale = {\n    abbr: 'da',\n    months: 'Januar_Februar_Marts_April_Maj_Juni_Juli_August_September_Oktober_November_December'.split('_'),\n    monthsShort: 'Jan_Feb_Mar_Apr_Maj_Jun_Jul_Aug_Sep_Okt_Nov_Dec'.split('_'),\n    weekdays: 'Søndag_Mandag_Tirsdag_Onsdag_Torsdag_Fredag_Lørdag'.split('_'),\n    weekdaysShort: 'Søn_Man_Tir_Ons_Tor_Fre_Lør'.split('_'),\n    weekdaysMin: 'Sø_Ma_Ti_On_To_Fr_Lø'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY HH:mm',\n        LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'\n    },\n    calendar: {\n        sameDay: '[i dag kl.] LT',\n        nextDay: '[i morgen kl.] LT',\n        nextWeek: 'på dddd [kl.] LT',\n        lastDay: '[i går kl.] LT',\n        lastWeek: '[i] dddd[s kl.] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'om %s',\n        past: '%s siden',\n        s: 'få sekunder',\n        m: 'et minut',\n        mm: '%d minutter',\n        h: 'en time',\n        hh: '%d timer',\n        d: 'en dag',\n        dd: '%d dage',\n        M: 'en måned',\n        MM: '%d måneder',\n        y: 'et år',\n        yy: '%d år'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-key-quotes\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction processRelativeTime(num, withoutSuffix, key, isFuture) {\n    const /** @type {?} */ format = {\n        'm': ['eine Minute', 'einer Minute'],\n        'h': ['eine Stunde', 'einer Stunde'],\n        'd': ['ein Tag', 'einem Tag'],\n        'dd': [num + ' Tage', num + ' Tagen'],\n        'M': ['ein Monat', 'einem Monat'],\n        'MM': [num + ' Monate', num + ' Monaten'],\n        'y': ['ein Jahr', 'einem Jahr'],\n        'yy': [num + ' Jahre', num + ' Jahren']\n    };\n    return withoutSuffix ? format[key][0] : format[key][1];\n}\nconst /** @type {?} */ deLocale = {\n    abbr: 'de',\n    months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n    monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n    weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),\n    weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY HH:mm',\n        LLLL: 'dddd, D. MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[heute um] LT [Uhr]',\n        sameElse: 'L',\n        nextDay: '[morgen um] LT [Uhr]',\n        nextWeek: 'dddd [um] LT [Uhr]',\n        lastDay: '[gestern um] LT [Uhr]',\n        lastWeek: '[letzten] dddd [um] LT [Uhr]'\n    },\n    relativeTime: {\n        future: 'in %s',\n        past: 'vor %s',\n        s: 'ein paar Sekunden',\n        ss: '%d Sekunden',\n        m: processRelativeTime,\n        mm: '%d Minuten',\n        h: processRelativeTime,\n        hh: '%d Stunden',\n        d: processRelativeTime,\n        dd: processRelativeTime,\n        M: processRelativeTime,\n        MM: processRelativeTime,\n        y: processRelativeTime,\n        yy: processRelativeTime\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : English (United Kingdom) [en-gb]\n//! author : Chris Gedrim : https://github.com/chrisgedrim\nconst /** @type {?} */ enGbLocale = {\n    abbr: 'en-gb',\n    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n    weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        const /** @type {?} */ b = num % 10, /** @type {?} */\n        output = (~~(num % 100 / 10) === 1) ? 'th' :\n            (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                    (b === 3) ? 'rd' : 'th';\n        return num + output;\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish (Dominican Republic) [es-do]\nlet /** @type {?} */ monthsShortDot$1 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'), /** @type {?} */\nmonthsShort$2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nlet /** @type {?} */ monthsParse$1 = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];\nlet /** @type {?} */ monthsRegex$1 = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;\nconst /** @type {?} */ esDoLocale = {\n    abbr: 'es-do',\n    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortDot$1;\n        }\n        else if (/-MMM-/.test(format)) {\n            return monthsShort$2[getMonth(date, isUTC)];\n        }\n        else {\n            return monthsShortDot$1[getMonth(date, isUTC)];\n        }\n    },\n    monthsRegex: monthsRegex$1,\n    monthsShortRegex: monthsRegex$1,\n    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n    monthsShortStrictRegex: /^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,\n    monthsParse: monthsParse$1,\n    longMonthsParse: monthsParse$1,\n    shortMonthsParse: monthsParse$1,\n    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n    weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'h:mm A',\n        LTS: 'h:mm:ss A',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY h:mm A',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'\n    },\n    calendar: {\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        sameDay(date) {\n            return '[hoy a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextDay(date) {\n            return '[mañana a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return 'dddd [a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastDay(date) {\n            return '[ayer a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return '[el] dddd [pasado a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'hace %s',\n        s: 'unos segundos',\n        ss: '%d segundos',\n        m: 'un minuto',\n        mm: '%d minutos',\n        h: 'una hora',\n        hh: '%d horas',\n        d: 'un día',\n        dd: '%d días',\n        M: 'un mes',\n        MM: '%d meses',\n        y: 'un año',\n        yy: '%d años'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish [es]\n//! author : Julio Napurí : https://github.com/julionc\nlet /** @type {?} */ monthsShortDot$2 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'), /** @type {?} */\nmonthsShort$3 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nlet /** @type {?} */ monthsParse$2 = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];\nlet /** @type {?} */ monthsRegex$2 = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i;\nconst /** @type {?} */ esLocale = {\n    abbr: 'es',\n    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortDot$2;\n        }\n        if (/-MMM-/.test(format)) {\n            return monthsShort$3[getMonth(date, isUTC)];\n        }\n        return monthsShortDot$2[getMonth(date, isUTC)];\n    },\n    monthsRegex: monthsRegex$2,\n    monthsShortRegex: monthsRegex$2,\n    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n    monthsShortStrictRegex: /^(ene\\.?|feb\\.?|mar\\.?|abr\\.?|may\\.?|jun\\.?|jul\\.?|ago\\.?|sep\\.?|oct\\.?|nov\\.?|dic\\.?)/i,\n    monthsParse: monthsParse$2,\n    longMonthsParse: monthsParse$2,\n    shortMonthsParse: monthsParse$2,\n    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n    weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY H:mm',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n    },\n    calendar: {\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        sameDay(date) {\n            return '[hoy a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextDay(date) {\n            return '[mañana a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return 'dddd [a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastDay(date) {\n            return '[ayer a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return '[el] dddd [pasado a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'hace %s',\n        s: 'unos segundos',\n        ss: '%d segundos',\n        m: 'un minuto',\n        mm: '%d minutos',\n        h: 'una hora',\n        hh: '%d horas',\n        d: 'un día',\n        dd: '%d días',\n        M: 'un mes',\n        MM: '%d meses',\n        y: 'un año',\n        yy: '%d años'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Spanish (United States) [es-us]\n//! author : bustta : https://github.com/bustta\nlet /** @type {?} */ monthsShortDot$3 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');\nlet /** @type {?} */ monthsShort$4 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\nconst /** @type {?} */ esUsLocale = {\n    abbr: 'es-us',\n    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortDot$3;\n        }\n        else if (/-MMM-/.test(format)) {\n            return monthsShort$4[getMonth(date, isUTC)];\n        }\n        else {\n            return monthsShortDot$3[getMonth(date, isUTC)];\n        }\n    },\n    monthsParseExact: true,\n    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n    weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'h:mm A',\n        LTS: 'h:mm:ss A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM [de] D [de] YYYY',\n        LLL: 'MMMM [de] D [de] YYYY h:mm A',\n        LLLL: 'dddd, MMMM [de] D [de] YYYY h:mm A'\n    },\n    calendar: {\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        sameDay(date) {\n            return '[hoy a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextDay(date) {\n            return '[mañana a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return 'dddd [a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastDay(date) {\n            return '[ayer a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return '[el] dddd [pasado a la' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'hace %s',\n        s: 'unos segundos',\n        ss: '%d segundos',\n        m: 'un minuto',\n        mm: '%d minutos',\n        h: 'una hora',\n        hh: '%d horas',\n        d: 'un día',\n        dd: '%d días',\n        M: 'un mes',\n        MM: '%d meses',\n        y: 'un año',\n        yy: '%d años'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 0,\n        // Sunday is the first day of the week.\n        doy: 6 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n// https://github.com/moment/moment/blob/develop/locale/fi.js\nvar /** @type {?} */ numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '), /** @type {?} */\nnumbersFuture = [\n    'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',\n    numbersPast[7], numbersPast[8], numbersPast[9]\n];\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate$1(num, withoutSuffix, key, isFuture) {\n    var /** @type {?} */ result = '';\n    switch (key) {\n        case 's':\n            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';\n        case 'ss':\n            return isFuture ? 'sekunnin' : 'sekuntia';\n        case 'm':\n            return isFuture ? 'minuutin' : 'minuutti';\n        case 'mm':\n            result = isFuture ? 'minuutin' : 'minuuttia';\n            break;\n        case 'h':\n            return isFuture ? 'tunnin' : 'tunti';\n        case 'hh':\n            result = isFuture ? 'tunnin' : 'tuntia';\n            break;\n        case 'd':\n            return isFuture ? 'päivän' : 'päivä';\n        case 'dd':\n            result = isFuture ? 'päivän' : 'päivää';\n            break;\n        case 'M':\n            return isFuture ? 'kuukauden' : 'kuukausi';\n        case 'MM':\n            result = isFuture ? 'kuukauden' : 'kuukautta';\n            break;\n        case 'y':\n            return isFuture ? 'vuoden' : 'vuosi';\n        case 'yy':\n            result = isFuture ? 'vuoden' : 'vuotta';\n            break;\n    }\n    result = verbalNumber(num, isFuture) + ' ' + result;\n    return result;\n}\n/**\n * @param {?} num\n * @param {?} isFuture\n * @return {?}\n */\nfunction verbalNumber(num, isFuture) {\n    return num < 10 ? (isFuture ? numbersFuture[num] : numbersPast[num]) : num;\n}\nconst /** @type {?} */ fiLocale = {\n    abbr: 'fi',\n    months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),\n    monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),\n    weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),\n    weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),\n    weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),\n    longDateFormat: {\n        LT: 'HH.mm',\n        LTS: 'HH.mm.ss',\n        L: 'DD.MM.YYYY',\n        LL: 'Do MMMM[ta] YYYY',\n        LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',\n        LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',\n        l: 'D.M.YYYY',\n        ll: 'Do MMM YYYY',\n        lll: 'Do MMM YYYY, [klo] HH.mm',\n        llll: 'ddd, Do MMM YYYY, [klo] HH.mm'\n    },\n    calendar: {\n        sameDay: '[tänään] [klo] LT',\n        nextDay: '[huomenna] [klo] LT',\n        nextWeek: 'dddd [klo] LT',\n        lastDay: '[eilen] [klo] LT',\n        lastWeek: '[viime] dddd[na] [klo] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s päästä',\n        past: '%s sitten',\n        s: translate$1,\n        ss: translate$1,\n        m: translate$1,\n        mm: translate$1,\n        h: translate$1,\n        hh: translate$1,\n        d: translate$1,\n        dd: translate$1,\n        M: translate$1,\n        MM: translate$1,\n        y: translate$1,\n        yy: translate$1\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : French [fr]\n//! author : John Fischer : https://github.com/jfroffice\nconst /** @type {?} */ frLocale = {\n    abbr: 'fr',\n    months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n    monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n    weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[Aujourd’hui à] LT',\n        nextDay: '[Demain à] LT',\n        nextWeek: 'dddd [à] LT',\n        lastDay: '[Hier à] LT',\n        lastWeek: 'dddd [dernier à] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'dans %s',\n        past: 'il y a %s',\n        s: 'quelques secondes',\n        ss: '%d secondes',\n        m: 'une minute',\n        mm: '%d minutes',\n        h: 'une heure',\n        hh: '%d heures',\n        d: 'un jour',\n        dd: '%d jours',\n        M: 'un mois',\n        MM: '%d mois',\n        y: 'un an',\n        yy: '%d ans'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(er|)/,\n    /**\n     * @param {?} _num\n     * @param {?} period\n     * @return {?}\n     */\n    ordinal(_num, period) {\n        const /** @type {?} */ num = Number(_num);\n        switch (period) {\n            // TODO: Return 'e' when day of month > 1. Move this case inside\n            // block for masculine words below.\n            // See https://github.com/moment/moment/issues/3375\n            case 'D':\n                return num + (num === 1 ? 'er' : '');\n            // Words with masculine grammatical gender: mois, trimestre, jour\n            default:\n            case 'M':\n            case 'Q':\n            case 'DDD':\n            case 'd':\n                return num + (num === 1 ? 'er' : 'e');\n            // Words with feminine grammatical gender: semaine\n            case 'w':\n            case 'W':\n                return num + (num === 1 ? 're' : 'e');\n        }\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Galician [gl]\n//! author : Darío Beiró : https://github.com/quinobravo\nlet /** @type {?} */ monthsShortDot$4 = 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'), /** @type {?} */\nmonthsShort$5 = 'xan_feb_mar_abr_mai_xuñ_xul_ago_set_out_nov_dec'.split('_');\nlet /** @type {?} */ monthsParse$3 = [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xuñ/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i];\nlet /** @type {?} */ monthsRegex$3 = /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro|xan\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|xuñ\\.?|xul\\.?|ago\\.?|set\\.?|out\\.?|nov\\.?|dec\\.?)/i;\nconst /** @type {?} */ glLocale = {\n    abbr: 'gl',\n    months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortDot$4;\n        }\n        if (/-MMM-/.test(format)) {\n            return monthsShort$5[getMonth(date, isUTC)];\n        }\n        return monthsShortDot$4[getMonth(date, isUTC)];\n    },\n    monthsRegex: monthsRegex$3,\n    monthsShortRegex: monthsRegex$3,\n    monthsStrictRegex: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i,\n    monthsShortStrictRegex: /^(xan\\.?|feb\\.?|mar\\.?|abr\\.?|mai\\.?|xuñ\\.?|xul\\.?|ago\\.?|set\\.?|out\\.?|nov\\.?|dec\\.?)/i,\n    monthsParse: monthsParse$3,\n    longMonthsParse: monthsParse$3,\n    shortMonthsParse: monthsParse$3,\n    weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),\n    weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY H:mm',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n    },\n    calendar: {\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        sameDay(date) {\n            return '[hoxe á' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextDay(date) {\n            return '[mañan á' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return 'dddd [á' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastDay(date) {\n            return '[onte á' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return '[o] dddd [pasado á' + ((getHours(date) !== 1) ? 's' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'fai %s',\n        s: 'uns segundos',\n        ss: '%d segundos',\n        m: 'un minuto',\n        mm: '%d minutos',\n        h: 'unha hora',\n        hh: '%d horas',\n        d: 'un día',\n        dd: '%d días',\n        M: 'un mes',\n        MM: '%d meses',\n        y: 'un ano',\n        yy: '%d anos'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Hebrew [he]\n//! author : Tomer Cohen : https://github.com/tomer\n//! author : Moshe Simantov : https://github.com/DevelopmentIL\n//! author : Tal Ater : https://github.com/TalAter\nconst /** @type {?} */ heLocale = {\n    abbr: 'he',\n    months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),\n    monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),\n    weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),\n    weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),\n    weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [ב]MMMM YYYY',\n        LLL: 'D [ב]MMMM YYYY HH:mm',\n        LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',\n        l: 'D/M/YYYY',\n        ll: 'D MMM YYYY',\n        lll: 'D MMM YYYY HH:mm',\n        llll: 'ddd, D MMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[היום ב־]LT',\n        nextDay: '[מחר ב־]LT',\n        nextWeek: 'dddd [בשעה] LT',\n        lastDay: '[אתמול ב־]LT',\n        lastWeek: '[ביום] dddd [האחרון בשעה] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'בעוד %s',\n        past: 'לפני %s',\n        s: 'מספר שניות',\n        ss: '%d שניות',\n        m: 'דקה',\n        mm: '%d דקות',\n        h: 'שעה',\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        hh(num) {\n            if (num === 2) {\n                return 'שעתיים';\n            }\n            return num + ' שעות';\n        },\n        d: 'יום',\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        dd(num) {\n            if (num === 2) {\n                return 'יומיים';\n            }\n            return num + ' ימים';\n        },\n        M: 'חודש',\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        MM(num) {\n            if (num === 2) {\n                return 'חודשיים';\n            }\n            return num + ' חודשים';\n        },\n        y: 'שנה',\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        yy(num) {\n            if (num === 2) {\n                return 'שנתיים';\n            }\n            else if (num % 10 === 0 && num !== 10) {\n                return num + ' שנה';\n            }\n            return num + ' שנים';\n        }\n    },\n    meridiemParse: /אחה\"צ|לפנה\"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return /^(אחה\"צ|אחרי הצהריים|בערב)$/.test(input);\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 5) {\n            return 'לפנות בוקר';\n        }\n        else if (hour < 10) {\n            return 'בבוקר';\n        }\n        else if (hour < 12) {\n            return isLower ? 'לפנה\"צ' : 'לפני הצהריים';\n        }\n        else if (hour < 18) {\n            return isLower ? 'אחה\"צ' : 'אחרי הצהריים';\n        }\n        else {\n            return 'בערב';\n        }\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Hindi [hi]\n//! author : Mayank Singhal : https://github.com/mayanksinghal\nlet /** @type {?} */ symbolMap$1 = {\n    1: '१',\n    2: '२',\n    3: '३',\n    4: '४',\n    5: '५',\n    6: '६',\n    7: '७',\n    8: '८',\n    9: '९',\n    0: '०'\n}, /** @type {?} */\nnumberMap$1 = {\n    '१': '1',\n    '२': '2',\n    '३': '3',\n    '४': '4',\n    '५': '5',\n    '६': '6',\n    '७': '7',\n    '८': '8',\n    '९': '9',\n    '०': '0'\n};\nconst /** @type {?} */ hiLocale = {\n    abbr: 'hi',\n    months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),\n    monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),\n    weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),\n    weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),\n    longDateFormat: {\n        LT: 'A h:mm बजे',\n        LTS: 'A h:mm:ss बजे',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY, A h:mm बजे',\n        LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'\n    },\n    calendar: {\n        sameDay: '[आज] LT',\n        nextDay: '[कल] LT',\n        nextWeek: 'dddd, LT',\n        lastDay: '[कल] LT',\n        lastWeek: '[पिछले] dddd, LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s में',\n        past: '%s पहले',\n        s: 'कुछ ही क्षण',\n        ss: '%d सेकंड',\n        m: 'एक मिनट',\n        mm: '%d मिनट',\n        h: 'एक घंटा',\n        hh: '%d घंटे',\n        d: 'एक दिन',\n        dd: '%d दिन',\n        M: 'एक महीने',\n        MM: '%d महीने',\n        y: 'एक वर्ष',\n        yy: '%d वर्ष'\n    },\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    preparse(str) {\n        return str.replace(/[१२३४५६७८९०]/g, function (match) {\n            return numberMap$1[match];\n        });\n    },\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    postformat(str) {\n        return str.replace(/\\d/g, function (match) {\n            return symbolMap$1[match];\n        });\n    },\n    // Hindi notation for meridiems are quite fuzzy in practice. While there exists\n    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\n    meridiemParse: /रात|सुबह|दोपहर|शाम/,\n    /**\n     * @param {?} hour\n     * @param {?} meridiem\n     * @return {?}\n     */\n    meridiemHour(hour, meridiem) {\n        if (hour === 12) {\n            hour = 0;\n        }\n        if (meridiem === 'रात') {\n            return hour < 4 ? hour : hour + 12;\n        }\n        else if (meridiem === 'सुबह') {\n            return hour;\n        }\n        else if (meridiem === 'दोपहर') {\n            return hour >= 10 ? hour : hour + 12;\n        }\n        else if (meridiem === 'शाम') {\n            return hour + 12;\n        }\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 4) {\n            return 'रात';\n        }\n        else if (hour < 10) {\n            return 'सुबह';\n        }\n        else if (hour < 17) {\n            return 'दोपहर';\n        }\n        else if (hour < 20) {\n            return 'शाम';\n        }\n        else {\n            return 'रात';\n        }\n    },\n    week: {\n        dow: 0,\n        // Sunday is the first day of the week.\n        doy: 6 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Hungarian [hu]\n//! author : Adam Brunner : https://github.com/adambrunner\nlet /** @type {?} */ weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate$2(num, withoutSuffix, key, isFuture) {\n    switch (key) {\n        case 's':\n            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';\n        case 'ss':\n            return num + ((isFuture || withoutSuffix) ? ' másodperc' : ' másodperce');\n        case 'm':\n            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');\n        case 'mm':\n            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');\n        case 'h':\n            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');\n        case 'hh':\n            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');\n        case 'd':\n            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');\n        case 'dd':\n            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');\n        case 'M':\n            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n        case 'MM':\n            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n        case 'y':\n            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');\n        case 'yy':\n            return num + (isFuture || withoutSuffix ? ' év' : ' éve');\n    }\n    return '';\n}\n/**\n * @param {?} date\n * @param {?} isFuture\n * @return {?}\n */\nfunction week(date, isFuture) {\n    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[getDayOfWeek(date)] + '] LT[-kor]';\n}\nconst /** @type {?} */ huLocale = {\n    abbr: 'hu',\n    months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),\n    monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),\n    weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),\n    weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),\n    weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'YYYY.MM.DD.',\n        LL: 'YYYY. MMMM D.',\n        LLL: 'YYYY. MMMM D. H:mm',\n        LLLL: 'YYYY. MMMM D., dddd H:mm'\n    },\n    meridiemParse: /de|du/i,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return input.charAt(1).toLowerCase() === 'u';\n    },\n    /**\n     * @param {?} hours\n     * @param {?} minutes\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hours, minutes, isLower) {\n        if (hours < 12) {\n            return isLower === true ? 'de' : 'DE';\n        }\n        else {\n            return isLower === true ? 'du' : 'DU';\n        }\n    },\n    calendar: {\n        sameDay: '[ma] LT[-kor]',\n        nextDay: '[holnap] LT[-kor]',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            return week(date, true);\n        },\n        lastDay: '[tegnap] LT[-kor]',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return week(date, false);\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s múlva',\n        past: '%s',\n        s: translate$2,\n        ss: translate$2,\n        m: translate$2,\n        mm: translate$2,\n        h: translate$2,\n        hh: translate$2,\n        d: translate$2,\n        dd: translate$2,\n        M: translate$2,\n        MM: translate$2,\n        y: translate$2,\n        yy: translate$2\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Indonesia [id]\n//! author : Romy Kusuma : https://github.com/rkusuma\n//! reference: https://github.com/moment/moment/blob/develop/locale/id.js\nconst /** @type {?} */ idLocale = {\n    abbr: 'id',\n    months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),\n    monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),\n    weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),\n    weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),\n    weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),\n    longDateFormat: {\n        LT: 'HH.mm',\n        LTS: 'HH.mm.ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY [pukul] HH.mm',\n        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n    },\n    meridiemParse: /pagi|siang|sore|malam/,\n    /**\n     * @param {?} hour\n     * @param {?} meridiem\n     * @return {?}\n     */\n    meridiemHour(hour, meridiem) {\n        if (hour === 12) {\n            hour = 0;\n        }\n        if (meridiem === 'pagi') {\n            return hour;\n        }\n        else if (meridiem === 'siang') {\n            return hour >= 11 ? hour : hour + 12;\n        }\n        else if (meridiem === 'sore' || meridiem === 'malam') {\n            return hour + 12;\n        }\n    },\n    /**\n     * @param {?} hours\n     * @param {?} minutes\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hours, minutes, isLower) {\n        if (hours < 11) {\n            return 'pagi';\n        }\n        else if (hours < 15) {\n            return 'siang';\n        }\n        else if (hours < 19) {\n            return 'sore';\n        }\n        else {\n            return 'malam';\n        }\n    },\n    calendar: {\n        sameDay: '[Hari ini pukul] LT',\n        nextDay: '[Besok pukul] LT',\n        nextWeek: 'dddd [pukul] LT',\n        lastDay: '[Kemarin pukul] LT',\n        lastWeek: 'dddd [lalu pukul] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'dalam %s',\n        past: '%s yang lalu',\n        s: 'beberapa detik',\n        ss: '%d detik',\n        m: 'semenit',\n        mm: '%d menit',\n        h: 'sejam',\n        hh: '%d jam',\n        d: 'sehari',\n        dd: '%d hari',\n        M: 'sebulan',\n        MM: '%d bulan',\n        y: 'setahun',\n        yy: '%d tahun'\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 7 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Italian [it]\n//! author : Lorenzo : https://github.com/aliem\n//! author: Mattia Larentis: https://github.com/nostalgiaz\nconst /** @type {?} */ itLocale = {\n    abbr: 'it',\n    months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),\n    monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),\n    weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),\n    weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),\n    weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[Oggi alle] LT',\n        nextDay: '[Domani alle] LT',\n        nextWeek: 'dddd [alle] LT',\n        lastDay: '[Ieri alle] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[la scorsa] dddd [alle] LT';\n                default:\n                    return '[lo scorso] dddd [alle] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        /**\n         * @param {?} num\n         * @return {?}\n         */\n        future(num) {\n            return ((/^[0-9].+$/).test(num.toString(10)) ? 'tra' : 'in') + ' ' + num;\n        },\n        past: '%s fa',\n        s: 'alcuni secondi',\n        ss: '%d secondi',\n        m: 'un minuto',\n        mm: '%d minuti',\n        h: 'un\\'ora',\n        hh: '%d ore',\n        d: 'un giorno',\n        dd: '%d giorni',\n        M: 'un mese',\n        MM: '%d mesi',\n        y: 'un anno',\n        yy: '%d anni'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Japanese [ja]\n//! author : LI Long : https://github.com/baryon\nconst /** @type {?} */ jaLocale = {\n    abbr: 'ja',\n    months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),\n    weekdaysShort: '日_月_火_水_木_金_土'.split('_'),\n    weekdaysMin: '日_月_火_水_木_金_土'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY/MM/DD',\n        LL: 'YYYY年M月D日',\n        LLL: 'YYYY年M月D日 HH:mm',\n        LLLL: 'YYYY年M月D日 HH:mm dddd',\n        l: 'YYYY/MM/DD',\n        ll: 'YYYY年M月D日',\n        lll: 'YYYY年M月D日 HH:mm',\n        llll: 'YYYY年M月D日 HH:mm dddd'\n    },\n    meridiemParse: /午前|午後/i,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return input === '午後';\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 12) {\n            return '午前';\n        }\n        else {\n            return '午後';\n        }\n    },\n    calendar: {\n        sameDay: '[今日] LT',\n        nextDay: '[明日] LT',\n        nextWeek: '[来週]dddd LT',\n        lastDay: '[昨日] LT',\n        lastWeek: '[前週]dddd LT',\n        sameElse: 'L'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}日/,\n    /**\n     * @param {?} num\n     * @param {?} period\n     * @return {?}\n     */\n    ordinal(num, period) {\n        switch (period) {\n            case 'd':\n            case 'D':\n            case 'DDD':\n                return num + '日';\n            default:\n                return num.toString(10);\n        }\n    },\n    relativeTime: {\n        future: '%s後',\n        past: '%s前',\n        s: '数秒',\n        ss: '%d秒',\n        m: '1分',\n        mm: '%d分',\n        h: '1時間',\n        hh: '%d時間',\n        d: '1日',\n        dd: '%d日',\n        M: '1ヶ月',\n        MM: '%dヶ月',\n        y: '1年',\n        yy: '%d年'\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-shorthand\n//! moment.js locale configuration\n//! locale : Korean [ko]\n//! author : Kyungwook, Park : https://github.com/kyungw00k\n//! author : Jeeeyul Lee <jeeeyul@gmail.com>\nconst /** @type {?} */ koLocale = {\n    abbr: 'ko',\n    months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n    monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n    weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),\n    weekdaysShort: '일_월_화_수_목_금_토'.split('_'),\n    weekdaysMin: '일_월_화_수_목_금_토'.split('_'),\n    longDateFormat: {\n        LT: 'A h:mm',\n        LTS: 'A h:mm:ss',\n        L: 'YYYY.MM.DD',\n        LL: 'YYYY년 MMMM D일',\n        LLL: 'YYYY년 MMMM D일 A h:mm',\n        LLLL: 'YYYY년 MMMM D일 dddd A h:mm',\n        l: 'YYYY.MM.DD',\n        ll: 'YYYY년 MMMM D일',\n        lll: 'YYYY년 MMMM D일 A h:mm',\n        llll: 'YYYY년 MMMM D일 dddd A h:mm'\n    },\n    calendar: {\n        sameDay: '오늘 LT',\n        nextDay: '내일 LT',\n        nextWeek: 'dddd LT',\n        lastDay: '어제 LT',\n        lastWeek: '지난주 dddd LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s 후',\n        past: '%s 전',\n        s: '몇 초',\n        ss: '%d초',\n        m: '1분',\n        mm: '%d분',\n        h: '한 시간',\n        hh: '%d시간',\n        d: '하루',\n        dd: '%d일',\n        M: '한 달',\n        MM: '%d달',\n        y: '일 년',\n        yy: '%d년'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(일|월|주)/,\n    ordinal: function (num, period) {\n        switch (period) {\n            case 'd':\n            case 'D':\n            case 'DDD':\n                return num + '일';\n            case 'M':\n                return num + '월';\n            case 'w':\n            case 'W':\n                return num + '주';\n            default:\n                return num.toString(10);\n        }\n    },\n    meridiemParse: /오전|오후/,\n    isPM: function (token) {\n        return token === '오후';\n    },\n    meridiem: function (hour, minute, isUpper) {\n        return hour < 12 ? '오전' : '오후';\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Lithuanian [lt]\n//! author : Stanislavas Guk : https://github.com/ixoster\nconst /** @type {?} */ units = {\n    ss: 'sekundė_sekundžių_sekundes',\n    m: 'minutė_minutės_minutę',\n    mm: 'minutės_minučių_minutes',\n    h: 'valanda_valandos_valandą',\n    hh: 'valandos_valandų_valandas',\n    d: 'diena_dienos_dieną',\n    dd: 'dienos_dienų_dienas',\n    M: 'mėnuo_mėnesio_mėnesį',\n    MM: 'mėnesiai_mėnesių_mėnesius',\n    y: 'metai_metų_metus',\n    yy: 'metai_metų_metus'\n};\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translateSeconds(num, withoutSuffix, key, isFuture) {\n    if (withoutSuffix) {\n        return 'kelios sekundės';\n    }\n    else {\n        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';\n    }\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translateSingular(num, withoutSuffix, key, isFuture) {\n    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);\n}\n/**\n * @param {?} num\n * @return {?}\n */\nfunction special(num) {\n    return num % 10 === 0 || (num > 10 && num < 20);\n}\n/**\n * @param {?} key\n * @return {?}\n */\nfunction forms(key) {\n    return units[key].split('_');\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate$3(num, withoutSuffix, key, isFuture) {\n    let /** @type {?} */ result = num + ' ';\n    if (num === 1) {\n        return result + translateSingular(num, withoutSuffix, key[0], isFuture);\n    }\n    else if (withoutSuffix) {\n        return result + (special(num) ? forms(key)[1] : forms(key)[0]);\n    }\n    else {\n        if (isFuture) {\n            return result + forms(key)[1];\n        }\n        else {\n            return result + (special(num) ? forms(key)[1] : forms(key)[2]);\n        }\n    }\n}\nconst /** @type {?} */ ltLocale = {\n    abbr: 'lt',\n    months: {\n        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),\n        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),\n        isFormat: /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s)+D[oD]?/\n    },\n    monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),\n    weekdays: {\n        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),\n        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),\n        isFormat: /dddd HH:mm/\n    },\n    weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),\n    weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY-MM-DD',\n        LL: 'YYYY [m.] MMMM D [d.]',\n        LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n        LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',\n        l: 'YYYY-MM-DD',\n        ll: 'YYYY [m.] MMMM D [d.]',\n        lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n        llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'\n    },\n    calendar: {\n        sameDay: '[Šiandien] LT',\n        nextDay: '[Rytoj] LT',\n        nextWeek: 'dddd LT',\n        lastDay: '[Vakar] LT',\n        lastWeek: '[Praėjusį] dddd LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'po %s',\n        past: 'prieš %s',\n        s: translateSeconds,\n        ss: translate$3,\n        m: translateSingular,\n        mm: translate$3,\n        h: translateSingular,\n        hh: translate$3,\n        d: translateSingular,\n        dd: translate$3,\n        M: translateSingular,\n        MM: translate$3,\n        y: translateSingular,\n        yy: translate$3\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}-oji/,\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    ordinal(num) {\n        return num + '-oji';\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:object-literal-shorthand\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate$4(num, withoutSuffix, key, isFuture) {\n    switch (key) {\n        case 's':\n            return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';\n        case 'ss':\n            return num + (withoutSuffix ? ' секунд' : ' секундын');\n        case 'm':\n        case 'mm':\n            return num + (withoutSuffix ? ' минут' : ' минутын');\n        case 'h':\n        case 'hh':\n            return num + (withoutSuffix ? ' цаг' : ' цагийн');\n        case 'd':\n        case 'dd':\n            return num + (withoutSuffix ? ' өдөр' : ' өдрийн');\n        case 'M':\n        case 'MM':\n            return num + (withoutSuffix ? ' сар' : ' сарын');\n        case 'y':\n        case 'yy':\n            return num + (withoutSuffix ? ' жил' : ' жилийн');\n        default:\n            return num.toString(10);\n    }\n}\nconst /** @type {?} */ mnLocale = {\n    abbr: 'mn',\n    months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),\n    monthsShort: '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),\n    weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),\n    weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY-MM-DD',\n        LL: 'YYYY оны MMMMын D',\n        LLL: 'YYYY оны MMMMын D HH:mm',\n        LLLL: 'dddd, YYYY оны MMMMын D HH:mm'\n    },\n    meridiemParse: /ҮӨ|ҮХ/i,\n    isPM: function (input) {\n        return input === 'ҮХ';\n    },\n    meridiem: function (hour, minute, isLower) {\n        if (hour < 12) {\n            return 'ҮӨ';\n        }\n        else {\n            return 'ҮХ';\n        }\n    },\n    calendar: {\n        sameDay: '[Өнөөдөр] LT',\n        nextDay: '[Маргааш] LT',\n        nextWeek: '[Ирэх] dddd LT',\n        lastDay: '[Өчигдөр] LT',\n        lastWeek: '[Өнгөрсөн] dddd LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s дараа',\n        past: '%s өмнө',\n        s: translate$4,\n        ss: translate$4,\n        m: translate$4,\n        mm: translate$4,\n        h: translate$4,\n        hh: translate$4,\n        d: translate$4,\n        dd: translate$4,\n        M: translate$4,\n        MM: translate$4,\n        y: translate$4,\n        yy: translate$4\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2} өдөр/,\n    ordinal: function (num, period) {\n        switch (period) {\n            case 'd':\n            case 'D':\n            case 'DDD':\n                return num + ' өдөр';\n            default:\n                return num.toString(10);\n        }\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Norwegian Bokmål [nb]\n//! authors : Espen Hovlandsdal : https://github.com/rexxars\n//!           Sigurd Gartmann : https://github.com/sigurdga\nconst /** @type {?} */ nbLocale = {\n    abbr: 'nb',\n    months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n    monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),\n    weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),\n    weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY [kl.] HH:mm',\n        LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'\n    },\n    calendar: {\n        sameDay: '[i dag kl.] LT',\n        nextDay: '[i morgen kl.] LT',\n        nextWeek: 'dddd [kl.] LT',\n        lastDay: '[i går kl.] LT',\n        lastWeek: '[forrige] dddd [kl.] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'om %s',\n        past: '%s siden',\n        s: 'noen sekunder',\n        ss: '%d sekunder',\n        m: 'ett minutt',\n        mm: '%d minutter',\n        h: 'en time',\n        hh: '%d timer',\n        d: 'en dag',\n        dd: '%d dager',\n        M: 'en måned',\n        MM: '%d måneder',\n        y: 'ett år',\n        yy: '%d år'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Dutch (Belgium) [nl-be]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\nlet /** @type {?} */ monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');\nlet /** @type {?} */ monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\nlet /** @type {?} */ monthsParse$4 = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\nlet /** @type {?} */ monthsRegex$4 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\nconst /** @type {?} */ nlBeLocale = {\n    abbr: 'nl-be',\n    months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortWithDots;\n        }\n        else if (/-MMM-/.test(format)) {\n            return monthsShortWithoutDots[getMonth(date, isUTC)];\n        }\n        else {\n            return monthsShortWithDots[getMonth(date, isUTC)];\n        }\n    },\n    monthsRegex: monthsRegex$4,\n    monthsShortRegex: monthsRegex$4,\n    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n    monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n    monthsParse: monthsParse$4,\n    longMonthsParse: monthsParse$4,\n    shortMonthsParse: monthsParse$4,\n    weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n    weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n    weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[vandaag om] LT',\n        nextDay: '[morgen om] LT',\n        nextWeek: 'dddd [om] LT',\n        lastDay: '[gisteren om] LT',\n        lastWeek: '[afgelopen] dddd [om] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'over %s',\n        past: '%s geleden',\n        s: 'een paar seconden',\n        ss: '%d seconden',\n        m: 'één minuut',\n        mm: '%d minuten',\n        h: 'één uur',\n        hh: '%d uur',\n        d: 'één dag',\n        dd: '%d dagen',\n        M: 'één maand',\n        MM: '%d maanden',\n        y: 'één jaar',\n        yy: '%d jaar'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        return num + ((num === 1 || num === 8 || num >= 20) ? 'ste' : 'de');\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Dutch [nl]\n//! author : Joris Röling : https://github.com/jorisroling\n//! author : Jacob Middag : https://github.com/middagj\nlet /** @type {?} */ monthsShortWithDots$1 = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'), /** @type {?} */\nmonthsShortWithoutDots$1 = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\nlet /** @type {?} */ monthsParse$5 = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\nlet /** @type {?} */ monthsRegex$5 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\nconst /** @type {?} */ nlLocale = {\n    abbr: 'nl',\n    months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    monthsShort(date, format, isUTC) {\n        if (!date) {\n            return monthsShortWithDots$1;\n        }\n        else if (/-MMM-/.test(format)) {\n            return monthsShortWithoutDots$1[getMonth(date, isUTC)];\n        }\n        else {\n            return monthsShortWithDots$1[getMonth(date, isUTC)];\n        }\n    },\n    monthsRegex: monthsRegex$5,\n    monthsShortRegex: monthsRegex$5,\n    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n    monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n    monthsParse: monthsParse$5,\n    longMonthsParse: monthsParse$5,\n    shortMonthsParse: monthsParse$5,\n    weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n    weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n    weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD-MM-YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[vandaag om] LT',\n        nextDay: '[morgen om] LT',\n        nextWeek: 'dddd [om] LT',\n        lastDay: '[gisteren om] LT',\n        lastWeek: '[afgelopen] dddd [om] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'over %s',\n        past: '%s geleden',\n        s: 'een paar seconden',\n        ss: '%d seconden',\n        m: 'één minuut',\n        mm: '%d minuten',\n        h: 'één uur',\n        hh: '%d uur',\n        d: 'één dag',\n        dd: '%d dagen',\n        M: 'één maand',\n        MM: '%d maanden',\n        y: 'één jaar',\n        yy: '%d jaar'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        return num + ((num === 1 || num === 8 || num >= 20) ? 'ste' : 'de');\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Polish [pl]\n//! author : Rafal Hirsz : https://github.com/evoL\nlet /** @type {?} */ monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');\nlet /** @type {?} */ monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\nfunction plural$1(num) {\n    return (num % 10 < 5) && (num % 10 > 1) && ((~~(num / 10) % 10) !== 1);\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\nfunction translate$5(num, withoutSuffix, key) {\n    let /** @type {?} */ result = num + ' ';\n    switch (key) {\n        case 'ss':\n            return result + (plural$1(num) ? 'sekundy' : 'sekund');\n        case 'm':\n            return withoutSuffix ? 'minuta' : 'minutę';\n        case 'mm':\n            return result + (plural$1(num) ? 'minuty' : 'minut');\n        case 'h':\n            return withoutSuffix ? 'godzina' : 'godzinę';\n        case 'hh':\n            return result + (plural$1(num) ? 'godziny' : 'godzin');\n        case 'MM':\n            return result + (plural$1(num) ? 'miesiące' : 'miesięcy');\n        case 'yy':\n            return result + (plural$1(num) ? 'lata' : 'lat');\n    }\n}\nconst /** @type {?} */ plLocale = {\n    abbr: 'pl',\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @param {?=} isUTC\n     * @return {?}\n     */\n    months(date, format, isUTC) {\n        if (!date) {\n            return monthsNominative;\n        }\n        else if (format === '') {\n            // Hack: if format empty we know this is used to generate\n            // RegExp by moment. Give then back both valid forms of months\n            // in RegExp ready format.\n            return '(' + monthsSubjective[getMonth(date, isUTC)] + '|' + monthsNominative[getMonth(date, isUTC)] + ')';\n        }\n        else if (/D MMMM/.test(format)) {\n            return monthsSubjective[getMonth(date, isUTC)];\n        }\n        else {\n            return monthsNominative[getMonth(date, isUTC)];\n        }\n    },\n    monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),\n    weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),\n    weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),\n    weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[Dziś o] LT',\n        nextDay: '[Jutro o] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[W niedzielę o] LT';\n                case 2:\n                    return '[We wtorek o] LT';\n                case 3:\n                    return '[W środę o] LT';\n                case 5:\n                    return '[W piątek o] LT';\n                case 6:\n                    return '[W sobotę o] LT';\n                default:\n                    return '[W] dddd [o] LT';\n            }\n        },\n        lastDay: '[Wczoraj o] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[W zeszłą niedzielę o] LT';\n                case 3:\n                    return '[W zeszłą środę o] LT';\n                case 4:\n                    return '[W zeszłą czwartek o] LT';\n                case 5:\n                    return '[W zeszłą piątek o] LT';\n                case 6:\n                    return '[W zeszłą sobotę o] LT';\n                default:\n                    return '[W zeszły] dddd [o] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'za %s',\n        past: '%s temu',\n        s: 'kilka sekund',\n        ss: translate$5,\n        m: translate$5,\n        mm: translate$5,\n        h: translate$5,\n        hh: translate$5,\n        d: '1 dzień',\n        dd: '%d dni',\n        M: 'miesiąc',\n        MM: translate$5,\n        y: 'rok',\n        yy: translate$5\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Portuguese (Brazil) [pt-br]\n//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira\nconst /** @type {?} */ ptBrLocale = {\n    abbr: 'pt-br',\n    months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),\n    monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),\n    weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),\n    weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),\n    weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'\n    },\n    calendar: {\n        sameDay: '[Hoje às] LT',\n        nextDay: '[Amanhã às] LT',\n        nextWeek: 'dddd [às] LT',\n        lastDay: '[Ontem às] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            return (getDayOfWeek(date) === 0 || getDayOfWeek(date) === 6) ?\n                '[Último] dddd [às] LT' : // Saturday + Sunday\n                '[Última] dddd [às] LT'; // Monday - Friday\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'em %s',\n        past: '%s atrás',\n        s: 'poucos segundos',\n        ss: '%d segundos',\n        m: 'um minuto',\n        mm: '%d minutos',\n        h: 'uma hora',\n        hh: '%d horas',\n        d: 'um dia',\n        dd: '%d dias',\n        M: 'um mês',\n        MM: '%d meses',\n        y: 'um ano',\n        yy: '%d anos'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\nfunction relativeTimeWithPlural(num, withoutSuffix, key) {\n    let /** @type {?} */ format = {\n        ss: 'secunde',\n        mm: 'minute',\n        hh: 'ore',\n        dd: 'zile',\n        MM: 'luni',\n        yy: 'ani'\n    };\n    let /** @type {?} */ separator = ' ';\n    if (num % 100 >= 20 || (num >= 100 && num % 100 === 0)) {\n        separator = ' de ';\n    }\n    return num + separator + format[key];\n}\nconst /** @type {?} */ roLocale = {\n    abbr: 'ro',\n    months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),\n    monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),\n    weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),\n    weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY H:mm',\n        LLLL: 'dddd, D MMMM YYYY H:mm'\n    },\n    calendar: {\n        sameDay: '[azi la] LT',\n        nextDay: '[mâine la] LT',\n        nextWeek: 'dddd [la] LT',\n        lastDay: '[ieri la] LT',\n        lastWeek: '[fosta] dddd [la] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'peste %s',\n        past: '%s în urmă',\n        s: 'câteva secunde',\n        ss: relativeTimeWithPlural,\n        m: 'un minut',\n        mm: relativeTimeWithPlural,\n        h: 'o oră',\n        hh: relativeTimeWithPlural,\n        d: 'o zi',\n        dd: relativeTimeWithPlural,\n        M: 'o lună',\n        MM: relativeTimeWithPlural,\n        y: 'un an',\n        yy: relativeTimeWithPlural\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 7 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} word\n * @param {?} num\n * @return {?}\n */\nfunction plural$2(word, num) {\n    let /** @type {?} */ forms = word.split('_');\n    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @return {?}\n */\nfunction relativeTimeWithPlural$1(num, withoutSuffix, key) {\n    let /** @type {?} */ format = {\n        ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',\n        mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n        hh: 'час_часа_часов',\n        dd: 'день_дня_дней',\n        MM: 'месяц_месяца_месяцев',\n        yy: 'год_года_лет'\n    };\n    if (key === 'm') {\n        return withoutSuffix ? 'минута' : 'минуту';\n    }\n    return num + ' ' + plural$2(format[key], +num);\n}\nlet /** @type {?} */ monthsParse$6 = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];\n// http://new.gramota.ru/spravka/rules/139-prop : § 103\n// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\nconst /** @type {?} */ ruLocale = {\n    abbr: 'ru',\n    months: {\n        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n    },\n    monthsShort: {\n        // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку ?\n        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n    },\n    weekdays: {\n        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n        isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n    },\n    weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    monthsParse: monthsParse$6,\n    longMonthsParse: monthsParse$6,\n    shortMonthsParse: monthsParse$6,\n    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n    monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // копия предыдущего\n    monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // полные названия с падежами\n    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n    // Выражение, которое соотвествует только сокращённым формам\n    monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D MMMM YYYY г.',\n        LLL: 'D MMMM YYYY г., H:mm',\n        LLLL: 'dddd, D MMMM YYYY г., H:mm'\n    },\n    calendar: {\n        sameDay: '[Сегодня в] LT',\n        nextDay: '[Завтра в] LT',\n        lastDay: '[Вчера в] LT',\n        /**\n         * @param {?} date\n         * @param {?} now\n         * @return {?}\n         */\n        nextWeek(date, now) {\n            if (getWeek(now) !== getWeek(date)) {\n                switch (getDayOfWeek(date)) {\n                    case 0:\n                        return '[В следующее] dddd [в] LT';\n                    case 1:\n                    case 2:\n                    case 4:\n                        return '[В следующий] dddd [в] LT';\n                    case 3:\n                    case 5:\n                    case 6:\n                        return '[В следующую] dddd [в] LT';\n                }\n            }\n            else {\n                if (getDayOfWeek(date) === 2) {\n                    return '[Во] dddd [в] LT';\n                }\n                else {\n                    return '[В] dddd [в] LT';\n                }\n            }\n        },\n        /**\n         * @param {?} date\n         * @param {?} now\n         * @return {?}\n         */\n        lastWeek(date, now) {\n            if (getWeek(now) !== getWeek(date)) {\n                switch (getDayOfWeek(date)) {\n                    case 0:\n                        return '[В прошлое] dddd [в] LT';\n                    case 1:\n                    case 2:\n                    case 4:\n                        return '[В прошлый] dddd [в] LT';\n                    case 3:\n                    case 5:\n                    case 6:\n                        return '[В прошлую] dddd [в] LT';\n                }\n            }\n            else {\n                if (getDayOfWeek(date) === 2) {\n                    return '[Во] dddd [в] LT';\n                }\n                else {\n                    return '[В] dddd [в] LT';\n                }\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'через %s',\n        past: '%s назад',\n        s: 'несколько секунд',\n        ss: relativeTimeWithPlural$1,\n        m: relativeTimeWithPlural$1,\n        mm: relativeTimeWithPlural$1,\n        h: 'час',\n        hh: relativeTimeWithPlural$1,\n        d: 'день',\n        dd: relativeTimeWithPlural$1,\n        M: 'месяц',\n        MM: relativeTimeWithPlural$1,\n        y: 'год',\n        yy: relativeTimeWithPlural$1\n    },\n    meridiemParse: /ночи|утра|дня|вечера/i,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return /^(дня|вечера)$/.test(input);\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 4) {\n            return 'ночи';\n        }\n        else if (hour < 12) {\n            return 'утра';\n        }\n        else if (hour < 17) {\n            return 'дня';\n        }\n        else {\n            return 'вечера';\n        }\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n    /**\n     * @param {?} _num\n     * @param {?} period\n     * @return {?}\n     */\n    ordinal(_num, period) {\n        const /** @type {?} */ num = Number(_num);\n        switch (period) {\n            case 'M':\n            case 'd':\n            case 'DDD':\n                return num + '-й';\n            case 'D':\n                return num + '-го';\n            case 'w':\n            case 'W':\n                return num + '-я';\n            default:\n                return num.toString(10);\n        }\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n//! moment.js locale configuration\n//! locale : Slovak [sk]\n//! author : Jozef Pažin : https://github.com/atiris\nconst /** @type {?} */ months$2 = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');\nconst /** @type {?} */ monthsShort$6 = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');\n/**\n * @param {?} num\n * @return {?}\n */\nfunction plural$3(num) {\n    return (num > 1) && (num < 5) && (~~(num / 10) !== 1);\n}\n/**\n * @param {?} num\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction translate$6(num, withoutSuffix, key, isFuture) {\n    const /** @type {?} */ result = num + ' ';\n    switch (key) {\n        case 's':\n            // a few seconds / in a few seconds / a few seconds ago\n            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';\n        case 'ss':\n            // 9 seconds / in 9 seconds / 9 seconds ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'sekundy' : 'sekúnd');\n            }\n            else {\n                return result + 'sekundami';\n            }\n        // break;\n        case 'm':\n            // a minute / in a minute / a minute ago\n            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');\n        case 'mm':\n            // 9 minutes / in 9 minutes / 9 minutes ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'minúty' : 'minút');\n            }\n            else {\n                return result + 'minútami';\n            }\n        // break;\n        case 'h':\n            // an hour / in an hour / an hour ago\n            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');\n        case 'hh':\n            // 9 hours / in 9 hours / 9 hours ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'hodiny' : 'hodín');\n            }\n            else {\n                return result + 'hodinami';\n            }\n        // break;\n        case 'd':\n            // a day / in a day / a day ago\n            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';\n        case 'dd':\n            // 9 days / in 9 days / 9 days ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'dni' : 'dní');\n            }\n            else {\n                return result + 'dňami';\n            }\n        // break;\n        case 'M':\n            // a month / in a month / a month ago\n            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';\n        case 'MM':\n            // 9 months / in 9 months / 9 months ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'mesiace' : 'mesiacov');\n            }\n            else {\n                return result + 'mesiacmi';\n            }\n        // break;\n        case 'y':\n            // a year / in a year / a year ago\n            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';\n        case 'yy':\n            // 9 years / in 9 years / 9 years ago\n            if (withoutSuffix || isFuture) {\n                return result + (plural$3(num) ? 'roky' : 'rokov');\n            }\n            else {\n                return result + 'rokmi';\n            }\n    }\n}\nconst /** @type {?} */ skLocale = {\n    abbr: 'sk',\n    months: months$2,\n    monthsShort: monthsShort$6,\n    weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),\n    weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),\n    weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY H:mm',\n        LLLL: 'dddd D. MMMM YYYY H:mm',\n        l: 'D. M. YYYY'\n    },\n    calendar: {\n        sameDay: '[dnes o] LT',\n        nextDay: '[zajtra o] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[v nedeľu o] LT';\n                case 1:\n                case 2:\n                    return '[v] dddd [o] LT';\n                case 3:\n                    return '[v stredu o] LT';\n                case 4:\n                    return '[vo štvrtok o] LT';\n                case 5:\n                    return '[v piatok o] LT';\n                case 6:\n                    return '[v sobotu o] LT';\n            }\n        },\n        lastDay: '[včera o] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[minulú nedeľu o] LT';\n                case 1:\n                case 2:\n                    return '[minulý] dddd [o] LT';\n                case 3:\n                    return '[minulú stredu o] LT';\n                case 4:\n                case 5:\n                    return '[minulý] dddd [o] LT';\n                case 6:\n                    return '[minulú sobotu o] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'o %s',\n        past: 'pred %s',\n        s: translate$6,\n        ss: translate$6,\n        m: translate$6,\n        mm: translate$6,\n        h: translate$6,\n        hh: translate$6,\n        d: translate$6,\n        dd: translate$6,\n        M: translate$6,\n        MM: translate$6,\n        y: translate$6,\n        yy: translate$6\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} number\n * @param {?} withoutSuffix\n * @param {?} key\n * @param {?} isFuture\n * @return {?}\n */\nfunction processRelativeTime$1(number, withoutSuffix, key, isFuture) {\n    var /** @type {?} */ result = number + ' ';\n    switch (key) {\n        case 's':\n            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';\n        case 'ss':\n            if (number === 1) {\n                result += withoutSuffix ? 'sekundo' : 'sekundi';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';\n            }\n            else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'sekund' : 'sekund';\n            }\n            return result;\n        case 'm':\n            return withoutSuffix ? 'ena minuta' : 'eno minuto';\n        case 'mm':\n            if (number === 1) {\n                result += withoutSuffix ? 'minuta' : 'minuto';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';\n            }\n            else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'minute' : 'minutami';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'minut' : 'minutami';\n            }\n            return result;\n        case 'h':\n            return withoutSuffix ? 'ena ura' : 'eno uro';\n        case 'hh':\n            if (number === 1) {\n                result += withoutSuffix ? 'ura' : 'uro';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'uri' : 'urama';\n            }\n            else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'ure' : 'urami';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'ur' : 'urami';\n            }\n            return result;\n        case 'd':\n            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';\n        case 'dd':\n            if (number === 1) {\n                result += withoutSuffix || isFuture ? 'dan' : 'dnem';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';\n            }\n            return result;\n        case 'M':\n            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';\n        case 'MM':\n            if (number === 1) {\n                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';\n            }\n            else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';\n            }\n            return result;\n        case 'y':\n            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';\n        case 'yy':\n            if (number === 1) {\n                result += withoutSuffix || isFuture ? 'leto' : 'letom';\n            }\n            else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'leti' : 'letoma';\n            }\n            else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'leta' : 'leti';\n            }\n            else {\n                result += withoutSuffix || isFuture ? 'let' : 'leti';\n            }\n            return result;\n    }\n}\nconst /** @type {?} */ slLocale = {\n    abbr: 'sl',\n    months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),\n    monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),\n    weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),\n    weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D. MMMM YYYY',\n        LLL: 'D. MMMM YYYY H:mm',\n        LLLL: 'dddd, D. MMMM YYYY H:mm'\n    },\n    calendar: {\n        sameDay: '[danes ob] LT',\n        nextDay: '[jutri ob] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        nextWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[v] [nedeljo] [ob] LT';\n                case 3:\n                    return '[v] [sredo] [ob] LT';\n                case 6:\n                    return '[v] [soboto] [ob] LT';\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                    return '[v] dddd [ob] LT';\n            }\n        },\n        lastDay: '[včeraj ob] LT',\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        lastWeek(date) {\n            switch (getDayOfWeek(date)) {\n                case 0:\n                    return '[prejšnjo] [nedeljo] [ob] LT';\n                case 3:\n                    return '[prejšnjo] [sredo] [ob] LT';\n                case 6:\n                    return '[prejšnjo] [soboto] [ob] LT';\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                    return '[prejšnji] dddd [ob] LT';\n            }\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'čez %s',\n        past: 'pred %s',\n        s: processRelativeTime$1,\n        ss: processRelativeTime$1,\n        m: processRelativeTime$1,\n        mm: processRelativeTime$1,\n        h: processRelativeTime$1,\n        hh: processRelativeTime$1,\n        d: processRelativeTime$1,\n        dd: processRelativeTime$1,\n        M: processRelativeTime$1,\n        MM: processRelativeTime$1,\n        y: processRelativeTime$1,\n        yy: processRelativeTime$1\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n    ordinal: '%d.',\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 7 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Swedish [sv]\n//! author : Jens Alm : https://github.com/ulmus\nconst /** @type {?} */ svLocale = {\n    abbr: 'sv',\n    months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),\n    monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),\n    weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),\n    weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),\n    weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY-MM-DD',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY [kl.] HH:mm',\n        LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',\n        lll: 'D MMM YYYY HH:mm',\n        llll: 'ddd D MMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[Idag] LT',\n        nextDay: '[Imorgon] LT',\n        lastDay: '[Igår] LT',\n        nextWeek: '[På] dddd LT',\n        lastWeek: '[I] dddd[s] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'om %s',\n        past: 'för %s sedan',\n        s: 'några sekunder',\n        ss: '%d sekunder',\n        m: 'en minut',\n        mm: '%d minuter',\n        h: 'en timme',\n        hh: '%d timmar',\n        d: 'en dag',\n        dd: '%d dagar',\n        M: 'en månad',\n        MM: '%d månader',\n        y: 'ett år',\n        yy: '%d år'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(e|a)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        let /** @type {?} */ b = num % 10, /** @type {?} */\n        output = (~~(num % 100 / 10) === 1) ? 'e' :\n            (b === 1) ? 'a' :\n                (b === 2) ? 'a' :\n                    (b === 3) ? 'e' : 'e';\n        return num + output;\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\nconst /** @type {?} */ thLocale = {\n    abbr: 'th',\n    months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),\n    monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),\n    weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),\n    // yes, three characters difference\n    weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY เวลา H:mm',\n        LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'\n    },\n    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    isPM(input) {\n        return input === 'หลังเที่ยง';\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        if (hour < 12) {\n            return 'ก่อนเที่ยง';\n        }\n        else {\n            return 'หลังเที่ยง';\n        }\n    },\n    calendar: {\n        sameDay: '[วันนี้ เวลา] LT',\n        nextDay: '[พรุ่งนี้ เวลา] LT',\n        nextWeek: 'dddd[หน้า เวลา] LT',\n        lastDay: '[เมื่อวานนี้ เวลา] LT',\n        lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'อีก %s',\n        past: '%sที่แล้ว',\n        s: 'ไม่กี่วินาที',\n        ss: '%d วินาที',\n        m: '1 นาที',\n        mm: '%d นาที',\n        h: '1 ชั่วโมง',\n        hh: '%d ชั่วโมง',\n        d: '1 วัน',\n        dd: '%d วัน',\n        M: '1 เดือน',\n        MM: '%d เดือน',\n        y: '1 ปี',\n        yy: '%d ปี'\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n//! moment.js locale configuration\n//! locale : Turkish [tr]\n//! authors : Erhan Gundogan : https://github.com/erhangundogan,\n//!           Burak Yiğit Kaya: https://github.com/BYK\nlet /** @type {?} */ suffixes = {\n    1: '\\'inci',\n    5: '\\'inci',\n    8: '\\'inci',\n    70: '\\'inci',\n    80: '\\'inci',\n    2: '\\'nci',\n    7: '\\'nci',\n    20: '\\'nci',\n    50: '\\'nci',\n    3: '\\'üncü',\n    4: '\\'üncü',\n    100: '\\'üncü',\n    6: '\\'ncı',\n    9: '\\'uncu',\n    10: '\\'uncu',\n    30: '\\'uncu',\n    60: '\\'ıncı',\n    90: '\\'ıncı'\n};\nconst /** @type {?} */ trLocale = {\n    abbr: 'tr',\n    months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),\n    monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),\n    weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),\n    weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),\n    weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm'\n    },\n    calendar: {\n        sameDay: '[bugün saat] LT',\n        nextDay: '[yarın saat] LT',\n        nextWeek: '[gelecek] dddd [saat] LT',\n        lastDay: '[dün] LT',\n        lastWeek: '[geçen] dddd [saat] LT',\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: '%s sonra',\n        past: '%s önce',\n        s: 'birkaç saniye',\n        ss: '%d saniye',\n        m: 'bir dakika',\n        mm: '%d dakika',\n        h: 'bir saat',\n        hh: '%d saat',\n        d: 'bir gün',\n        dd: '%d gün',\n        M: 'bir ay',\n        MM: '%d ay',\n        y: 'bir yıl',\n        yy: '%d yıl'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,\n    /**\n     * @param {?} _num\n     * @return {?}\n     */\n    ordinal(_num) {\n        const /** @type {?} */ num = Number(_num);\n        if (num === 0) {\n            // special case for zero\n            return num + '\\'ıncı';\n        }\n        let /** @type {?} */ a = num % 10, /** @type {?} */\n        b = num % 100 - a, /** @type {?} */\n        c = num >= 100 ? 100 : null;\n        return num + (suffixes[a] || suffixes[b] || suffixes[c]);\n    },\n    week: {\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 7 // The week that contains Jan 1st is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// tslint:disable:comment-format binary-expression-operand-order max-line-length\n// tslint:disable:no-bitwise prefer-template cyclomatic-complexity\n// tslint:disable:no-shadowed-variable switch-default prefer-const\n// tslint:disable:one-variable-per-declaration newline-before-return\n// tslint:disable:no-parameter-reassignment prefer-switch\n//! moment.js locale configuration\n//! locale : Chinese (China) [zh-cn]\n//! author : suupic : https://github.com/suupic\n//! author : Zeno Zeng : https://github.com/zenozeng\nconst /** @type {?} */ zhCnLocale = {\n    abbr: 'zh-cn',\n    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n    weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),\n    weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY/MM/DD',\n        LL: 'YYYY年M月D日',\n        LLL: 'YYYY年M月D日Ah点mm分',\n        LLLL: 'YYYY年M月D日ddddAh点mm分',\n        l: 'YYYY/M/D',\n        ll: 'YYYY年M月D日',\n        lll: 'YYYY年M月D日 HH:mm',\n        llll: 'YYYY年M月D日dddd HH:mm'\n    },\n    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n    /**\n     * @param {?} hour\n     * @param {?} meridiem\n     * @return {?}\n     */\n    meridiemHour(hour, meridiem) {\n        if (hour === 12) {\n            hour = 0;\n        }\n        if (meridiem === '凌晨' || meridiem === '早上' ||\n            meridiem === '上午') {\n            return hour;\n        }\n        else if (meridiem === '下午' || meridiem === '晚上') {\n            return hour + 12;\n        }\n        else {\n            // '中午'\n            return hour >= 11 ? hour : hour + 12;\n        }\n    },\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} isLower\n     * @return {?}\n     */\n    meridiem(hour, minute, isLower) {\n        let /** @type {?} */ hm = hour * 100 + minute;\n        if (hm < 600) {\n            return '凌晨';\n        }\n        else if (hm < 900) {\n            return '早上';\n        }\n        else if (hm < 1130) {\n            return '上午';\n        }\n        else if (hm < 1230) {\n            return '中午';\n        }\n        else if (hm < 1800) {\n            return '下午';\n        }\n        else {\n            return '晚上';\n        }\n    },\n    calendar: {\n        sameDay: '[今天]LT',\n        nextDay: '[明天]LT',\n        nextWeek: '[下]ddddLT',\n        lastDay: '[昨天]LT',\n        lastWeek: '[上]ddddLT',\n        sameElse: 'L'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(日|月|周)/,\n    /**\n     * @param {?} _num\n     * @param {?} period\n     * @return {?}\n     */\n    ordinal(_num, period) {\n        const /** @type {?} */ num = Number(_num);\n        switch (period) {\n            case 'd':\n            case 'D':\n            case 'DDD':\n                return num + '日';\n            case 'M':\n                return num + '月';\n            case 'w':\n            case 'W':\n                return num + '周';\n            default:\n                return num.toString();\n        }\n    },\n    relativeTime: {\n        future: '%s内',\n        past: '%s前',\n        s: '几秒',\n        ss: '%d 秒',\n        m: '1 分钟',\n        mm: '%d 分钟',\n        h: '1 小时',\n        hh: '%d 小时',\n        d: '1 天',\n        dd: '%d 天',\n        M: '1 个月',\n        MM: '%d 个月',\n        y: '1 年',\n        yy: '%d 年'\n    },\n    week: {\n        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\n        dow: 1,\n        // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { add, subtract, getDay, isFirstDayOfWeek, isSameYear, isSameDay, isSameMonth, getFullYear, getFirstDayOfMonth, getMonth, parseDate, formatDate, listLocales, getLocale, updateLocale, defineLocale, getSetGlobalLocale, isAfter, isBefore, isDisabledDay, isSame, isArray, isDateValid, isDate, shiftDate, setFullDate, endOf, startOf, arLocale, bgLocale, caLocale, csLocale, daLocale, deLocale, enGbLocale, esDoLocale, esLocale, esUsLocale, fiLocale, frLocale, glLocale, heLocale, hiLocale, huLocale, idLocale, itLocale, jaLocale, koLocale, ltLocale, mnLocale, nbLocale, nlBeLocale, nlLocale, plLocale, ptBrLocale, roLocale, ruLocale, skLocale, slLocale, svLocale, thLocale, trLocale, zhCnLocale, createDate as ɵa };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"metadata":{},"sourceType":"module"}